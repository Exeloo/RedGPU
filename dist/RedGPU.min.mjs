var t=1e-6,e="undefined"!=typeof Float32Array?Float32Array:Array,r=Math.random,n=Math.PI/180;Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});var i=Object.freeze({EPSILON:t,get ARRAY_TYPE(){return e},RANDOM:r,setMatrixArrayType:function(t){e=t},toRadian:function(t){return t*n},equals:function(e,r){return Math.abs(e-r)<=t*Math.max(1,Math.abs(e),Math.abs(r))}});function o(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=r[0],u=r[1],l=r[2],f=r[3];return t[0]=n*s+o*u,t[1]=i*s+a*u,t[2]=n*l+o*f,t[3]=i*l+a*f,t}function a(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t}var s=o,u=a,l=Object.freeze({create:function(){var t=new e(4);return e!=Float32Array&&(t[1]=0,t[2]=0),t[0]=1,t[3]=1,t},clone:function(t){var r=new e(4);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},identity:function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t},fromValues:function(t,r,n,i){var o=new e(4);return o[0]=t,o[1]=r,o[2]=n,o[3]=i,o},set:function(t,e,r,n,i){return t[0]=e,t[1]=r,t[2]=n,t[3]=i,t},transpose:function(t,e){if(t===e){var r=e[1];t[1]=e[2],t[2]=r}else t[0]=e[0],t[1]=e[2],t[2]=e[1],t[3]=e[3];return t},invert:function(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=r*o-i*n;return a?(a=1/a,t[0]=o*a,t[1]=-n*a,t[2]=-i*a,t[3]=r*a,t):null},adjoint:function(t,e){var r=e[0];return t[0]=e[3],t[1]=-e[1],t[2]=-e[2],t[3]=r,t},determinant:function(t){return t[0]*t[3]-t[2]*t[1]},multiply:o,rotate:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=Math.sin(r),u=Math.cos(r);return t[0]=n*u+o*s,t[1]=i*u+a*s,t[2]=n*-s+o*u,t[3]=i*-s+a*u,t},scale:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=r[0],u=r[1];return t[0]=n*s,t[1]=i*s,t[2]=o*u,t[3]=a*u,t},fromRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=r,t[2]=-r,t[3]=n,t},fromScaling:function(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=e[1],t},str:function(t){return"mat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"},frob:function(t){return Math.hypot(t[0],t[1],t[2],t[3])},LDU:function(t,e,r,n){return t[2]=n[2]/n[0],r[0]=n[0],r[1]=n[1],r[3]=n[3]-t[2]*r[1],[t,e,r]},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t},subtract:a,exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]},equals:function(e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=r[0],u=r[1],l=r[2],f=r[3];return Math.abs(n-s)<=t*Math.max(1,Math.abs(n),Math.abs(s))&&Math.abs(i-u)<=t*Math.max(1,Math.abs(i),Math.abs(u))&&Math.abs(o-l)<=t*Math.max(1,Math.abs(o),Math.abs(l))&&Math.abs(a-f)<=t*Math.max(1,Math.abs(a),Math.abs(f))},multiplyScalar:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t},multiplyScalarAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t},mul:s,sub:u});function f(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=r[0],f=r[1],m=r[2],c=r[3],h=r[4],d=r[5];return t[0]=n*l+o*f,t[1]=i*l+a*f,t[2]=n*m+o*c,t[3]=i*m+a*c,t[4]=n*h+o*d+s,t[5]=i*h+a*d+u,t}function m(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t[4]=e[4]-r[4],t[5]=e[5]-r[5],t}var c=f,h=m,d=Object.freeze({create:function(){var t=new e(6);return e!=Float32Array&&(t[1]=0,t[2]=0,t[4]=0,t[5]=0),t[0]=1,t[3]=1,t},clone:function(t){var r=new e(6);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[4]=t[4],r[5]=t[5],r},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t},identity:function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t},fromValues:function(t,r,n,i,o,a){var s=new e(6);return s[0]=t,s[1]=r,s[2]=n,s[3]=i,s[4]=o,s[5]=a,s},set:function(t,e,r,n,i,o,a){return t[0]=e,t[1]=r,t[2]=n,t[3]=i,t[4]=o,t[5]=a,t},invert:function(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=r*o-n*i;return u?(u=1/u,t[0]=o*u,t[1]=-n*u,t[2]=-i*u,t[3]=r*u,t[4]=(i*s-o*a)*u,t[5]=(n*a-r*s)*u,t):null},determinant:function(t){return t[0]*t[3]-t[1]*t[2]},multiply:f,rotate:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=Math.sin(r),f=Math.cos(r);return t[0]=n*f+o*l,t[1]=i*f+a*l,t[2]=n*-l+o*f,t[3]=i*-l+a*f,t[4]=s,t[5]=u,t},scale:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=r[0],f=r[1];return t[0]=n*l,t[1]=i*l,t[2]=o*f,t[3]=a*f,t[4]=s,t[5]=u,t},translate:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=r[0],f=r[1];return t[0]=n,t[1]=i,t[2]=o,t[3]=a,t[4]=n*l+o*f+s,t[5]=i*l+a*f+u,t},fromRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=r,t[2]=-r,t[3]=n,t[4]=0,t[5]=0,t},fromScaling:function(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=e[1],t[4]=0,t[5]=0,t},fromTranslation:function(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=e[0],t[5]=e[1],t},str:function(t){return"mat2d("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+")"},frob:function(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],1)},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t},subtract:m,multiplyScalar:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t},multiplyScalarAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t[4]=e[4]+r[4]*n,t[5]=e[5]+r[5]*n,t},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]},equals:function(e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=r[0],f=r[1],m=r[2],c=r[3],h=r[4],d=r[5];return Math.abs(n-l)<=t*Math.max(1,Math.abs(n),Math.abs(l))&&Math.abs(i-f)<=t*Math.max(1,Math.abs(i),Math.abs(f))&&Math.abs(o-m)<=t*Math.max(1,Math.abs(o),Math.abs(m))&&Math.abs(a-c)<=t*Math.max(1,Math.abs(a),Math.abs(c))&&Math.abs(s-h)<=t*Math.max(1,Math.abs(s),Math.abs(h))&&Math.abs(u-d)<=t*Math.max(1,Math.abs(u),Math.abs(d))},mul:c,sub:h});function p(){var t=new e(9);return e!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[5]=0,t[6]=0,t[7]=0),t[0]=1,t[4]=1,t[8]=1,t}function v(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=e[8],c=r[0],h=r[1],d=r[2],p=r[3],v=r[4],_=r[5],g=r[6],x=r[7],y=r[8];return t[0]=c*n+h*a+d*l,t[1]=c*i+h*s+d*f,t[2]=c*o+h*u+d*m,t[3]=p*n+v*a+_*l,t[4]=p*i+v*s+_*f,t[5]=p*o+v*u+_*m,t[6]=g*n+x*a+y*l,t[7]=g*i+x*s+y*f,t[8]=g*o+x*u+y*m,t}function _(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t[4]=e[4]-r[4],t[5]=e[5]-r[5],t[6]=e[6]-r[6],t[7]=e[7]-r[7],t[8]=e[8]-r[8],t}var g=v,x=_,y=Object.freeze({create:p,fromMat4:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t},clone:function(t){var r=new e(9);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[4]=t[4],r[5]=t[5],r[6]=t[6],r[7]=t[7],r[8]=t[8],r},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t},fromValues:function(t,r,n,i,o,a,s,u,l){var f=new e(9);return f[0]=t,f[1]=r,f[2]=n,f[3]=i,f[4]=o,f[5]=a,f[6]=s,f[7]=u,f[8]=l,f},set:function(t,e,r,n,i,o,a,s,u,l){return t[0]=e,t[1]=r,t[2]=n,t[3]=i,t[4]=o,t[5]=a,t[6]=s,t[7]=u,t[8]=l,t},identity:function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},transpose:function(t,e){if(t===e){var r=e[1],n=e[2],i=e[5];t[1]=e[3],t[2]=e[6],t[3]=r,t[5]=e[7],t[6]=n,t[7]=i}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t},invert:function(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=e[6],l=e[7],f=e[8],m=f*a-s*l,c=-f*o+s*u,h=l*o-a*u,d=r*m+n*c+i*h;return d?(d=1/d,t[0]=m*d,t[1]=(-f*n+i*l)*d,t[2]=(s*n-i*a)*d,t[3]=c*d,t[4]=(f*r-i*u)*d,t[5]=(-s*r+i*o)*d,t[6]=h*d,t[7]=(-l*r+n*u)*d,t[8]=(a*r-n*o)*d,t):null},adjoint:function(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=e[6],l=e[7],f=e[8];return t[0]=a*f-s*l,t[1]=i*l-n*f,t[2]=n*s-i*a,t[3]=s*u-o*f,t[4]=r*f-i*u,t[5]=i*o-r*s,t[6]=o*l-a*u,t[7]=n*u-r*l,t[8]=r*a-n*o,t},determinant:function(t){var e=t[0],r=t[1],n=t[2],i=t[3],o=t[4],a=t[5],s=t[6],u=t[7],l=t[8];return e*(l*o-a*u)+r*(-l*i+a*s)+n*(u*i-o*s)},multiply:v,translate:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=e[8],c=r[0],h=r[1];return t[0]=n,t[1]=i,t[2]=o,t[3]=a,t[4]=s,t[5]=u,t[6]=c*n+h*a+l,t[7]=c*i+h*s+f,t[8]=c*o+h*u+m,t},rotate:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=e[8],c=Math.sin(r),h=Math.cos(r);return t[0]=h*n+c*a,t[1]=h*i+c*s,t[2]=h*o+c*u,t[3]=h*a-c*n,t[4]=h*s-c*i,t[5]=h*u-c*o,t[6]=l,t[7]=f,t[8]=m,t},scale:function(t,e,r){var n=r[0],i=r[1];return t[0]=n*e[0],t[1]=n*e[1],t[2]=n*e[2],t[3]=i*e[3],t[4]=i*e[4],t[5]=i*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t},fromTranslation:function(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=e[0],t[7]=e[1],t[8]=1,t},fromRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=r,t[2]=0,t[3]=-r,t[4]=n,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},fromScaling:function(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=e[1],t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},fromMat2d:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=0,t[3]=e[2],t[4]=e[3],t[5]=0,t[6]=e[4],t[7]=e[5],t[8]=1,t},fromQuat:function(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=r+r,s=n+n,u=i+i,l=r*a,f=n*a,m=n*s,c=i*a,h=i*s,d=i*u,p=o*a,v=o*s,_=o*u;return t[0]=1-m-d,t[3]=f-_,t[6]=c+v,t[1]=f+_,t[4]=1-l-d,t[7]=h-p,t[2]=c-v,t[5]=h+p,t[8]=1-l-m,t},normalFromMat4:function(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=e[6],l=e[7],f=e[8],m=e[9],c=e[10],h=e[11],d=e[12],p=e[13],v=e[14],_=e[15],g=r*s-n*a,x=r*u-i*a,y=r*l-o*a,T=n*u-i*s,S=n*l-o*s,U=i*l-o*u,M=f*p-m*d,b=f*v-c*d,P=f*_-h*d,w=m*v-c*p,G=m*_-h*p,B=c*_-h*v,E=g*B-x*G+y*w+T*P-S*b+U*M;return E?(E=1/E,t[0]=(s*B-u*G+l*w)*E,t[1]=(u*P-a*B-l*b)*E,t[2]=(a*G-s*P+l*M)*E,t[3]=(i*G-n*B-o*w)*E,t[4]=(r*B-i*P+o*b)*E,t[5]=(n*P-r*G-o*M)*E,t[6]=(p*U-v*S+_*T)*E,t[7]=(v*y-d*U-_*x)*E,t[8]=(d*S-p*y+_*g)*E,t):null},projection:function(t,e,r){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/r,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t},str:function(t){return"mat3("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+")"},frob:function(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t[6]=e[6]+r[6],t[7]=e[7]+r[7],t[8]=e[8]+r[8],t},subtract:_,multiplyScalar:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*r,t},multiplyScalarAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t[4]=e[4]+r[4]*n,t[5]=e[5]+r[5]*n,t[6]=e[6]+r[6]*n,t[7]=e[7]+r[7]*n,t[8]=e[8]+r[8]*n,t},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]},equals:function(e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=e[8],c=r[0],h=r[1],d=r[2],p=r[3],v=r[4],_=r[5],g=r[6],x=r[7],y=r[8];return Math.abs(n-c)<=t*Math.max(1,Math.abs(n),Math.abs(c))&&Math.abs(i-h)<=t*Math.max(1,Math.abs(i),Math.abs(h))&&Math.abs(o-d)<=t*Math.max(1,Math.abs(o),Math.abs(d))&&Math.abs(a-p)<=t*Math.max(1,Math.abs(a),Math.abs(p))&&Math.abs(s-v)<=t*Math.max(1,Math.abs(s),Math.abs(v))&&Math.abs(u-_)<=t*Math.max(1,Math.abs(u),Math.abs(_))&&Math.abs(l-g)<=t*Math.max(1,Math.abs(l),Math.abs(g))&&Math.abs(f-x)<=t*Math.max(1,Math.abs(f),Math.abs(x))&&Math.abs(m-y)<=t*Math.max(1,Math.abs(m),Math.abs(y))},mul:g,sub:x});function T(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function S(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=e[8],c=e[9],h=e[10],d=e[11],p=e[12],v=e[13],_=e[14],g=e[15],x=r[0],y=r[1],T=r[2],S=r[3];return t[0]=x*n+y*s+T*m+S*p,t[1]=x*i+y*u+T*c+S*v,t[2]=x*o+y*l+T*h+S*_,t[3]=x*a+y*f+T*d+S*g,x=r[4],y=r[5],T=r[6],S=r[7],t[4]=x*n+y*s+T*m+S*p,t[5]=x*i+y*u+T*c+S*v,t[6]=x*o+y*l+T*h+S*_,t[7]=x*a+y*f+T*d+S*g,x=r[8],y=r[9],T=r[10],S=r[11],t[8]=x*n+y*s+T*m+S*p,t[9]=x*i+y*u+T*c+S*v,t[10]=x*o+y*l+T*h+S*_,t[11]=x*a+y*f+T*d+S*g,x=r[12],y=r[13],T=r[14],S=r[15],t[12]=x*n+y*s+T*m+S*p,t[13]=x*i+y*u+T*c+S*v,t[14]=x*o+y*l+T*h+S*_,t[15]=x*a+y*f+T*d+S*g,t}function U(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=n+n,u=i+i,l=o+o,f=n*s,m=n*u,c=n*l,h=i*u,d=i*l,p=o*l,v=a*s,_=a*u,g=a*l;return t[0]=1-(h+p),t[1]=m+g,t[2]=c-_,t[3]=0,t[4]=m-g,t[5]=1-(f+p),t[6]=d+v,t[7]=0,t[8]=c+_,t[9]=d-v,t[10]=1-(f+h),t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function M(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function b(t,e){var r=e[0],n=e[1],i=e[2],o=e[4],a=e[5],s=e[6],u=e[8],l=e[9],f=e[10];return t[0]=Math.hypot(r,n,i),t[1]=Math.hypot(o,a,s),t[2]=Math.hypot(u,l,f),t}function P(t,r){var n=new e(3);b(n,r);var i=1/n[0],o=1/n[1],a=1/n[2],s=r[0]*i,u=r[1]*o,l=r[2]*a,f=r[4]*i,m=r[5]*o,c=r[6]*a,h=r[8]*i,d=r[9]*o,p=r[10]*a,v=s+m+p,_=0;return v>0?(_=2*Math.sqrt(v+1),t[3]=.25*_,t[0]=(c-d)/_,t[1]=(h-l)/_,t[2]=(u-f)/_):s>m&&s>p?(_=2*Math.sqrt(1+s-m-p),t[3]=(c-d)/_,t[0]=.25*_,t[1]=(u+f)/_,t[2]=(h+l)/_):m>p?(_=2*Math.sqrt(1+m-s-p),t[3]=(h-l)/_,t[0]=(u+f)/_,t[1]=.25*_,t[2]=(c+d)/_):(_=2*Math.sqrt(1+p-s-m),t[3]=(u-f)/_,t[0]=(h+l)/_,t[1]=(c+d)/_,t[2]=.25*_),t}function w(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t[4]=e[4]-r[4],t[5]=e[5]-r[5],t[6]=e[6]-r[6],t[7]=e[7]-r[7],t[8]=e[8]-r[8],t[9]=e[9]-r[9],t[10]=e[10]-r[10],t[11]=e[11]-r[11],t[12]=e[12]-r[12],t[13]=e[13]-r[13],t[14]=e[14]-r[14],t[15]=e[15]-r[15],t}var G=S,B=w,E=Object.freeze({create:function(){var t=new e(16);return e!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t},clone:function(t){var r=new e(16);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[4]=t[4],r[5]=t[5],r[6]=t[6],r[7]=t[7],r[8]=t[8],r[9]=t[9],r[10]=t[10],r[11]=t[11],r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15],r},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t},fromValues:function(t,r,n,i,o,a,s,u,l,f,m,c,h,d,p,v){var _=new e(16);return _[0]=t,_[1]=r,_[2]=n,_[3]=i,_[4]=o,_[5]=a,_[6]=s,_[7]=u,_[8]=l,_[9]=f,_[10]=m,_[11]=c,_[12]=h,_[13]=d,_[14]=p,_[15]=v,_},set:function(t,e,r,n,i,o,a,s,u,l,f,m,c,h,d,p,v){return t[0]=e,t[1]=r,t[2]=n,t[3]=i,t[4]=o,t[5]=a,t[6]=s,t[7]=u,t[8]=l,t[9]=f,t[10]=m,t[11]=c,t[12]=h,t[13]=d,t[14]=p,t[15]=v,t},identity:T,transpose:function(t,e){if(t===e){var r=e[1],n=e[2],i=e[3],o=e[6],a=e[7],s=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=r,t[6]=e[9],t[7]=e[13],t[8]=n,t[9]=o,t[11]=e[14],t[12]=i,t[13]=a,t[14]=s}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t},invert:function(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=e[6],l=e[7],f=e[8],m=e[9],c=e[10],h=e[11],d=e[12],p=e[13],v=e[14],_=e[15],g=r*s-n*a,x=r*u-i*a,y=r*l-o*a,T=n*u-i*s,S=n*l-o*s,U=i*l-o*u,M=f*p-m*d,b=f*v-c*d,P=f*_-h*d,w=m*v-c*p,G=m*_-h*p,B=c*_-h*v,E=g*B-x*G+y*w+T*P-S*b+U*M;return E?(E=1/E,t[0]=(s*B-u*G+l*w)*E,t[1]=(i*G-n*B-o*w)*E,t[2]=(p*U-v*S+_*T)*E,t[3]=(c*S-m*U-h*T)*E,t[4]=(u*P-a*B-l*b)*E,t[5]=(r*B-i*P+o*b)*E,t[6]=(v*y-d*U-_*x)*E,t[7]=(f*U-c*y+h*x)*E,t[8]=(a*G-s*P+l*M)*E,t[9]=(n*P-r*G-o*M)*E,t[10]=(d*S-p*y+_*g)*E,t[11]=(m*y-f*S-h*g)*E,t[12]=(s*b-a*w-u*M)*E,t[13]=(r*w-n*b+i*M)*E,t[14]=(p*x-d*T-v*g)*E,t[15]=(f*T-m*x+c*g)*E,t):null},adjoint:function(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=e[6],l=e[7],f=e[8],m=e[9],c=e[10],h=e[11],d=e[12],p=e[13],v=e[14],_=e[15];return t[0]=s*(c*_-h*v)-m*(u*_-l*v)+p*(u*h-l*c),t[1]=-(n*(c*_-h*v)-m*(i*_-o*v)+p*(i*h-o*c)),t[2]=n*(u*_-l*v)-s*(i*_-o*v)+p*(i*l-o*u),t[3]=-(n*(u*h-l*c)-s*(i*h-o*c)+m*(i*l-o*u)),t[4]=-(a*(c*_-h*v)-f*(u*_-l*v)+d*(u*h-l*c)),t[5]=r*(c*_-h*v)-f*(i*_-o*v)+d*(i*h-o*c),t[6]=-(r*(u*_-l*v)-a*(i*_-o*v)+d*(i*l-o*u)),t[7]=r*(u*h-l*c)-a*(i*h-o*c)+f*(i*l-o*u),t[8]=a*(m*_-h*p)-f*(s*_-l*p)+d*(s*h-l*m),t[9]=-(r*(m*_-h*p)-f*(n*_-o*p)+d*(n*h-o*m)),t[10]=r*(s*_-l*p)-a*(n*_-o*p)+d*(n*l-o*s),t[11]=-(r*(s*h-l*m)-a*(n*h-o*m)+f*(n*l-o*s)),t[12]=-(a*(m*v-c*p)-f*(s*v-u*p)+d*(s*c-u*m)),t[13]=r*(m*v-c*p)-f*(n*v-i*p)+d*(n*c-i*m),t[14]=-(r*(s*v-u*p)-a*(n*v-i*p)+d*(n*u-i*s)),t[15]=r*(s*c-u*m)-a*(n*c-i*m)+f*(n*u-i*s),t},determinant:function(t){var e=t[0],r=t[1],n=t[2],i=t[3],o=t[4],a=t[5],s=t[6],u=t[7],l=t[8],f=t[9],m=t[10],c=t[11],h=t[12],d=t[13],p=t[14],v=t[15];return(e*a-r*o)*(m*v-c*p)-(e*s-n*o)*(f*v-c*d)+(e*u-i*o)*(f*p-m*d)+(r*s-n*a)*(l*v-c*h)-(r*u-i*a)*(l*p-m*h)+(n*u-i*s)*(l*d-f*h)},multiply:S,translate:function(t,e,r){var n,i,o,a,s,u,l,f,m,c,h,d,p=r[0],v=r[1],_=r[2];return e===t?(t[12]=e[0]*p+e[4]*v+e[8]*_+e[12],t[13]=e[1]*p+e[5]*v+e[9]*_+e[13],t[14]=e[2]*p+e[6]*v+e[10]*_+e[14],t[15]=e[3]*p+e[7]*v+e[11]*_+e[15]):(n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=e[8],c=e[9],h=e[10],d=e[11],t[0]=n,t[1]=i,t[2]=o,t[3]=a,t[4]=s,t[5]=u,t[6]=l,t[7]=f,t[8]=m,t[9]=c,t[10]=h,t[11]=d,t[12]=n*p+s*v+m*_+e[12],t[13]=i*p+u*v+c*_+e[13],t[14]=o*p+l*v+h*_+e[14],t[15]=a*p+f*v+d*_+e[15]),t},scale:function(t,e,r){var n=r[0],i=r[1],o=r[2];return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*o,t[9]=e[9]*o,t[10]=e[10]*o,t[11]=e[11]*o,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t},rotate:function(e,r,n,i){var o,a,s,u,l,f,m,c,h,d,p,v,_,g,x,y,T,S,U,M,b,P,w,G,B=i[0],E=i[1],C=i[2],L=Math.hypot(B,E,C);return L<t?null:(B*=L=1/L,E*=L,C*=L,o=Math.sin(n),s=1-(a=Math.cos(n)),u=r[0],l=r[1],f=r[2],m=r[3],c=r[4],h=r[5],d=r[6],p=r[7],v=r[8],_=r[9],g=r[10],x=r[11],y=B*B*s+a,T=E*B*s+C*o,S=C*B*s-E*o,U=B*E*s-C*o,M=E*E*s+a,b=C*E*s+B*o,P=B*C*s+E*o,w=E*C*s-B*o,G=C*C*s+a,e[0]=u*y+c*T+v*S,e[1]=l*y+h*T+_*S,e[2]=f*y+d*T+g*S,e[3]=m*y+p*T+x*S,e[4]=u*U+c*M+v*b,e[5]=l*U+h*M+_*b,e[6]=f*U+d*M+g*b,e[7]=m*U+p*M+x*b,e[8]=u*P+c*w+v*G,e[9]=l*P+h*w+_*G,e[10]=f*P+d*w+g*G,e[11]=m*P+p*w+x*G,r!==e&&(e[12]=r[12],e[13]=r[13],e[14]=r[14],e[15]=r[15]),e)},rotateX:function(t,e,r){var n=Math.sin(r),i=Math.cos(r),o=e[4],a=e[5],s=e[6],u=e[7],l=e[8],f=e[9],m=e[10],c=e[11];return e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=o*i+l*n,t[5]=a*i+f*n,t[6]=s*i+m*n,t[7]=u*i+c*n,t[8]=l*i-o*n,t[9]=f*i-a*n,t[10]=m*i-s*n,t[11]=c*i-u*n,t},rotateY:function(t,e,r){var n=Math.sin(r),i=Math.cos(r),o=e[0],a=e[1],s=e[2],u=e[3],l=e[8],f=e[9],m=e[10],c=e[11];return e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=o*i-l*n,t[1]=a*i-f*n,t[2]=s*i-m*n,t[3]=u*i-c*n,t[8]=o*n+l*i,t[9]=a*n+f*i,t[10]=s*n+m*i,t[11]=u*n+c*i,t},rotateZ:function(t,e,r){var n=Math.sin(r),i=Math.cos(r),o=e[0],a=e[1],s=e[2],u=e[3],l=e[4],f=e[5],m=e[6],c=e[7];return e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=o*i+l*n,t[1]=a*i+f*n,t[2]=s*i+m*n,t[3]=u*i+c*n,t[4]=l*i-o*n,t[5]=f*i-a*n,t[6]=m*i-s*n,t[7]=c*i-u*n,t},fromTranslation:function(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t},fromScaling:function(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromRotation:function(e,r,n){var i,o,a,s=n[0],u=n[1],l=n[2],f=Math.hypot(s,u,l);return f<t?null:(s*=f=1/f,u*=f,l*=f,i=Math.sin(r),a=1-(o=Math.cos(r)),e[0]=s*s*a+o,e[1]=u*s*a+l*i,e[2]=l*s*a-u*i,e[3]=0,e[4]=s*u*a-l*i,e[5]=u*u*a+o,e[6]=l*u*a+s*i,e[7]=0,e[8]=s*l*a+u*i,e[9]=u*l*a-s*i,e[10]=l*l*a+o,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e)},fromXRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromYRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromZRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromRotationTranslation:U,fromQuat2:function(t,r){var n=new e(3),i=-r[0],o=-r[1],a=-r[2],s=r[3],u=r[4],l=r[5],f=r[6],m=r[7],c=i*i+o*o+a*a+s*s;return c>0?(n[0]=2*(u*s+m*i+l*a-f*o)/c,n[1]=2*(l*s+m*o+f*i-u*a)/c,n[2]=2*(f*s+m*a+u*o-l*i)/c):(n[0]=2*(u*s+m*i+l*a-f*o),n[1]=2*(l*s+m*o+f*i-u*a),n[2]=2*(f*s+m*a+u*o-l*i)),U(t,r,n),t},getTranslation:M,getScaling:b,getRotation:P,fromRotationTranslationScale:function(t,e,r,n){var i=e[0],o=e[1],a=e[2],s=e[3],u=i+i,l=o+o,f=a+a,m=i*u,c=i*l,h=i*f,d=o*l,p=o*f,v=a*f,_=s*u,g=s*l,x=s*f,y=n[0],T=n[1],S=n[2];return t[0]=(1-(d+v))*y,t[1]=(c+x)*y,t[2]=(h-g)*y,t[3]=0,t[4]=(c-x)*T,t[5]=(1-(m+v))*T,t[6]=(p+_)*T,t[7]=0,t[8]=(h+g)*S,t[9]=(p-_)*S,t[10]=(1-(m+d))*S,t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t},fromRotationTranslationScaleOrigin:function(t,e,r,n,i){var o=e[0],a=e[1],s=e[2],u=e[3],l=o+o,f=a+a,m=s+s,c=o*l,h=o*f,d=o*m,p=a*f,v=a*m,_=s*m,g=u*l,x=u*f,y=u*m,T=n[0],S=n[1],U=n[2],M=i[0],b=i[1],P=i[2],w=(1-(p+_))*T,G=(h+y)*T,B=(d-x)*T,E=(h-y)*S,C=(1-(c+_))*S,L=(v+g)*S,R=(d+x)*U,D=(v-g)*U,I=(1-(c+p))*U;return t[0]=w,t[1]=G,t[2]=B,t[3]=0,t[4]=E,t[5]=C,t[6]=L,t[7]=0,t[8]=R,t[9]=D,t[10]=I,t[11]=0,t[12]=r[0]+M-(w*M+E*b+R*P),t[13]=r[1]+b-(G*M+C*b+D*P),t[14]=r[2]+P-(B*M+L*b+I*P),t[15]=1,t},fromQuat:function(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=r+r,s=n+n,u=i+i,l=r*a,f=n*a,m=n*s,c=i*a,h=i*s,d=i*u,p=o*a,v=o*s,_=o*u;return t[0]=1-m-d,t[1]=f+_,t[2]=c-v,t[3]=0,t[4]=f-_,t[5]=1-l-d,t[6]=h+p,t[7]=0,t[8]=c+v,t[9]=h-p,t[10]=1-l-m,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},frustum:function(t,e,r,n,i,o,a){var s=1/(r-e),u=1/(i-n),l=1/(o-a);return t[0]=2*o*s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*o*u,t[6]=0,t[7]=0,t[8]=(r+e)*s,t[9]=(i+n)*u,t[10]=(a+o)*l,t[11]=-1,t[12]=0,t[13]=0,t[14]=a*o*2*l,t[15]=0,t},perspective:function(t,e,r,n,i){var o,a=1/Math.tan(e/2);return t[0]=a/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=a,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=i&&i!==1/0?(o=1/(n-i),t[10]=(i+n)*o,t[14]=2*i*n*o):(t[10]=-1,t[14]=-2*n),t},perspectiveFromFieldOfView:function(t,e,r,n){var i=Math.tan(e.upDegrees*Math.PI/180),o=Math.tan(e.downDegrees*Math.PI/180),a=Math.tan(e.leftDegrees*Math.PI/180),s=Math.tan(e.rightDegrees*Math.PI/180),u=2/(a+s),l=2/(i+o);return t[0]=u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=l,t[6]=0,t[7]=0,t[8]=-(a-s)*u*.5,t[9]=(i-o)*l*.5,t[10]=n/(r-n),t[11]=-1,t[12]=0,t[13]=0,t[14]=n*r/(r-n),t[15]=0,t},ortho:function(t,e,r,n,i,o,a){var s=1/(e-r),u=1/(n-i),l=1/(o-a);return t[0]=-2*s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*u,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*l,t[11]=0,t[12]=(e+r)*s,t[13]=(i+n)*u,t[14]=(a+o)*l,t[15]=1,t},lookAt:function(e,r,n,i){var o,a,s,u,l,f,m,c,h,d,p=r[0],v=r[1],_=r[2],g=i[0],x=i[1],y=i[2],S=n[0],U=n[1],M=n[2];return Math.abs(p-S)<t&&Math.abs(v-U)<t&&Math.abs(_-M)<t?T(e):(m=p-S,c=v-U,h=_-M,o=x*(h*=d=1/Math.hypot(m,c,h))-y*(c*=d),a=y*(m*=d)-g*h,s=g*c-x*m,(d=Math.hypot(o,a,s))?(o*=d=1/d,a*=d,s*=d):(o=0,a=0,s=0),u=c*s-h*a,l=h*o-m*s,f=m*a-c*o,(d=Math.hypot(u,l,f))?(u*=d=1/d,l*=d,f*=d):(u=0,l=0,f=0),e[0]=o,e[1]=u,e[2]=m,e[3]=0,e[4]=a,e[5]=l,e[6]=c,e[7]=0,e[8]=s,e[9]=f,e[10]=h,e[11]=0,e[12]=-(o*p+a*v+s*_),e[13]=-(u*p+l*v+f*_),e[14]=-(m*p+c*v+h*_),e[15]=1,e)},targetTo:function(t,e,r,n){var i=e[0],o=e[1],a=e[2],s=n[0],u=n[1],l=n[2],f=i-r[0],m=o-r[1],c=a-r[2],h=f*f+m*m+c*c;h>0&&(f*=h=1/Math.sqrt(h),m*=h,c*=h);var d=u*c-l*m,p=l*f-s*c,v=s*m-u*f;return(h=d*d+p*p+v*v)>0&&(d*=h=1/Math.sqrt(h),p*=h,v*=h),t[0]=d,t[1]=p,t[2]=v,t[3]=0,t[4]=m*v-c*p,t[5]=c*d-f*v,t[6]=f*p-m*d,t[7]=0,t[8]=f,t[9]=m,t[10]=c,t[11]=0,t[12]=i,t[13]=o,t[14]=a,t[15]=1,t},str:function(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"},frob:function(t){return Math.hypot(t[0],t[1],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t[6]=e[6]+r[6],t[7]=e[7]+r[7],t[8]=e[8]+r[8],t[9]=e[9]+r[9],t[10]=e[10]+r[10],t[11]=e[11]+r[11],t[12]=e[12]+r[12],t[13]=e[13]+r[13],t[14]=e[14]+r[14],t[15]=e[15]+r[15],t},subtract:w,multiplyScalar:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*r,t[9]=e[9]*r,t[10]=e[10]*r,t[11]=e[11]*r,t[12]=e[12]*r,t[13]=e[13]*r,t[14]=e[14]*r,t[15]=e[15]*r,t},multiplyScalarAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t[4]=e[4]+r[4]*n,t[5]=e[5]+r[5]*n,t[6]=e[6]+r[6]*n,t[7]=e[7]+r[7]*n,t[8]=e[8]+r[8]*n,t[9]=e[9]+r[9]*n,t[10]=e[10]+r[10]*n,t[11]=e[11]+r[11]*n,t[12]=e[12]+r[12]*n,t[13]=e[13]+r[13]*n,t[14]=e[14]+r[14]*n,t[15]=e[15]+r[15]*n,t},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]},equals:function(e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=e[8],c=e[9],h=e[10],d=e[11],p=e[12],v=e[13],_=e[14],g=e[15],x=r[0],y=r[1],T=r[2],S=r[3],U=r[4],M=r[5],b=r[6],P=r[7],w=r[8],G=r[9],B=r[10],E=r[11],C=r[12],L=r[13],R=r[14],D=r[15];return Math.abs(n-x)<=t*Math.max(1,Math.abs(n),Math.abs(x))&&Math.abs(i-y)<=t*Math.max(1,Math.abs(i),Math.abs(y))&&Math.abs(o-T)<=t*Math.max(1,Math.abs(o),Math.abs(T))&&Math.abs(a-S)<=t*Math.max(1,Math.abs(a),Math.abs(S))&&Math.abs(s-U)<=t*Math.max(1,Math.abs(s),Math.abs(U))&&Math.abs(u-M)<=t*Math.max(1,Math.abs(u),Math.abs(M))&&Math.abs(l-b)<=t*Math.max(1,Math.abs(l),Math.abs(b))&&Math.abs(f-P)<=t*Math.max(1,Math.abs(f),Math.abs(P))&&Math.abs(m-w)<=t*Math.max(1,Math.abs(m),Math.abs(w))&&Math.abs(c-G)<=t*Math.max(1,Math.abs(c),Math.abs(G))&&Math.abs(h-B)<=t*Math.max(1,Math.abs(h),Math.abs(B))&&Math.abs(d-E)<=t*Math.max(1,Math.abs(d),Math.abs(E))&&Math.abs(p-C)<=t*Math.max(1,Math.abs(p),Math.abs(C))&&Math.abs(v-L)<=t*Math.max(1,Math.abs(v),Math.abs(L))&&Math.abs(_-R)<=t*Math.max(1,Math.abs(_),Math.abs(R))&&Math.abs(g-D)<=t*Math.max(1,Math.abs(g),Math.abs(D))},mul:G,sub:B});function C(){var t=new e(3);return e!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function L(t){var e=t[0],r=t[1],n=t[2];return Math.hypot(e,r,n)}function R(t,r,n){var i=new e(3);return i[0]=t,i[1]=r,i[2]=n,i}function D(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t}function I(t,e,r){return t[0]=e[0]*r[0],t[1]=e[1]*r[1],t[2]=e[2]*r[2],t}function N(t,e,r){return t[0]=e[0]/r[0],t[1]=e[1]/r[1],t[2]=e[2]/r[2],t}function F(t,e){var r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2];return Math.hypot(r,n,i)}function A(t,e){var r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2];return r*r+n*n+i*i}function V(t){var e=t[0],r=t[1],n=t[2];return e*e+r*r+n*n}function O(t,e){var r=e[0],n=e[1],i=e[2],o=r*r+n*n+i*i;return o>0&&(o=1/Math.sqrt(o)),t[0]=e[0]*o,t[1]=e[1]*o,t[2]=e[2]*o,t}function Y(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function X(t,e,r){var n=e[0],i=e[1],o=e[2],a=r[0],s=r[1],u=r[2];return t[0]=i*u-o*s,t[1]=o*a-n*u,t[2]=n*s-i*a,t}var z,$=D,k=I,W=N,Z=F,Q=A,H=L,q=V,j=(z=C(),function(t,e,r,n,i,o){var a,s;for(e||(e=3),r||(r=0),s=n?Math.min(n*e+r,t.length):t.length,a=r;a<s;a+=e)z[0]=t[a],z[1]=t[a+1],z[2]=t[a+2],i(z,z,o),t[a]=z[0],t[a+1]=z[1],t[a+2]=z[2];return t}),J=Object.freeze({create:C,clone:function(t){var r=new e(3);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r},length:L,fromValues:R,copy:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t},set:function(t,e,r,n){return t[0]=e,t[1]=r,t[2]=n,t},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t},subtract:D,multiply:I,divide:N,ceil:function(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t},floor:function(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t},min:function(t,e,r){return t[0]=Math.min(e[0],r[0]),t[1]=Math.min(e[1],r[1]),t[2]=Math.min(e[2],r[2]),t},max:function(t,e,r){return t[0]=Math.max(e[0],r[0]),t[1]=Math.max(e[1],r[1]),t[2]=Math.max(e[2],r[2]),t},round:function(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t},scale:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t},scaleAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t},distance:F,squaredDistance:A,squaredLength:V,negate:function(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t},inverse:function(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t},normalize:O,dot:Y,cross:X,lerp:function(t,e,r,n){var i=e[0],o=e[1],a=e[2];return t[0]=i+n*(r[0]-i),t[1]=o+n*(r[1]-o),t[2]=a+n*(r[2]-a),t},hermite:function(t,e,r,n,i,o){var a=o*o,s=a*(2*o-3)+1,u=a*(o-2)+o,l=a*(o-1),f=a*(3-2*o);return t[0]=e[0]*s+r[0]*u+n[0]*l+i[0]*f,t[1]=e[1]*s+r[1]*u+n[1]*l+i[1]*f,t[2]=e[2]*s+r[2]*u+n[2]*l+i[2]*f,t},bezier:function(t,e,r,n,i,o){var a=1-o,s=a*a,u=o*o,l=s*a,f=3*o*s,m=3*u*a,c=u*o;return t[0]=e[0]*l+r[0]*f+n[0]*m+i[0]*c,t[1]=e[1]*l+r[1]*f+n[1]*m+i[1]*c,t[2]=e[2]*l+r[2]*f+n[2]*m+i[2]*c,t},random:function(t,e){e=e||1;var n=2*r()*Math.PI,i=2*r()-1,o=Math.sqrt(1-i*i)*e;return t[0]=Math.cos(n)*o,t[1]=Math.sin(n)*o,t[2]=i*e,t},transformMat4:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=r[3]*n+r[7]*i+r[11]*o+r[15];return a=a||1,t[0]=(r[0]*n+r[4]*i+r[8]*o+r[12])/a,t[1]=(r[1]*n+r[5]*i+r[9]*o+r[13])/a,t[2]=(r[2]*n+r[6]*i+r[10]*o+r[14])/a,t},transformMat3:function(t,e,r){var n=e[0],i=e[1],o=e[2];return t[0]=n*r[0]+i*r[3]+o*r[6],t[1]=n*r[1]+i*r[4]+o*r[7],t[2]=n*r[2]+i*r[5]+o*r[8],t},transformQuat:function(t,e,r){var n=r[0],i=r[1],o=r[2],a=r[3],s=e[0],u=e[1],l=e[2],f=i*l-o*u,m=o*s-n*l,c=n*u-i*s,h=i*c-o*m,d=o*f-n*c,p=n*m-i*f,v=2*a;return f*=v,m*=v,c*=v,h*=2,d*=2,p*=2,t[0]=s+f+h,t[1]=u+m+d,t[2]=l+c+p,t},rotateX:function(t,e,r,n){var i=[],o=[];return i[0]=e[0]-r[0],i[1]=e[1]-r[1],i[2]=e[2]-r[2],o[0]=i[0],o[1]=i[1]*Math.cos(n)-i[2]*Math.sin(n),o[2]=i[1]*Math.sin(n)+i[2]*Math.cos(n),t[0]=o[0]+r[0],t[1]=o[1]+r[1],t[2]=o[2]+r[2],t},rotateY:function(t,e,r,n){var i=[],o=[];return i[0]=e[0]-r[0],i[1]=e[1]-r[1],i[2]=e[2]-r[2],o[0]=i[2]*Math.sin(n)+i[0]*Math.cos(n),o[1]=i[1],o[2]=i[2]*Math.cos(n)-i[0]*Math.sin(n),t[0]=o[0]+r[0],t[1]=o[1]+r[1],t[2]=o[2]+r[2],t},rotateZ:function(t,e,r,n){var i=[],o=[];return i[0]=e[0]-r[0],i[1]=e[1]-r[1],i[2]=e[2]-r[2],o[0]=i[0]*Math.cos(n)-i[1]*Math.sin(n),o[1]=i[0]*Math.sin(n)+i[1]*Math.cos(n),o[2]=i[2],t[0]=o[0]+r[0],t[1]=o[1]+r[1],t[2]=o[2]+r[2],t},angle:function(t,e){var r=R(t[0],t[1],t[2]),n=R(e[0],e[1],e[2]);O(r,r),O(n,n);var i=Y(r,n);return i>1?0:i<-1?Math.PI:Math.acos(i)},zero:function(t){return t[0]=0,t[1]=0,t[2]=0,t},str:function(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]},equals:function(e,r){var n=e[0],i=e[1],o=e[2],a=r[0],s=r[1],u=r[2];return Math.abs(n-a)<=t*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(i-s)<=t*Math.max(1,Math.abs(i),Math.abs(s))&&Math.abs(o-u)<=t*Math.max(1,Math.abs(o),Math.abs(u))},sub:$,mul:k,div:W,dist:Z,sqrDist:Q,len:H,sqrLen:q,forEach:j});function K(){var t=new e(4);return e!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}function tt(t){var r=new e(4);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r}function et(t,r,n,i){var o=new e(4);return o[0]=t,o[1]=r,o[2]=n,o[3]=i,o}function rt(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function nt(t,e,r,n,i){return t[0]=e,t[1]=r,t[2]=n,t[3]=i,t}function it(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t}function ot(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t}function at(t,e,r){return t[0]=e[0]*r[0],t[1]=e[1]*r[1],t[2]=e[2]*r[2],t[3]=e[3]*r[3],t}function st(t,e,r){return t[0]=e[0]/r[0],t[1]=e[1]/r[1],t[2]=e[2]/r[2],t[3]=e[3]/r[3],t}function ut(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t}function lt(t,e){var r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2],o=e[3]-t[3];return Math.hypot(r,n,i,o)}function ft(t,e){var r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2],o=e[3]-t[3];return r*r+n*n+i*i+o*o}function mt(t){var e=t[0],r=t[1],n=t[2],i=t[3];return Math.hypot(e,r,n,i)}function ct(t){var e=t[0],r=t[1],n=t[2],i=t[3];return e*e+r*r+n*n+i*i}function ht(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=r*r+n*n+i*i+o*o;return a>0&&(a=1/Math.sqrt(a)),t[0]=r*a,t[1]=n*a,t[2]=i*a,t[3]=o*a,t}function dt(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function pt(t,e,r,n){var i=e[0],o=e[1],a=e[2],s=e[3];return t[0]=i+n*(r[0]-i),t[1]=o+n*(r[1]-o),t[2]=a+n*(r[2]-a),t[3]=s+n*(r[3]-s),t}function vt(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]}function _t(e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=r[0],u=r[1],l=r[2],f=r[3];return Math.abs(n-s)<=t*Math.max(1,Math.abs(n),Math.abs(s))&&Math.abs(i-u)<=t*Math.max(1,Math.abs(i),Math.abs(u))&&Math.abs(o-l)<=t*Math.max(1,Math.abs(o),Math.abs(l))&&Math.abs(a-f)<=t*Math.max(1,Math.abs(a),Math.abs(f))}var gt=ot,xt=at,yt=st,Tt=lt,St=ft,Ut=mt,Mt=ct,bt=function(){var t=K();return function(e,r,n,i,o,a){var s,u;for(r||(r=4),n||(n=0),u=i?Math.min(i*r+n,e.length):e.length,s=n;s<u;s+=r)t[0]=e[s],t[1]=e[s+1],t[2]=e[s+2],t[3]=e[s+3],o(t,t,a),e[s]=t[0],e[s+1]=t[1],e[s+2]=t[2],e[s+3]=t[3];return e}}(),Pt=Object.freeze({create:K,clone:tt,fromValues:et,copy:rt,set:nt,add:it,subtract:ot,multiply:at,divide:st,ceil:function(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t[3]=Math.ceil(e[3]),t},floor:function(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t[3]=Math.floor(e[3]),t},min:function(t,e,r){return t[0]=Math.min(e[0],r[0]),t[1]=Math.min(e[1],r[1]),t[2]=Math.min(e[2],r[2]),t[3]=Math.min(e[3],r[3]),t},max:function(t,e,r){return t[0]=Math.max(e[0],r[0]),t[1]=Math.max(e[1],r[1]),t[2]=Math.max(e[2],r[2]),t[3]=Math.max(e[3],r[3]),t},round:function(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t[3]=Math.round(e[3]),t},scale:ut,scaleAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t},distance:lt,squaredDistance:ft,length:mt,squaredLength:ct,negate:function(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t},inverse:function(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t[3]=1/e[3],t},normalize:ht,dot:dt,cross:function(t,e,r,n){var i=r[0]*n[1]-r[1]*n[0],o=r[0]*n[2]-r[2]*n[0],a=r[0]*n[3]-r[3]*n[0],s=r[1]*n[2]-r[2]*n[1],u=r[1]*n[3]-r[3]*n[1],l=r[2]*n[3]-r[3]*n[2],f=e[0],m=e[1],c=e[2],h=e[3];return t[0]=m*l-c*u+h*s,t[1]=-f*l+c*a-h*o,t[2]=f*u-m*a+h*i,t[3]=-f*s+m*o-c*i,t},lerp:pt,random:function(t,e){var n,i,o,a,s,u;e=e||1;do{s=(n=2*r()-1)*n+(i=2*r()-1)*i}while(s>=1);do{u=(o=2*r()-1)*o+(a=2*r()-1)*a}while(u>=1);var l=Math.sqrt((1-s)/u);return t[0]=e*n,t[1]=e*i,t[2]=e*o*l,t[3]=e*a*l,t},transformMat4:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3];return t[0]=r[0]*n+r[4]*i+r[8]*o+r[12]*a,t[1]=r[1]*n+r[5]*i+r[9]*o+r[13]*a,t[2]=r[2]*n+r[6]*i+r[10]*o+r[14]*a,t[3]=r[3]*n+r[7]*i+r[11]*o+r[15]*a,t},transformQuat:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=r[0],s=r[1],u=r[2],l=r[3],f=l*n+s*o-u*i,m=l*i+u*n-a*o,c=l*o+a*i-s*n,h=-a*n-s*i-u*o;return t[0]=f*l+h*-a+m*-u-c*-s,t[1]=m*l+h*-s+c*-a-f*-u,t[2]=c*l+h*-u+f*-s-m*-a,t[3]=e[3],t},zero:function(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=0,t},str:function(t){return"vec4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"},exactEquals:vt,equals:_t,sub:gt,mul:xt,div:yt,dist:Tt,sqrDist:St,len:Ut,sqrLen:Mt,forEach:bt});function wt(){var t=new e(4);return e!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function Gt(t,e,r){r*=.5;var n=Math.sin(r);return t[0]=n*e[0],t[1]=n*e[1],t[2]=n*e[2],t[3]=Math.cos(r),t}function Bt(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=r[0],u=r[1],l=r[2],f=r[3];return t[0]=n*f+a*s+i*l-o*u,t[1]=i*f+a*u+o*s-n*l,t[2]=o*f+a*l+n*u-i*s,t[3]=a*f-n*s-i*u-o*l,t}function Et(t,e,r){r*=.5;var n=e[0],i=e[1],o=e[2],a=e[3],s=Math.sin(r),u=Math.cos(r);return t[0]=n*u+a*s,t[1]=i*u+o*s,t[2]=o*u-i*s,t[3]=a*u-n*s,t}function Ct(t,e,r){r*=.5;var n=e[0],i=e[1],o=e[2],a=e[3],s=Math.sin(r),u=Math.cos(r);return t[0]=n*u-o*s,t[1]=i*u+a*s,t[2]=o*u+n*s,t[3]=a*u-i*s,t}function Lt(t,e,r){r*=.5;var n=e[0],i=e[1],o=e[2],a=e[3],s=Math.sin(r),u=Math.cos(r);return t[0]=n*u+i*s,t[1]=i*u-n*s,t[2]=o*u+a*s,t[3]=a*u-o*s,t}function Rt(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=Math.sqrt(r*r+n*n+i*i),s=Math.exp(o),u=a>0?s*Math.sin(a)/a:0;return t[0]=r*u,t[1]=n*u,t[2]=i*u,t[3]=s*Math.cos(a),t}function Dt(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=Math.sqrt(r*r+n*n+i*i),s=a>0?Math.atan2(a,o)/a:0;return t[0]=r*s,t[1]=n*s,t[2]=i*s,t[3]=.5*Math.log(r*r+n*n+i*i+o*o),t}function It(e,r,n,i){var o,a,s,u,l,f=r[0],m=r[1],c=r[2],h=r[3],d=n[0],p=n[1],v=n[2],_=n[3];return(a=f*d+m*p+c*v+h*_)<0&&(a=-a,d=-d,p=-p,v=-v,_=-_),1-a>t?(o=Math.acos(a),s=Math.sin(o),u=Math.sin((1-i)*o)/s,l=Math.sin(i*o)/s):(u=1-i,l=i),e[0]=u*f+l*d,e[1]=u*m+l*p,e[2]=u*c+l*v,e[3]=u*h+l*_,e}function Nt(t,e){var r,n=e[0]+e[4]+e[8];if(n>0)r=Math.sqrt(n+1),t[3]=.5*r,r=.5/r,t[0]=(e[5]-e[7])*r,t[1]=(e[6]-e[2])*r,t[2]=(e[1]-e[3])*r;else{var i=0;e[4]>e[0]&&(i=1),e[8]>e[3*i+i]&&(i=2);var o=(i+1)%3,a=(i+2)%3;r=Math.sqrt(e[3*i+i]-e[3*o+o]-e[3*a+a]+1),t[i]=.5*r,r=.5/r,t[3]=(e[3*o+a]-e[3*a+o])*r,t[o]=(e[3*o+i]+e[3*i+o])*r,t[a]=(e[3*a+i]+e[3*i+a])*r}return t}var Ft,At,Vt,Ot,Yt,Xt,zt=tt,$t=et,kt=rt,Wt=nt,Zt=it,Qt=Bt,Ht=ut,qt=dt,jt=pt,Jt=mt,Kt=Jt,te=ct,ee=te,re=ht,ne=vt,ie=_t,oe=(Ft=C(),At=R(1,0,0),Vt=R(0,1,0),function(t,e,r){var n=Y(e,r);return n<-.999999?(X(Ft,At,e),H(Ft)<1e-6&&X(Ft,Vt,e),O(Ft,Ft),Gt(t,Ft,Math.PI),t):n>.999999?(t[0]=0,t[1]=0,t[2]=0,t[3]=1,t):(X(Ft,e,r),t[0]=Ft[0],t[1]=Ft[1],t[2]=Ft[2],t[3]=1+n,re(t,t))}),ae=(Ot=wt(),Yt=wt(),function(t,e,r,n,i,o){return It(Ot,e,i,o),It(Yt,r,n,o),It(t,Ot,Yt,2*o*(1-o)),t}),se=(Xt=p(),function(t,e,r,n){return Xt[0]=r[0],Xt[3]=r[1],Xt[6]=r[2],Xt[1]=n[0],Xt[4]=n[1],Xt[7]=n[2],Xt[2]=-e[0],Xt[5]=-e[1],Xt[8]=-e[2],re(t,Nt(t,Xt))}),ue=Object.freeze({create:wt,identity:function(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t},setAxisAngle:Gt,getAxisAngle:function(e,r){var n=2*Math.acos(r[3]),i=Math.sin(n/2);return i>t?(e[0]=r[0]/i,e[1]=r[1]/i,e[2]=r[2]/i):(e[0]=1,e[1]=0,e[2]=0),n},getAngle:function(t,e){var r=qt(t,e);return Math.acos(2*r*r-1)},multiply:Bt,rotateX:Et,rotateY:Ct,rotateZ:Lt,calculateW:function(t,e){var r=e[0],n=e[1],i=e[2];return t[0]=r,t[1]=n,t[2]=i,t[3]=Math.sqrt(Math.abs(1-r*r-n*n-i*i)),t},exp:Rt,ln:Dt,pow:function(t,e,r){return Dt(t,e),Ht(t,t,r),Rt(t,t),t},slerp:It,random:function(t){var e=r(),n=r(),i=r(),o=Math.sqrt(1-e),a=Math.sqrt(e);return t[0]=o*Math.sin(2*Math.PI*n),t[1]=o*Math.cos(2*Math.PI*n),t[2]=a*Math.sin(2*Math.PI*i),t[3]=a*Math.cos(2*Math.PI*i),t},invert:function(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=r*r+n*n+i*i+o*o,s=a?1/a:0;return t[0]=-r*s,t[1]=-n*s,t[2]=-i*s,t[3]=o*s,t},conjugate:function(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t},fromMat3:Nt,fromEuler:function(t,e,r,n){var i=.5*Math.PI/180;e*=i,r*=i,n*=i;var o=Math.sin(e),a=Math.cos(e),s=Math.sin(r),u=Math.cos(r),l=Math.sin(n),f=Math.cos(n);return t[0]=o*u*f-a*s*l,t[1]=a*s*f+o*u*l,t[2]=a*u*l-o*s*f,t[3]=a*u*f+o*s*l,t},str:function(t){return"quat("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"},clone:zt,fromValues:$t,copy:kt,set:Wt,add:Zt,mul:Qt,scale:Ht,dot:qt,lerp:jt,length:Jt,len:Kt,squaredLength:te,sqrLen:ee,normalize:re,exactEquals:ne,equals:ie,rotationTo:oe,sqlerp:ae,setAxes:se});function le(t,e,r){var n=.5*r[0],i=.5*r[1],o=.5*r[2],a=e[0],s=e[1],u=e[2],l=e[3];return t[0]=a,t[1]=s,t[2]=u,t[3]=l,t[4]=n*l+i*u-o*s,t[5]=i*l+o*a-n*u,t[6]=o*l+n*s-i*a,t[7]=-n*a-i*s-o*u,t}function fe(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t}var me=kt,ce=kt;function he(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=r[4],u=r[5],l=r[6],f=r[7],m=e[4],c=e[5],h=e[6],d=e[7],p=r[0],v=r[1],_=r[2],g=r[3];return t[0]=n*g+a*p+i*_-o*v,t[1]=i*g+a*v+o*p-n*_,t[2]=o*g+a*_+n*v-i*p,t[3]=a*g-n*p-i*v-o*_,t[4]=n*f+a*s+i*l-o*u+m*g+d*p+c*_-h*v,t[5]=i*f+a*u+o*s-n*l+c*g+d*v+h*p-m*_,t[6]=o*f+a*l+n*u-i*s+h*g+d*_+m*v-c*p,t[7]=a*f-n*s-i*u-o*l+d*g-m*p-c*v-h*_,t}var de=he,pe=qt,ve=Jt,_e=ve,ge=te,xe=ge,ye=Object.freeze({create:function(){var t=new e(8);return e!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0),t[3]=1,t},clone:function(t){var r=new e(8);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[4]=t[4],r[5]=t[5],r[6]=t[6],r[7]=t[7],r},fromValues:function(t,r,n,i,o,a,s,u){var l=new e(8);return l[0]=t,l[1]=r,l[2]=n,l[3]=i,l[4]=o,l[5]=a,l[6]=s,l[7]=u,l},fromRotationTranslationValues:function(t,r,n,i,o,a,s){var u=new e(8);u[0]=t,u[1]=r,u[2]=n,u[3]=i;var l=.5*o,f=.5*a,m=.5*s;return u[4]=l*i+f*n-m*r,u[5]=f*i+m*t-l*n,u[6]=m*i+l*r-f*t,u[7]=-l*t-f*r-m*n,u},fromRotationTranslation:le,fromTranslation:function(t,e){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=.5*e[0],t[5]=.5*e[1],t[6]=.5*e[2],t[7]=0,t},fromRotation:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=0,t[5]=0,t[6]=0,t[7]=0,t},fromMat4:function(t,r){var n=wt();P(n,r);var i=new e(3);return M(i,r),le(t,n,i),t},copy:fe,identity:function(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t},set:function(t,e,r,n,i,o,a,s,u){return t[0]=e,t[1]=r,t[2]=n,t[3]=i,t[4]=o,t[5]=a,t[6]=s,t[7]=u,t},getReal:me,getDual:function(t,e){return t[0]=e[4],t[1]=e[5],t[2]=e[6],t[3]=e[7],t},setReal:ce,setDual:function(t,e){return t[4]=e[0],t[5]=e[1],t[6]=e[2],t[7]=e[3],t},getTranslation:function(t,e){var r=e[4],n=e[5],i=e[6],o=e[7],a=-e[0],s=-e[1],u=-e[2],l=e[3];return t[0]=2*(r*l+o*a+n*u-i*s),t[1]=2*(n*l+o*s+i*a-r*u),t[2]=2*(i*l+o*u+r*s-n*a),t},translate:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=.5*r[0],u=.5*r[1],l=.5*r[2],f=e[4],m=e[5],c=e[6],h=e[7];return t[0]=n,t[1]=i,t[2]=o,t[3]=a,t[4]=a*s+i*l-o*u+f,t[5]=a*u+o*s-n*l+m,t[6]=a*l+n*u-i*s+c,t[7]=-n*s-i*u-o*l+h,t},rotateX:function(t,e,r){var n=-e[0],i=-e[1],o=-e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=s*a+f*n+u*o-l*i,c=u*a+f*i+l*n-s*o,h=l*a+f*o+s*i-u*n,d=f*a-s*n-u*i-l*o;return Et(t,e,r),n=t[0],i=t[1],o=t[2],a=t[3],t[4]=m*a+d*n+c*o-h*i,t[5]=c*a+d*i+h*n-m*o,t[6]=h*a+d*o+m*i-c*n,t[7]=d*a-m*n-c*i-h*o,t},rotateY:function(t,e,r){var n=-e[0],i=-e[1],o=-e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=s*a+f*n+u*o-l*i,c=u*a+f*i+l*n-s*o,h=l*a+f*o+s*i-u*n,d=f*a-s*n-u*i-l*o;return Ct(t,e,r),n=t[0],i=t[1],o=t[2],a=t[3],t[4]=m*a+d*n+c*o-h*i,t[5]=c*a+d*i+h*n-m*o,t[6]=h*a+d*o+m*i-c*n,t[7]=d*a-m*n-c*i-h*o,t},rotateZ:function(t,e,r){var n=-e[0],i=-e[1],o=-e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=s*a+f*n+u*o-l*i,c=u*a+f*i+l*n-s*o,h=l*a+f*o+s*i-u*n,d=f*a-s*n-u*i-l*o;return Lt(t,e,r),n=t[0],i=t[1],o=t[2],a=t[3],t[4]=m*a+d*n+c*o-h*i,t[5]=c*a+d*i+h*n-m*o,t[6]=h*a+d*o+m*i-c*n,t[7]=d*a-m*n-c*i-h*o,t},rotateByQuatAppend:function(t,e,r){var n=r[0],i=r[1],o=r[2],a=r[3],s=e[0],u=e[1],l=e[2],f=e[3];return t[0]=s*a+f*n+u*o-l*i,t[1]=u*a+f*i+l*n-s*o,t[2]=l*a+f*o+s*i-u*n,t[3]=f*a-s*n-u*i-l*o,s=e[4],u=e[5],l=e[6],f=e[7],t[4]=s*a+f*n+u*o-l*i,t[5]=u*a+f*i+l*n-s*o,t[6]=l*a+f*o+s*i-u*n,t[7]=f*a-s*n-u*i-l*o,t},rotateByQuatPrepend:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=r[0],u=r[1],l=r[2],f=r[3];return t[0]=n*f+a*s+i*l-o*u,t[1]=i*f+a*u+o*s-n*l,t[2]=o*f+a*l+n*u-i*s,t[3]=a*f-n*s-i*u-o*l,s=r[4],u=r[5],l=r[6],f=r[7],t[4]=n*f+a*s+i*l-o*u,t[5]=i*f+a*u+o*s-n*l,t[6]=o*f+a*l+n*u-i*s,t[7]=a*f-n*s-i*u-o*l,t},rotateAroundAxis:function(e,r,n,i){if(Math.abs(i)<t)return fe(e,r);var o=Math.hypot(n[0],n[1],n[2]);i*=.5;var a=Math.sin(i),s=a*n[0]/o,u=a*n[1]/o,l=a*n[2]/o,f=Math.cos(i),m=r[0],c=r[1],h=r[2],d=r[3];e[0]=m*f+d*s+c*l-h*u,e[1]=c*f+d*u+h*s-m*l,e[2]=h*f+d*l+m*u-c*s,e[3]=d*f-m*s-c*u-h*l;var p=r[4],v=r[5],_=r[6],g=r[7];return e[4]=p*f+g*s+v*l-_*u,e[5]=v*f+g*u+_*s-p*l,e[6]=_*f+g*l+p*u-v*s,e[7]=g*f-p*s-v*u-_*l,e},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t[6]=e[6]+r[6],t[7]=e[7]+r[7],t},multiply:he,mul:de,scale:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t},dot:pe,lerp:function(t,e,r,n){var i=1-n;return pe(e,r)<0&&(n=-n),t[0]=e[0]*i+r[0]*n,t[1]=e[1]*i+r[1]*n,t[2]=e[2]*i+r[2]*n,t[3]=e[3]*i+r[3]*n,t[4]=e[4]*i+r[4]*n,t[5]=e[5]*i+r[5]*n,t[6]=e[6]*i+r[6]*n,t[7]=e[7]*i+r[7]*n,t},invert:function(t,e){var r=ge(e);return t[0]=-e[0]/r,t[1]=-e[1]/r,t[2]=-e[2]/r,t[3]=e[3]/r,t[4]=-e[4]/r,t[5]=-e[5]/r,t[6]=-e[6]/r,t[7]=e[7]/r,t},conjugate:function(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t[4]=-e[4],t[5]=-e[5],t[6]=-e[6],t[7]=e[7],t},length:ve,len:_e,squaredLength:ge,sqrLen:xe,normalize:function(t,e){var r=ge(e);if(r>0){r=Math.sqrt(r);var n=e[0]/r,i=e[1]/r,o=e[2]/r,a=e[3]/r,s=e[4],u=e[5],l=e[6],f=e[7],m=n*s+i*u+o*l+a*f;t[0]=n,t[1]=i,t[2]=o,t[3]=a,t[4]=(s-n*m)/r,t[5]=(u-i*m)/r,t[6]=(l-o*m)/r,t[7]=(f-a*m)/r}return t},str:function(t){return"quat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+")"},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]},equals:function(e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=r[0],c=r[1],h=r[2],d=r[3],p=r[4],v=r[5],_=r[6],g=r[7];return Math.abs(n-m)<=t*Math.max(1,Math.abs(n),Math.abs(m))&&Math.abs(i-c)<=t*Math.max(1,Math.abs(i),Math.abs(c))&&Math.abs(o-h)<=t*Math.max(1,Math.abs(o),Math.abs(h))&&Math.abs(a-d)<=t*Math.max(1,Math.abs(a),Math.abs(d))&&Math.abs(s-p)<=t*Math.max(1,Math.abs(s),Math.abs(p))&&Math.abs(u-v)<=t*Math.max(1,Math.abs(u),Math.abs(v))&&Math.abs(l-_)<=t*Math.max(1,Math.abs(l),Math.abs(_))&&Math.abs(f-g)<=t*Math.max(1,Math.abs(f),Math.abs(g))}});function Te(){var t=new e(2);return e!=Float32Array&&(t[0]=0,t[1]=0),t}function Se(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t}function Ue(t,e,r){return t[0]=e[0]*r[0],t[1]=e[1]*r[1],t}function Me(t,e,r){return t[0]=e[0]/r[0],t[1]=e[1]/r[1],t}function be(t,e){var r=e[0]-t[0],n=e[1]-t[1];return Math.hypot(r,n)}function Pe(t,e){var r=e[0]-t[0],n=e[1]-t[1];return r*r+n*n}function we(t){var e=t[0],r=t[1];return Math.hypot(e,r)}function Ge(t){var e=t[0],r=t[1];return e*e+r*r}var Be=we,Ee=Se,Ce=Ue,Le=Me,Re=be,De=Pe,Ie=Ge,Ne=function(){var t=Te();return function(e,r,n,i,o,a){var s,u;for(r||(r=2),n||(n=0),u=i?Math.min(i*r+n,e.length):e.length,s=n;s<u;s+=r)t[0]=e[s],t[1]=e[s+1],o(t,t,a),e[s]=t[0],e[s+1]=t[1];return e}}(),Fe=Object.freeze({create:Te,clone:function(t){var r=new e(2);return r[0]=t[0],r[1]=t[1],r},fromValues:function(t,r){var n=new e(2);return n[0]=t,n[1]=r,n},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t},set:function(t,e,r){return t[0]=e,t[1]=r,t},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t},subtract:Se,multiply:Ue,divide:Me,ceil:function(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t},floor:function(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t},min:function(t,e,r){return t[0]=Math.min(e[0],r[0]),t[1]=Math.min(e[1],r[1]),t},max:function(t,e,r){return t[0]=Math.max(e[0],r[0]),t[1]=Math.max(e[1],r[1]),t},round:function(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t},scale:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t},scaleAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t},distance:be,squaredDistance:Pe,length:we,squaredLength:Ge,negate:function(t,e){return t[0]=-e[0],t[1]=-e[1],t},inverse:function(t,e){return t[0]=1/e[0],t[1]=1/e[1],t},normalize:function(t,e){var r=e[0],n=e[1],i=r*r+n*n;return i>0&&(i=1/Math.sqrt(i)),t[0]=e[0]*i,t[1]=e[1]*i,t},dot:function(t,e){return t[0]*e[0]+t[1]*e[1]},cross:function(t,e,r){var n=e[0]*r[1]-e[1]*r[0];return t[0]=t[1]=0,t[2]=n,t},lerp:function(t,e,r,n){var i=e[0],o=e[1];return t[0]=i+n*(r[0]-i),t[1]=o+n*(r[1]-o),t},random:function(t,e){e=e||1;var n=2*r()*Math.PI;return t[0]=Math.cos(n)*e,t[1]=Math.sin(n)*e,t},transformMat2:function(t,e,r){var n=e[0],i=e[1];return t[0]=r[0]*n+r[2]*i,t[1]=r[1]*n+r[3]*i,t},transformMat2d:function(t,e,r){var n=e[0],i=e[1];return t[0]=r[0]*n+r[2]*i+r[4],t[1]=r[1]*n+r[3]*i+r[5],t},transformMat3:function(t,e,r){var n=e[0],i=e[1];return t[0]=r[0]*n+r[3]*i+r[6],t[1]=r[1]*n+r[4]*i+r[7],t},transformMat4:function(t,e,r){var n=e[0],i=e[1];return t[0]=r[0]*n+r[4]*i+r[12],t[1]=r[1]*n+r[5]*i+r[13],t},rotate:function(t,e,r,n){var i=e[0]-r[0],o=e[1]-r[1],a=Math.sin(n),s=Math.cos(n);return t[0]=i*s-o*a+r[0],t[1]=i*a+o*s+r[1],t},angle:function(t,e){var r=t[0],n=t[1],i=e[0],o=e[1],a=r*r+n*n;a>0&&(a=1/Math.sqrt(a));var s=i*i+o*o;s>0&&(s=1/Math.sqrt(s));var u=(r*i+n*o)*a*s;return u>1?0:u<-1?Math.PI:Math.acos(u)},zero:function(t){return t[0]=0,t[1]=0,t},str:function(t){return"vec2("+t[0]+", "+t[1]+")"},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]},equals:function(e,r){var n=e[0],i=e[1],o=r[0],a=r[1];return Math.abs(n-o)<=t*Math.max(1,Math.abs(n),Math.abs(o))&&Math.abs(i-a)<=t*Math.max(1,Math.abs(i),Math.abs(a))},len:Be,sub:Ee,mul:Ce,div:Le,dist:Re,sqrDist:De,sqrLen:Ie,forEach:Ne});let Ae={};function Ve(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Oe(t,e){var r=e.get(t);if(!r)throw new TypeError("attempted to get private field on non-instance");return r.get?r.get.call(t):r.value}function Ye(t,e,r){var n=e.get(t);if(!n)throw new TypeError("attempted to set private field on non-instance");if(n.set)n.set.call(t,r);else{if(!n.writable)throw new TypeError("attempted to set read only private field");n.value=r}return r}Ae.glMatrix=i,Ae.mat2=l,Ae.mat2d=d,Ae.mat3=y,Ae.mat4=E,Ae.quat=ue,Ae.quat2=ye,Ae.vec2=Fe,Ae.vec3=J,Ae.vec4=Pt,Object.defineProperty(Ae,"__esModule",{value:!0});let Xe=1;class ze{static getNextUUID(){return Xe++}constructor(){this._UUID=Xe++}updateUUID(){this._UUID=Xe++}}let $e={float:1*Float32Array.BYTES_PER_ELEMENT,float2:2*Float32Array.BYTES_PER_ELEMENT,float3:3*Float32Array.BYTES_PER_ELEMENT,float4:4*Float32Array.BYTES_PER_ELEMENT,mat2:4*Float32Array.BYTES_PER_ELEMENT,mat3:12*Float32Array.BYTES_PER_ELEMENT,mat4:16*Float32Array.BYTES_PER_ELEMENT};var ke={rgb2hex:(t,e,r)=>"#"+(16777216+(r|e<<8|t<<16)).toString(16).slice(1),regHex:function(){const t=/^#(?:[0-9a-fA-F]{3}){1,2}$/;return function(e){return t.test(e)}}(),hexToRGB_ZeroToOne:function(t){let e,r;if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(t))return r=[],e=t.substring(1).split(""),3===e.length&&(e=[e[0],e[0],e[1],e[1],e[2],e[2]]),e="0x"+e.join(""),r[0]=(e>>16&255)/255,r[1]=(e>>8&255)/255,r[2]=(255&e)/255,r;He.throwFunc("RedGLUtil.hexToRGB_ZeroToOne : 잘못된 hex값입니다.",t)}};let We=function(t,e,r){return Math.max(e,Math.min(r,t))};var Ze={clamp:We,nextHighestPowerOfTwo:function(){let t;return function(e){for(--e,t=1;t<32;t<<=1)e|=e>>t;return e+1}}(),quaternionToRotationMat4:function(t,e){let r=t[0],n=t[1],i=t[2],o=t[3],a=r+r,s=n+n,u=i+i,l=r*a,f=r*s,m=r*u,c=n*s,h=n*u,d=i*u,p=o*a,v=o*s,_=o*u;return e[0]=1-(c+d),e[4]=f-_,e[8]=m+v,e[1]=f+_,e[5]=1-(l+d),e[9]=h-p,e[2]=m-v,e[6]=h+p,e[10]=1-(l+c),e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},mat4ToEuler:function(t,e,r){e=e||[0,0,0],r=r||"XYZ";let n=t[0],i=t[4],o=t[8],a=t[1],s=t[5],u=t[9],l=t[2],f=t[6],m=t[10];return"XYZ"===r?(e[1]=Math.asin(We(o,-1,1)),Math.abs(o)<.99999?(e[0]=Math.atan2(-u,m),e[2]=Math.atan2(-i,n)):(e[0]=Math.atan2(f,s),e[2]=0)):"YXZ"===r?(e[0]=Math.asin(-We(u,-1,1)),Math.abs(u)<.99999?(e[1]=Math.atan2(o,m),e[2]=Math.atan2(a,s)):(e[1]=Math.atan2(-l,n),e[2]=0)):"ZXY"===r?(e[0]=Math.asin(We(f,-1,1)),Math.abs(f)<.99999?(e[1]=Math.atan2(-l,m),e[2]=Math.atan2(-i,s)):(e[1]=0,e[2]=Math.atan2(a,n))):"ZYX"===r?(e[1]=Math.asin(-We(l,-1,1)),Math.abs(l)<.99999?(e[0]=Math.atan2(f,m),e[2]=Math.atan2(a,n)):(e[0]=0,e[2]=Math.atan2(-i,s))):"YZX"===r?(e[2]=Math.asin(We(a,-1,1)),Math.abs(a)<.99999?(e[0]=Math.atan2(-u,s),e[1]=Math.atan2(-l,n)):(e[0]=0,e[1]=Math.atan2(o,m))):"XZY"===r&&(e[2]=Math.asin(-We(i,-1,1)),Math.abs(i)<.99999?(e[0]=Math.atan2(f,s),e[1]=Math.atan2(o,n)):(e[0]=Math.atan2(-u,m),e[1]=0)),e},calculateNormals:function(t,e){let r,n,i=[];for(r=0;r<t.length;r+=3)i[r+0]=0,i[r+1]=0,i[r+2]=0;for(r=0;r<e.length;r+=3){let o,a,s,u,l=[],f=[],m=[];for(o=3*e[r],a=3*e[r+1],s=3*e[r+2],l[0]=t[s+0]-t[a+0],l[1]=t[s+1]-t[a+1],l[2]=t[s+2]-t[a+2],f[0]=t[o+0]-t[a+0],f[1]=t[o+1]-t[a+1],f[2]=t[o+2]-t[a+2],m[0]=l[1]*f[2]-l[2]*f[1],m[1]=l[2]*f[0]-l[0]*f[2],m[2]=l[0]*f[1]-l[1]*f[0],n=0;n<3;n++)u=3*e[r+n],i[u+0]=i[u+0]+m[0],i[u+1]=i[u+1]+m[1],i[u+2]=i[u+2]+m[2]}for(r=0;r<t.length;r+=3){let t=[];t[0]=i[r+0],t[1]=i[r+1],t[2]=i[r+2];let e=Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);0===e&&(e=1),t[0]=t[0]/e,t[1]=t[1]/e,t[2]=t[2]/e,i[r+0]=t[0],i[r+1]=t[1],i[r+2]=t[2]}return i}};const Qe=(t=>{let e,r,n,i,o,a=[0,0,0],s=Ae.mat4.create(),u=Ae.mat4.create();return(t,l,f)=>(t=2*t/f.viewRect[2]-1,l=-2*l/f.viewRect[3]+1,e=1,o=f.camera,Ae.mat4.multiply(u,f.projectionMatrix,o.matrix),i=Ae.mat4.clone(u),Ae.mat4.invert(i,i),a=[t,l,1],Ae.mat4.identity(s),Ae.mat4.translate(s,s,a),Ae.mat4.multiply(i,i,s),a[0]=i[12],a[1]=i[13],a[2]=i[14],r=u[12]*t+u[13]*l+u[15],0!==r&&(n=1/r,a[0]/=n,a[1]/=n,a[2]/=n,a[0]=a[0]+o.x,a[1]=a[1]+o.y,a[2]=a[2]+o.z),a)})();var He={throwFunc:function(){throw"Error : "+Array.prototype.slice.call(arguments).join(" ")},...ke,...Ze,getFlatChildList:t=>{let e=function(t){const e=[...t],r=[];for(;e.length;){const t=e.shift();r.push(t),e.push(...t._children)}return r}(t);return e=e.reverse(),e},screenToWorld:Qe};class qe{constructor(t=[],e=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST){Array.isArray(t)||He.throwFunc(`${this.constructor.name} - only allow Array Instance. / inputValue : ${t} { type : ${typeof t} }`),this.redStruct=JSON.parse(JSON.stringify(t)),this.redStructOffsetMap={};let r=0,n=$e.float4;this.redStruct.map(t=>{if(t.valueName||He.throwFunc(`${this.constructor.name} - need valueName / inputValue : ${t.valueName} { type : ${typeof t.valueName} }`),t.hasOwnProperty("size")||He.throwFunc(`${this.constructor.name} - need size / inputValue : ${t.size} { type : ${typeof t.size} }`),t.size<=n){Math.floor(r/n)!=Math.floor((r+t.size-1)/n)&&(r+=n-r%n),t.offset=r,r+=t.size}else r%n&&(r+=n-r%n),t.offset=r,r+=t.size;this.redStructOffsetMap[t.valueName]=t.offset,t._UUID=t.valueName+"_"+ze.getNextUUID()});let i=r%n;this.size=this.redStruct.length?r+(i?n-i:0):n,this.usage=e}}var je=new WeakMap;class Je{constructor(){Ve(this,"redGPUContext",void 0),Ve(this,"detectGPU",t=>{}),je.set(this,{writable:!0,value:t=>{let e,r,n,i,o,a,s=window.navigator,u=s.userAgent.toLowerCase(),l=s.platform.toLowerCase(),f=s.appVersion.toLowerCase(),m="pc",c=0,h=t=>u.includes("whale")?(r=parseFloat(/whale\/([\d]+)/.exec(u)[1]),e="whale"):0,d=t=>{if(u.includes(o="chrome")||u.includes(o="crios"))return e="chrome",r=parseFloat(("chrome"===o?/chrome\/([\d]+)/:/crios\/([\d]+)/).exec(u)[1])},p=t=>u.includes("firefox")?(e="firefox",r=parseFloat(/firefox\/([\d]+)/.exec(u)[1])):0,v=t=>u.includes("safari")?(e="safari",r=parseFloat(/safari\/([\d]+)/.exec(u)[1])):0,_=t=>{let n;return u.includes(n="opera")||u.includes(n="opr")?(e="opera",r="opera"===n?parseFloat(/version\/([\d]+)/.exec(u)[1]):parseFloat(/opr\/([\d]+)/.exec(u)[1])):0},g=t=>u.includes("naver")?e="naver":0;if(u.includes("android"))e=n="android",m=u.includes("mobile")?(e+="Tablet","tablet"):"mobile",i=(o=/android ([\d.]+)/.exec(u))?(o=o[1].split("."),parseFloat(o[0]+"."+o[1])):0,c=1,h()||g()||_()||d()||p()||(r=o=/safari\/([\d.]+)/.exec(u)?parseFloat(o[1]):0);else if(u.includes(o="ipad")||u.includes(o="iphone"))m="ipad"===o?"tablet":"mobile",e=n=o,i=(o=/os ([\d_]+)/.exec(u))?(o=o[1].split("_"),parseFloat(o[0]+"."+o[1])):0,c=1,h()||g()||_()||d()||p()||(r=(o=/mobile\/([\S]+)/.exec(u))?parseFloat(o[1]):0);else if(l.includes("win")){for(o in a={5.1:"xp","6.0":"vista",6.1:"7",6.2:"8",6.3:"8.1","10.0":"10"})if(u.includes("windows nt "+o)){i=a[o];break}n="win",(u.includes("edge")?(u.includes("iemobile")&&(n="winMobile"),e="edge",r=/edge\/([\d]+)/.exec(u)[1]):u.includes("msie")||u.includes("trident")?(u.includes("iemobile")&&(n="winMobile"),e="ie",r=u.includes("msie 7")&&u.includes("trident")?-1:u.includes("msie")?parseFloat(/msie ([\d]+)/.exec(u)[1]):11):void 0)||h()||_()||d()||p()||v()}else l.includes("mac")?(n="mac",o=/os x ([\d._]+)/.exec(u)[1].replace("_",".").split("."),i=parseFloat(o[0]+"."+o[1]),h()||_()||d()||p()||v()):(n=f.includes("x11")?"unix":f.includes("linux")?"linux":0,h()||d()||p());for(o in a={device:m,isMobile:c,browser:e,browserVer:r,os:n,osVer:i,down:c?"touchstart":"mousedown",move:c?"touchmove":"mousemove",up:c?"touchend":"mouseup",click:"click",over:"mouseover",out:"mouseout"})a.hasOwnProperty(o)&&(this[o]=a[o])}}),Oe(this,je).call(this),"ie"===this.browser&&(console.table=console.log)}}class Ke{}function tr(t){return new Worker(URL.createObjectURL(new Blob([`(${t})()`],{type:"application/javascript"})))}Ve(Ke,"MESH_UNIFORM_POOL_NUM",100),Ve(Ke,"GLSL_VERSION","#version 460"),Ve(Ke,"MAX_DIRECTIONAL_LIGHT",8),Ve(Ke,"MAX_POINT_LIGHT",100),Ve(Ke,"MAX_SPOT_LIGHT",1),Ve(Ke,"SET_INDEX_ComputeUniforms",0),Ve(Ke,"SET_INDEX_SystemUniforms_vertex",0),Ve(Ke,"SET_INDEX_SystemUniforms_fragment",1),Ve(Ke,"SET_INDEX_MeshUniforms",2),Ve(Ke,"SET_INDEX_VertexUniforms",3),Ve(Ke,"SET_INDEX_FragmentUniforms",3),Ve(Ke,"GLSL_SystemUniforms_vertex",{systemUniforms:`\n\t\tconst float TRUTHY = 1.0;\n\t\tlayout( set =  ${Ke.SET_INDEX_SystemUniforms_vertex}, binding = 0 ) uniform SystemUniforms {\n\t        mat4 perspectiveMTX;\n\t        mat4 cameraMTX;\n\t        vec2 resolution;\n\t        float time;\n\t    } systemUniforms;\n\t    `,meshUniforms:`\n\t\tlayout( set = ${Ke.SET_INDEX_MeshUniforms}, binding = 0 ) uniform MeshMatrixUniforms {\n\t        mat4 modelMatrix[${Ke.MESH_UNIFORM_POOL_NUM}];\n\t        mat4 normalMatrix[${Ke.MESH_UNIFORM_POOL_NUM}];\n\t    } meshMatrixUniforms;\n\t    layout( set = ${Ke.SET_INDEX_MeshUniforms}, binding = 1 ) uniform MeshUniformIndex {\n\t        float index;\n\t        float mouseColorID;\n\t        float sumOpacity;\n\t    } meshUniforms;\n\t\t`,calcDisplacement:"\n\t\t vec3 calcDisplacement(vec3 vNormal, float displacementFlowSpeedX, float displacementFlowSpeedY, float displacementPower, vec2 targetUV, texture2D targetDisplacementTexture, sampler targetSampler){\n\t\t    return normalize(vNormal) * texture(sampler2D(targetDisplacementTexture, targetSampler), targetUV + vec2(\n\t\t              displacementFlowSpeedX * (systemUniforms.time/1000.0),\n\t\t               displacementFlowSpeedY * (systemUniforms.time/1000.0)\n\t\t          )).x * displacementPower ;\n\t\t }\n\t\t",getSprite3DMatrix:"\n\t\tmat4 getSprite3DMatrix(mat4 cameraMTX, mat4 mvMatrix){\n\t\t\tmat4 tMTX = cameraMTX * mvMatrix;\n\t\t\ttMTX[0][0] = mvMatrix[0][0], tMTX[0][1] = 0.0, tMTX[0][2] = 0.0;\n\t\t\ttMTX[1][0] = 0.0, tMTX[1][1] = mvMatrix[1][1], tMTX[1][2] = 0.0;\n\t\t\ttMTX[2][0] = 0.0, tMTX[2][1] = 0.0, tMTX[2][2] = mvMatrix[2][2];\n\t\t\treturn tMTX;\n\t\t}\n\t\t"}),Ve(Ke,"GLSL_SystemUniforms_fragment",{systemUniforms:`\n\t\tconst float TRUTHY = 1.0;\n\t\tconst int MAX_DIRECTIONAL_LIGHT = ${Ke.MAX_DIRECTIONAL_LIGHT};\n\t\tconst int MAX_POINT_LIGHT =  ${Ke.MAX_POINT_LIGHT};\n\t\tconst int MAX_SPOT_LIGHT =  ${Ke.MAX_SPOT_LIGHT};\n\t\tstruct DirectionalLight {\n\t        vec4 color;\n\t        vec3 position;\n\t        float intensity;\n\t\t};\n\t\tstruct PointLight {\n\t        vec4 color;\n\t        vec3 position;\n\t        float intensity;\n\t        float radius;\n\t\t};\n\t\tstruct AmbientLight {\n\t        vec4 color;\n\t        float intensity;\n\t\t};\n\t\tstruct SpotLight {\n\t        vec4 color;\n\t        vec3 position;\n\t        float intensity;\n\t        float cutoff;\n\t        float exponent;\n\t\t};\n\t\tlayout( set =  ${Ke.SET_INDEX_SystemUniforms_fragment}, binding = 0 ) uniform SystemUniforms {\n\t        float directionalLightCount;\n\t        float pointLightCount;\n\t        float spotLightCount;\n\t        DirectionalLight directionalLightList[MAX_DIRECTIONAL_LIGHT];\n\t        PointLight pointLightList[MAX_POINT_LIGHT];\n\t        AmbientLight ambientLight;\t        \n\t        SpotLight spotLightList[MAX_SPOT_LIGHT];\n\t        vec3 cameraPosition;\n\t        vec2 resolution;\n        } systemUniforms;\n        /////////////////////////////////////////////////////////////////////////////\n        vec4 la = systemUniforms.ambientLight.color * systemUniforms.ambientLight.intensity;\n        vec4 calcDirectionalLight(\n            vec4 diffuseColor,\n            vec3 N,\t\t\n\t\t\tfloat loopNum,\n\t\t\tDirectionalLight[MAX_DIRECTIONAL_LIGHT] lightList,\n\t\t\tfloat shininess,\n\t\t\tfloat specularPower,\n\t\t\tvec4 specularColor,\n\t\t\tfloat specularTextureValue\n\t\t){\n\t\t    vec4 ld = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t    vec4 ls = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t    \n\t\t    vec3 L;\t\n\t\t    vec4 lightColor;\n\t\t    \n\t\t    float lambertTerm;\n\t\t    float intensity;\n\t\t    float specular;\n\t\t    \t\t    \n\t\t    DirectionalLight lightInfo;\n\t\t    for(int i = 0; i< loopNum; i++){\n\t\t        lightInfo = lightList[i];\n\t\t\t    L = normalize(-lightInfo.position);\t\n\t\t\t    lightColor = lightInfo.color;\n\t\t\t    lambertTerm = dot(N,-L);\n\t\t\t    intensity = lightInfo.intensity;\n\t\t\t    if(lambertTerm > 0.0){\n\t\t\t\t\tld += lightColor * diffuseColor * lambertTerm * intensity;\n\t\t\t\t\tspecular = pow( max(dot(reflect(L, N), -L), 0.0), shininess) * specularPower * specularTextureValue;\n\t\t\t\t\tls +=  specularColor * specular * intensity ;\n\t\t\t    }\n\t\t    }\n\t\t    return ld + ls;\n\t\t}\n\t\t/////////////////////////////////////////////////////////////////////////////\n\t\tvec4 calcPointLight(\n            vec4 diffuseColor,\n            vec3 N,\t\t\n\t\t\tfloat loopNum,\n\t\t\tPointLight[MAX_POINT_LIGHT] lightList,\n\t\t\tfloat shininess,\n\t\t\tfloat specularPower,\n\t\t\tvec4 specularColor,\n\t\t\tfloat specularTextureValue,\n\t\t\tvec3 vVertexPosition\n\t\t){\n\t\t\tvec4 ld = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t    vec4 ls = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t    \n\t\t    vec3 L;\t\n\t\t    vec4 lightColor;\n\t\t    \n\t\t    float lambertTerm;\n\t\t    float intensity;\n\t\t    float specular;\n\t\t  \n\t\t    PointLight lightInfo;\n\t\t    float distanceLength ;\n\t\t    float attenuation;\n\t\t    for(int i = 0; i< loopNum; i++){\n\t\t        lightInfo = lightList[i];\n\t\t        L = -lightInfo.position + vVertexPosition;\n\t\t\t    distanceLength = abs(length(L));\n\t\t\t    if(lightInfo.radius> distanceLength){\n\t\t\t        L = normalize(L);\t\n\t\t\t\t    lightColor = lightInfo.color;\n\t\t\t\t    lambertTerm = dot(N,-L);\n\t\t\t\t    intensity = lightInfo.intensity;\n\t\t\t\t    if(lambertTerm > 0.0){\n\t\t\t\t        attenuation = clamp(1.0 - distanceLength*distanceLength/(lightInfo.radius*lightInfo.radius), 0.0, 1.0); \n\t\t\t            attenuation *= attenuation;\n\t\t\t\t\t\tld += lightColor * diffuseColor * lambertTerm * intensity * attenuation;\n\t\t\t\t\t\tspecular = pow( max(dot(reflect(L, N), -L), 0.0), shininess) * specularPower * specularTextureValue;\n\t\t\t\t\t\tls +=  specularColor * specular * intensity * attenuation ;\n\t\t\t\t    }\n\t\t\t    }\n\t\t    }\n\t\t    return ld + ls;\n\t\t}\n\t\tvec4 calcSpotLight(\n            vec4 diffuseColor,\n            vec3 N,\t\t\n\t\t\tfloat loopNum,\n\t\t\tSpotLight[MAX_SPOT_LIGHT] lightList,\n\t\t\tfloat shininess,\n\t\t\tfloat specularPower,\n\t\t\tvec4 specularColor,\n\t\t\tfloat specularTextureValue,\n\t\t\tvec3 vVertexPosition\n\t\t){\n\t\t\tvec4 ld = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t    vec4 ls = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t    \n\t\t    vec3 L;\t\n\t\t    vec4 lightColor;\n\t\t    \n\t\t    float lambertTerm;\n\t\t    float intensity;\n\t\t    float specular;\n\t\t  \n\t\t    SpotLight lightInfo;\n\t        float distanceLength ;\n\t\t    float attenuation;\n\t\t    for(int i = 0; i< loopNum; i++){\n\t\t        lightInfo = lightList[i];\n\t\t        L = -lightInfo.position + vVertexPosition;\n\t\t\t    distanceLength = abs(length(L));\n\t\t\t    vec3 spotDirection = vec3(0.1,-1,0);\n\t\t\t    L = normalize(L);\t\n\t\t\t    lambertTerm = dot(N,-L);\n\t\t\t\tfloat spotEffect = dot(normalize(spotDirection),L);\n                lightColor = lightInfo.color;\n\t\t        float limit = 10;\n\t\t        float inLight = step(cos(limit * 3.141592653589793/180), spotEffect);\n                float light = inLight * spotEffect;\n\t\t\t    if(lambertTerm > 0 && spotEffect > lightInfo.cutoff ){\t\t\t     \n\t\t\t        if(spotEffect > cos(limit * 3.141592653589793/180) ){\n\t\t\t\t        spotEffect = pow(spotEffect, lightInfo.exponent);\n\t\t                attenuation = spotEffect * light ;\n\t\t\t\t\t    intensity = lightInfo.intensity;\t\t\t\t\t \n\t\t\t\t     \n\t\t\t\t\t\tld += lightColor * diffuseColor * intensity * attenuation;\n\t\t\t\t\t\tspecular = pow( max(dot(reflect(L, N), -L), 0.0), shininess) * specularPower * specularTextureValue;\n\t\t\t\t\t\tls +=  specularColor * specular * intensity * attenuation ;\n\t\t\t\t\t}\n\t\t\t    }\n\t\t    }\n\t\t    return ld + ls;\n\t\t}\n\t\t/////////////////////////////////////////////////////////////////////////////\n\t\tvec3 getFlatNormal(vec3 vertexPosition){\n\t\t\tvec3 dx = dFdx(vertexPosition.xyz);\n\t\t\tvec3 dy = dFdy(vertexPosition.xyz);\n\t\t\treturn normalize(cross(normalize(dy), normalize(dx)));\n\t\t}\n\t\t`,perturb_normal:"\n\t\tvec3 perturb_normal( vec3 N, vec3 V, vec2 texcoord, vec3 normalColor , float normalPower)\n\t\t{\t   \n\t\t\tvec3 map = normalColor;\n\t\t\tmap =  map * 255./127. - 128./127.;\n\t\t\tmap.xy *= -normalPower;\n\t\t\tmat3 TBN = cotangent_frame(N, V, texcoord);\n\t\t\treturn normalize(TBN * map);\n\t\t}\n\t\t",cotangent_frame:"\n\t\tmat3 cotangent_frame(vec3 N, vec3 p, vec2 uv)\n\t\t{\n\t\t\tvec3 dp1 = dFdx( p );\n\t\t\tvec3 dp2 = dFdy( p );\n\t\t\tvec2 duv1 = dFdx( uv );\n\t\t\tvec2 duv2 = dFdy( uv );\n\t\t\t\n\t\t\tvec3 dp2perp = cross( dp2, N );\n\t\t\tvec3 dp1perp = cross( N, dp1 );\n\t\t\tvec3 T = dp2perp * duv1.x + dp1perp * duv2.x;\n\t\t\tvec3 B = dp2perp * duv1.y + dp1perp * duv2.y;\n\t\t\t\n\t\t\tfloat invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );\n\t\t\treturn mat3( T * invmax, B * invmax, N );\n\t\t}\n\t\t"});const er=tr(async()=>{let t=(t=>{let e=function(){let t;return function(e){for(--e,t=1;t<32;t<<=1)e|=e>>t;return e+1}}();return t=>{const r=t.src;let n;fetch(r,{mode:"cors"}).then(t=>{if(n={url:t.url,ok:t.ok,status:t.status,statusText:t.statusText,type:t.type},!t.ok)throw Error("error");t.blob().then(t=>self.createImageBitmap(t)).then(t=>{let n=e(t.width),i=e(t.height);n>1920&&(n=1920),i>1920&&(i=1920);let o=[],a=0,s=Math.round(Math.log2(Math.max(n,i))),u=t=>{const e=new OffscreenCanvas(n,i),l=e.getContext("2d");l.fillStyle="rgba(0,0,0,0)",l.fillRect(0,0,n,i),l.drawImage(t,0,0,n,i);let f,m=l.getImageData(0,0,n,i).data;const c=256*Math.ceil(4*n/256);if(c==4*n)f=m;else{f=new Uint8ClampedArray(c*i);let t=0;for(let e=0;e<i;++e)for(let r=0;r<n;++r){let n=4*r+e*c;f[n]=m[t],f[n+1]=m[t+1],f[n+2]=m[t+2],f[n+3]=m[t+3],t+=4}}o.push({data:f.buffer,width:n,height:i,bytesPerRow:c}),n=Math.max(Math.floor(n/2),1),i=Math.max(Math.floor(i/2),1),a++,a==s+1?self.postMessage({src:r,imageDatas:o,ok:!0}):u(e)};u(t)})}).catch(t=>{self.postMessage({error:n,src:r})})}})();self.addEventListener("message",e=>{t(e.data)})}),rr=tr(async()=>{let t=await import("https://unpkg.com/@webgpu/glslang@0.0.15/dist/web-devel/glslang.js"),e=await t.default(),r=(t=>{let e=(t,r)=>{let n,i,o,a,s;if(r>t.length||r<=0)return[];if(r===t.length)return[t];if(1===r){for(o=[],n=0;n<t.length;n++)o.push([t[n]]);return o}for(o=[],n=0;n<t.length-r+1;n++)for(a=t.slice(n,n+1),s=e(t.slice(n+1),r-1),i=0;i<s.length;i++)o.push(a.concat(s[i]));return o};return t=>{let r,n,i,o;for(i=[],r=1;r<=t.length;r++)for(o=e(t,r),n=0;n<o.length;n++)i.push(o[n]);return i}})(),n=async t=>{const n=t.src,i=n.shaderType,o=n.shaderName;let a=n.originSource,s={},u=0;const l=r(n.optionList.sort());let f=t=>{let r=o+"_"+t.join("_");if(!s[r]){s[r]=1;let n=function(t,e){t=JSON.parse(JSON.stringify(t));let r=e.length;for(;r--;){let n=new RegExp(`//#RedGPU#${e[r]}#`,"gi");t=t.replace(n,"")}return t}(a,t),l=e.compileGLSL(n,i);u++,self.postMessage({endCompile:!0,shaderName:o,searchKey:r,compileGLSL:l,shaderType:i})}};l.forEach(t=>{f(t)}),self.postMessage({end:!0,shaderName:o,shaderType:i,totalNum:u})};self.addEventListener("message",t=>{n(t.data)})}),nr=t=>new Promise((e,r)=>{er.addEventListener("message",(function n(i){i.data.src===t&&(er.removeEventListener("message",n),i.data.error&&r(i.data.error),e(i.data))})),er.postMessage({src:t,workerType:"image"})}),ir=(t,e,r,n,i,o)=>new Promise((a,s)=>{rr.addEventListener("message",(function n(o){if(o.data.shaderName===r&&o.data.shaderType===i){if(o.data.endCompile){let r=o.data.searchKey;if(!e.sourceMap.has(r)){e.sourceMap.set(r,o.data.compileGLSL);let n={key:r,code:o.data.compileGLSL};e.shaderModuleMap[r]=t.device.createShaderModule(n)}o.data.error&&s(o.data.error)}o.data.end&&(rr.removeEventListener("message",n),a(o))}})),rr.postMessage({src:{originSource:n,shaderName:r,shaderType:i,optionList:o},workerType:"compileGLSL"})}),or={vertex:{},fragment:{}},ar={vertex:{},fragment:{}};class sr{constructor(t,e,r,n){Ve(this,"redGPUContext",void 0),Ve(this,"type",void 0),Ve(this,"originSource",void 0),Ve(this,"shaderModuleMap",void 0),Ve(this,"sourceMap",void 0),Ve(this,"GPUShaderModule",void 0),Ve(this,"currentKey",void 0);let i=r.name,o=or[e][i];if(o||(or[e][i]=new Map,ar[e][i]={}),this.redGPUContext=t,this.type=e,this.originSource=n,this.sourceMap=or[e][i],this.shaderModuleMap=ar[e][i],!o){let t=r.PROGRAM_OPTION_LIST[e];t.length&&ir(this.redGPUContext,this,i,this.originSource,this.type,t).then(t=>{})}this.searchShaderModule([i])}searchShaderModule(t){t.sort();let e=t.join("_");if(this.currentKey!=e){if(this.currentKey=e,this.shaderModuleMap[e])return this.GPUShaderModule=this.shaderModuleMap[e];{let r;r=this.sourceMap.get(e),r instanceof Uint32Array||r||this.sourceMap.set(e,r=this.redGPUContext.glslang.compileGLSL(function(t,e){t=JSON.parse(JSON.stringify(t));let r=e.length;for(;r--;)t=t.replace(new RegExp(`//#RedGPU#${e[r]}#`,"gi"),"");return t}(this.originSource,t),this.type)),this.shaderModuleDescriptor={key:e,code:r},this.GPUShaderModule=this.redGPUContext.device.createShaderModule(this.shaderModuleDescriptor),this.shaderModuleMap[e]=this.GPUShaderModule}}}}class ur{constructor(t){Ve(this,"redGPUContext",void 0),Ve(this,"GPUBindGroup",null),this.redGPUContext=t}setGPUBindGroup(t){this.GPUBindGroup=this.redGPUContext.device.createBindGroup(t)}}const lr=new Map;var fr=new WeakMap;class mr extends ze{constructor(t){let e,r;super(),Ve(this,"uniformBufferDescriptor_vertex",void 0),Ve(this,"uniformBufferDescriptor_fragment",void 0),Ve(this,"GPUBindGroupLayout",void 0),fr.set(this,{writable:!0,value:!1}),Ve(this,"vShaderModule",void 0),Ve(this,"fShaderModule",void 0),Ve(this,"vertexStage",void 0),Ve(this,"fragmentStage",void 0),Ve(this,"entries",void 0),Ve(this,"redGPUContext",void 0),Ve(this,"uniformBuffer_vertex",void 0),Ve(this,"uniformBuffer_fragment",void 0),Ve(this,"uniformBindGroup_material",void 0),Ve(this,"needResetBindingInfo",!0);let n=this.constructor,i=n.vertexShaderGLSL,o=n.fragmentShaderGLSL;n.PROGRAM_OPTION_LIST;if(r=new sr(t,"fragment",n,o),e=new sr(t,"vertex",n,i),!n.uniformBufferDescriptor_vertex)throw new Error(n.name+" : must define a static uniformBufferDescriptor_vertex.");if(!n.uniformBufferDescriptor_fragment)throw new Error(n.name+" : must define a static uniformBufferDescriptor_fragment.");if(!n.uniformsBindGroupLayoutDescriptor_material)throw new Error(n.name+" : must define a static uniformsBindGroupLayoutDescriptor_material.");this.uniformBufferDescriptor_vertex=new qe(n.uniformBufferDescriptor_vertex),this.uniformBufferDescriptor_fragment=new qe(n.uniformBufferDescriptor_fragment),this.GPUBindGroupLayout=function(t,e){let r;return(r=lr.get(e))||(r=t.device.createBindGroupLayout(e),lr.set(e,r)),r}(t,n.uniformsBindGroupLayoutDescriptor_material),this.vShaderModule=e,this.fShaderModule=r,this.uniformBuffer_vertex=new an(t),this.uniformBuffer_vertex.setBuffer(this.uniformBufferDescriptor_vertex),this.uniformBuffer_fragment=new an(t),this.uniformBuffer_fragment.setBuffer(this.uniformBufferDescriptor_fragment),this.uniformBindGroup_material=new ur(t),this.redGPUContext=t}updateUniformBuffer(){let t,e,r,n,i,o=new Float32Array(1);for(e=this.uniformBufferDescriptor_vertex.redStruct,r=this.uniformBufferDescriptor_fragment.redStruct,t=e.length>r.length?e.length:r.length;t--;)n=e[t],n&&(i=this[n.valueName],null!=i&&null!=i||He.throwFunc(`uniformBufferDescriptor_vertex에 올바르지않은 ${n.valueName}가 존재함`),"number"==typeof i?(o[0]=i,i=o):"boolean"==typeof i&&(o[0]=i?1:0,i=o),this.uniformBuffer_vertex.float32Array.set(i,n.offset/Float32Array.BYTES_PER_ELEMENT)),n=r[t],n&&(i=this[n.valueName],null!=i&&null!=i||He.throwFunc(`uniformBufferDescriptor_fragment에 올바르지않은 ${n.valueName}가 존재함`),"number"==typeof i?(o[0]=i,i=o):"boolean"==typeof i&&(o[0]=i?1:0,i=o),this.uniformBuffer_fragment.float32Array.set(i,n.offset/Float32Array.BYTES_PER_ELEMENT));this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,0,this.uniformBuffer_vertex.float32Array),this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,0,this.uniformBuffer_fragment.float32Array)}checkTexture(t,e){throw new Error(this.constructor.name+" : checkTexture must override!!!")}resetBindingInfo(){throw new Error(this.constructor.name+" : resetBindingInfo must override!!!")}_afterResetBindingInfo(){this.searchModules(),this.setUniformBindGroupDescriptor(),this.uniformBindGroup_material.setGPUBindGroup(this.uniformBindGroupDescriptor),Oe(this,fr)||(this.updateUniformBuffer(),Ye(this,fr,!0)),this.updateUUID()}searchModules(){let t=[this.constructor.name],e=[this.constructor.name],r=0,n=Math.max(this.constructor.PROGRAM_OPTION_LIST.vertex.length,this.constructor.PROGRAM_OPTION_LIST.fragment.length);for(;r<n;r++){let n;n=this.constructor.PROGRAM_OPTION_LIST.vertex[r],n&&this[n]&&t.push(n),n=this.constructor.PROGRAM_OPTION_LIST.fragment[r],n&&this[n]&&e.push(n)}this.vShaderModule.searchShaderModule(t),this.fShaderModule.searchShaderModule(e)}setUniformBindGroupDescriptor(){this.uniformBindGroupDescriptor={layout:this.GPUBindGroupLayout,entries:this.entries}}}Ve(mr,"uniformBufferDescriptor_empty",[]);let cr=new Float32Array(1);const hr=(t,...e)=>[t,...e].reduce((t,e)=>e(t)),dr=function(t){return e=>class extends e{constructor(...e){super(...e),Ve(this,"_"+t,null),Ve(this,`__${t}RenderYn`,0)}set[t](e){this.checkTexture(e,t)}get[t](){return this["_"+t]}}},pr=dr("diffuseTexture"),vr=dr("normalTexture"),_r=dr("specularTexture"),gr=dr("emissiveTexture"),xr=dr("environmentTexture"),yr=dr("refractionTexture"),Tr=dr("displacementTexture"),Sr=dr("roughnessTexture"),Ur=dr("occlusionTexture");var Mr={mix:hr,EmptyClass:class{},color:t=>{var e,r;return e=new WeakMap,r=new WeakMap,class extends t{constructor(...t){super(...t),e.set(this,{writable:!0,value:"#ff0000"}),r.set(this,{writable:!0,value:1}),Ve(this,"_colorRGBA",new Float32Array([1,0,0,Oe(this,r)]))}get color(){return Oe(this,e)}set color(t){Ye(this,e,t);let n=He.hexToRGB_ZeroToOne(t);this._colorRGBA[0]=n[0]*Oe(this,r),this._colorRGBA[1]=n[1]*Oe(this,r),this._colorRGBA[2]=n[2]*Oe(this,r),this._colorRGBA[3]=Oe(this,r),this.uniformBuffer_fragment&&this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.colorRGBA,this._colorRGBA)}get colorAlpha(){return Oe(this,r)}set colorAlpha(t){let n=He.hexToRGB_ZeroToOne(Oe(this,e));this._colorRGBA[0]=n[0]*t,this._colorRGBA[1]=n[1]*t,this._colorRGBA[2]=n[2]*t,this._colorRGBA[3]=t,Ye(this,r,t),this.uniformBuffer_fragment&&this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.colorRGBA,this._colorRGBA)}get colorRGBA(){return this._colorRGBA}}},alpha:t=>{var e;return e=new WeakMap,class extends t{constructor(...t){super(...t),e.set(this,{writable:!0,value:1})}get alpha(){return Oe(this,e)}set alpha(t){Ye(this,e,t),cr[0]=Oe(this,e),this.uniformBuffer_fragment&&this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.alpha,cr)}}},defineNumber:function(t,e={}){let r,n=e.hasOwnProperty("min"),i=e.hasOwnProperty("max"),o=e.min,a=e.max;return r=r=>{var s;return s=new WeakMap,class extends r{constructor(...r){super(...r),s.set(this,{writable:!0,value:{min:o,max:a}}),Ve(this,"#"+t,e.value)}set[t](r){this["#"+t]=null,"number"!=typeof r&&He.throwFunc(`${t} : only allow Number. - inputValue : ${r} { type : ${typeof r} }`),n&&r<o&&(r=o),i&&r>a&&(r=a),this["#"+t]=r,e.callback&&e.callback.call(this,r)}get[t](){return this["#"+t]}}},r},diffuseTexture:pr,normalTexture:vr,specularTexture:_r,emissiveTexture:t=>{let e=class extends t{constructor(...t){super(...t),Ve(this,"_emissivePower",1)}get emissivePower(){return this._emissivePower}set emissivePower(t){this._emissivePower=t,cr[0]=this._emissivePower,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.emissivePower,cr)}};return hr(e,gr)},environmentTexture:t=>{let e=class extends t{constructor(...t){super(...t),Ve(this,"_environmentPower",1)}get environmentPower(){return this._environmentPower}set environmentPower(t){this._environmentPower=t,cr[0]=this._environmentPower,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.environmentPower,cr)}};return hr(e,xr)},refractionTexture:t=>{let e=class extends t{constructor(...t){super(...t),Ve(this,"_refractionPower",1),Ve(this,"_refractionRatio",.95)}get refractionPower(){return this._refractionPower}set refractionPower(t){this._refractionPower=t,cr[0]=this._refractionPower,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.refractionPower,cr)}get refractionRatio(){return this._refractionRatio}set refractionRatio(t){this._refractionRatio=t,cr[0]=this._refractionRatio,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.refractionRatio,cr)}};return hr(e,yr)},displacementTexture:t=>{let e=class extends t{constructor(...t){super(...t),Ve(this,"_displacementFlowSpeedX",0),Ve(this,"_displacementFlowSpeedY",0),Ve(this,"_displacementPower",.1)}get displacementFlowSpeedY(){return this._displacementFlowSpeedY}set displacementFlowSpeedY(t){this._displacementFlowSpeedY=t,cr[0]=this._displacementFlowSpeedY,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap.displacementFlowSpeedY,cr)}get displacementFlowSpeedX(){return this._displacementFlowSpeedX}set displacementFlowSpeedX(t){this._displacementFlowSpeedX=t,cr[0]=this._displacementFlowSpeedX,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap.displacementFlowSpeedX,cr)}get displacementPower(){return this._displacementPower}set displacementPower(t){this._displacementPower=t,cr[0]=this._displacementPower,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap.displacementPower,cr)}};return hr(e,Tr)},roughnessTextureGLTF:t=>{let e=class extends t{constructor(...t){super(...t),Ve(this,"_roughnessTexCoordIndex",0),Ve(this,"_roughnessFactor",1)}set roughnessTexture(t){this.checkTexture(t,"roughnessTexture")}get roughnessTexture(){return this._roughnessTexture}get roughnessTexCoordIndex(){return this._roughnessTexCoordIndex}set roughnessTexCoordIndex(t){this._roughnessTexCoordIndex=t,cr[0]=t,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.roughnessTexCoordIndex,cr)}get roughnessFactor(){return this._roughnessFactor}set roughnessFactor(t){this._roughnessFactor=t,cr[0]=t,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.roughnessFactor,cr)}};return hr(e,Sr)},occlusionTextureGLTF:t=>{let e=class extends t{constructor(...t){super(...t),Ve(this,"_occlusionTexCoordIndex",0),Ve(this,"_occlusionPower",1)}set occlusionTexture(t){this.checkTexture(t,"occlusionTexture")}get occlusionTexture(){return this._occlusionTexture}get occlusionTexCoordIndex(){return this._occlusionTexCoordIndex}set occlusionTexCoordIndex(t){this._occlusionTexCoordIndex=t,cr[0]=t,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.occlusionTexCoordIndex,cr)}get occlusionPower(){return this._occlusionPower}set occlusionPower(t){this._occlusionPower=t,cr[0]=t,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.occlusionPower,cr)}};return hr(e,Ur)},basicLightPropertys:t=>class extends t{constructor(...t){super(...t),Ve(this,"_normalPower",1),Ve(this,"_shininess",32),Ve(this,"_specularPower",1),Ve(this,"_specularColor","#ffffff"),Ve(this,"_specularColorRGBA",new Float32Array([1,1,1,1])),Ve(this,"_useFlatMode",!1)}get normalPower(){return this._normalPower}set normalPower(t){this._normalPower=t,cr[0]=this._normalPower,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.normalPower,cr)}get shininess(){return this._shininess}set shininess(t){this._shininess=t,cr[0]=this._shininess,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.shininess,cr)}get specularPower(){return this._specularPower}set specularPower(t){this._specularPower=t,cr[0]=this._specularPower,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.specularPower,cr)}get specularColor(){return this._specularColor}set specularColor(t){this._specularColor=t;let e=He.hexToRGB_ZeroToOne(t);this._specularColorRGBA[0]=e[0],this._specularColorRGBA[1]=e[1],this._specularColorRGBA[2]=e[2],this._specularColorRGBA[3]=1,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.specularColorRGBA,this._specularColorRGBA)}get specularColorRGBA(){return this._specularColorRGBA}get useFlatMode(){return this._useFlatMode}set useFlatMode(t){this._useFlatMode=t,cr[0]=t?1:0,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.useFlatMode,cr)}}};let br=new Float32Array(1);var Pr=new WeakMap;class wr extends(Mr.mix(mr,Mr.diffuseTexture,Mr.normalTexture,Mr.specularTexture,Mr.emissiveTexture,Mr.displacementTexture,Mr.basicLightPropertys,Mr.alpha)){constructor(t,e,r,n,i,o){super(t),Pr.set(this,{writable:!0,value:void 0}),this.diffuseTexture=e,this.normalTexture=r,this.emissiveTexture=i,this.specularTexture=n,this.displacementTexture=o,this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"diffuseTexture":this._diffuseTexture=t,r=e;break;case"normalTexture":this._normalTexture=t,r=e;break;case"specularTexture":this._specularTexture=t,r=e;break;case"emissiveTexture":this._emissiveTexture=t,r=e;break;case"displacementTexture":this._displacementTexture=t,r=e}r&&(br[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],br):this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],br)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,br[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],br):this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],br),this.needResetBindingInfo=!0)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:this._displacementTexture?this._displacementTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:2,resource:this._displacementTexture?this._displacementTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:3,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:4,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:5,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:6,resource:this._normalTexture?this._normalTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:7,resource:this._normalTexture?this._normalTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:8,resource:this._specularTexture?this._specularTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:9,resource:this._specularTexture?this._specularTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:10,resource:this._emissiveTexture?this._emissiveTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:11,resource:this._emissiveTexture?this._emissiveTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}Ve(wr,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n    ${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${Ke.GLSL_SystemUniforms_vertex.calcDisplacement}    \n    ${Ke.GLSL_SystemUniforms_vertex.meshUniforms}\n         \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out vec4 vVertexPosition;\t\n\tlayout( location = 3 ) out float vMouseColorID;\t\n\tlayout( location = 4 ) out float vSumOpacity;\n\tlayout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        float displacementFlowSpeedX;\n        float displacementFlowSpeedY;\n        float displacementPower;\n        float __displacementTextureRenderYn;\n    } vertexUniforms;\n\t\n\tlayout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 2 ) uniform texture2D uDisplacementTexture;\n\tvoid main() {\t\t\n\t\tvVertexPosition = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position, 1.0);\n\t\tvNormal = (meshMatrixUniforms.normalMatrix[ int(meshUniforms.index) ] * vec4(normal,1.0)).xyz;\n\t\tvUV = uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tif(vertexUniforms.__displacementTextureRenderYn == TRUTHY) vVertexPosition.xyz += calcDisplacement(vNormal, vertexUniforms.displacementFlowSpeedX, vertexUniforms.displacementFlowSpeedY, vertexUniforms.displacementPower, uv, uDisplacementTexture, uSampler);\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * vVertexPosition;\n\t\n\t\n\t}\n\t`),Ve(wr,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_fragment.systemUniforms}\n\t${Ke.GLSL_SystemUniforms_fragment.cotangent_frame}\n\t${Ke.GLSL_SystemUniforms_fragment.perturb_normal}\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform FragmentUniforms {\n        float normalPower;\n        float shininess; \n        float specularPower;\n\t    vec4 specularColor;\n\t    float emissivePower;\n\t    float alpha;\n\t    float useFlatMode;\n\t    //\n\t    float __diffuseTextureRenderYn;\n\t\tfloat __normalTextureRenderYn;\n\t\tfloat __specularTextureRenderYn;\n\t\tfloat __emissiveTextureRenderYn;\n    } fragmentUniforms;\n\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in vec4 vVertexPosition;\n\tlayout( location = 3 ) in float vMouseColorID;\t\n\tlayout( location = 4 ) in float vSumOpacity;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 4 ) uniform sampler uDiffuseSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 5 ) uniform texture2D uDiffuseTexture;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 6 ) uniform sampler uNormalSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 7 ) uniform texture2D uNormalTexture;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 8 ) uniform sampler uSpecularSampler;\t\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 9 ) uniform texture2D uSpecularTexture;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 10 ) uniform sampler uEmissiveSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 11 ) uniform texture2D uEmissiveTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\n\tvoid main() {\n\t\tfloat testAlpha = 0.0;\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor = texture(sampler2D(uDiffuseTexture, uDiffuseSampler), vUV) ;\n\t\t\n\t\t\n\t    vec3 N = normalize(vNormal);\n\t\tvec4 normalColor = vec4(0.0);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) normalColor = texture(sampler2D(uNormalTexture, uNormalSampler), vUV) ;\n\t\tif(fragmentUniforms.useFlatMode == TRUTHY) N = getFlatNormal(vVertexPosition.xyz);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) N = perturb_normal(N, vVertexPosition.xyz, vUV, normalColor.rgb, fragmentUniforms.normalPower) ;\n\t\n\t\ttestAlpha = diffuseColor.a;\n\t\n\t\tfloat specularTextureValue = 1.0;\n\t\tif(fragmentUniforms.__specularTextureRenderYn == TRUTHY) specularTextureValue = texture(sampler2D(uSpecularTexture, uSpecularSampler), vUV).r ;\n\t\t\n\t\tvec4 finalColor = \n\t\tcalcDirectionalLight(\n\t\t\tdiffuseColor,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.directionalLightCount,\n\t\t\tsystemUniforms.directionalLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue\n\t\t)\n\t\t+\n\t\tcalcPointLight(\n\t\t\tdiffuseColor,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.pointLightCount,\n\t\t\tsystemUniforms.pointLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue,\n\t\t\tvVertexPosition.xyz\n\t\t)\n\t\t+ la;\n\t\t\n\t\tif(fragmentUniforms.__emissiveTextureRenderYn == TRUTHY) {\n\t\t\tvec4 emissiveColor = texture(sampler2D(uEmissiveTexture, uEmissiveSampler), vUV);\n\t\t\tfinalColor.rgb += emissiveColor.rgb * fragmentUniforms.emissivePower;\n\t\t}\n\t\t\n\t\tfinalColor.a = testAlpha;\n\t\toutColor = finalColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve(wr,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(wr,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.VERTEX,type:"sampler"},{binding:2,visibility:GPUShaderStage.VERTEX,type:"sampled-texture"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:4,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:5,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:6,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:7,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:8,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:9,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:10,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:11,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"}]}),Ve(wr,"uniformBufferDescriptor_vertex",[{size:$e.float,valueName:"displacementFlowSpeedX"},{size:$e.float,valueName:"displacementFlowSpeedY"},{size:$e.float,valueName:"displacementPower"},{size:$e.float,valueName:"__displacementTextureRenderYn"}]),Ve(wr,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"normalPower"},{size:$e.float,valueName:"shininess"},{size:$e.float,valueName:"specularPower"},{size:$e.float4,valueName:"specularColorRGBA"},{size:$e.float,valueName:"emissivePower"},{size:$e.float,valueName:"alpha"},{size:$e.float,valueName:"useFlatMode"},{size:$e.float,valueName:"__diffuseTextureRenderYn"},{size:$e.float,valueName:"__normalTextureRenderYn"},{size:$e.float,valueName:"__specularTextureRenderYn"},{size:$e.float,valueName:"__emissiveTextureRenderYn"}]);class Gr extends(Mr.mix(mr,Mr.color,Mr.alpha)){constructor(t,e="#ff0000",r=1){super(t),this.color=e,this.colorAlpha=r,this.needResetBindingInfo=!0}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}}],this._afterResetBindingInfo()}}Ve(Gr,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n\t${Ke.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 0 ) out float vMouseColorID;\t\n\tlayout( location = 1 ) out float vSumOpacity;\n\tvoid main() {\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\n\t}\n\t`),Ve(Gr,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        vec4 color;\n        float alpha;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in float vMouseColorID;\n\tlayout( location = 1 ) in float vSumOpacity;\n\tlayout( location = 0 ) out vec4 outColor;\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\n\tvoid main() {\n\t\toutColor = fragmentUniforms.color;\n\t\toutColor.a *= vSumOpacity;\n\t\toutColor.a *= fragmentUniforms.alpha;\t\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n\t`),Ve(Gr,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Gr,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"}]}),Ve(Gr,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(Gr,"uniformBufferDescriptor_fragment",[{size:$e.float4,valueName:"colorRGBA"},{size:$e.float,valueName:"alpha"}]);class Br extends(Mr.mix(mr,Mr.color,Mr.alpha,Mr.basicLightPropertys)){constructor(t,e="#ff0000",r=1){super(t),this.color=e,this.colorAlpha=r,this.needResetBindingInfo=!0}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}}],this._afterResetBindingInfo()}}Ve(Br,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n\t${Ke.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec4 vVertexPosition;\n\tlayout( location = 2 ) out float vMouseColorID;\n\tlayout( location = 3 ) out float vSumOpacity;\n\tvoid main() {\n\t\tvVertexPosition = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\tvNormal = (meshMatrixUniforms.normalMatrix[ int(meshUniforms.index) ] * vec4(normal,1.0)).xyz;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * vVertexPosition;\n\t}\n\t`),Ve(Br,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        vec4 color;\n        float shininess; \n        float specularPower;\n\t    vec4 specularColor;\n        float alpha;\n        float useFlatMode;\n        //\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec4 vVertexPosition;\n\tlayout( location = 2 ) in float vMouseColorID;\t\n\tlayout( location = 3 ) in float vSumOpacity;\n\tlayout( location = 0 ) out vec4 outColor;\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tfloat testAlpha = fragmentUniforms.color.a * vSumOpacity;\n\n\t\tvec3 N = normalize(vNormal);\n\t\tif(fragmentUniforms.useFlatMode == TRUTHY) N = getFlatNormal(vVertexPosition.xyz);\n\t\t\n\t\tfloat specularTextureValue = 1.0;\n\t\t\n\t\tvec4 finalColor = \n\t\tcalcDirectionalLight(\n\t\t\tfragmentUniforms.color,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.directionalLightCount,\n\t\t\tsystemUniforms.directionalLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue\n\t\t)\n\t\t+\n\t    calcPointLight(\n\t\t\tfragmentUniforms.color,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.pointLightCount,\n\t\t\tsystemUniforms.pointLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue,\n\t\t\tvVertexPosition.xyz\n\t\t)\n\t\t+ la;\n\t\t\t\n\t\tfinalColor.a = testAlpha;\n\t\toutColor = finalColor;\n\t\toutColor.a *= fragmentUniforms.alpha;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve(Br,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Br,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"}]}),Ve(Br,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(Br,"uniformBufferDescriptor_fragment",[{size:$e.float4,valueName:"colorRGBA"},{size:$e.float,valueName:"shininess"},{size:$e.float,valueName:"specularPower"},{size:$e.float4,valueName:"specularColorRGBA"},{size:$e.float,valueName:"alpha"},{size:$e.float,valueName:"useFlatMode"}]);let Er=new Float32Array(1);var Cr=new WeakMap;class Lr extends(Mr.mix(mr,Mr.color,Mr.alpha,Mr.normalTexture,Mr.specularTexture,Mr.emissiveTexture,Mr.displacementTexture,Mr.basicLightPropertys)){constructor(t,e="#ff0000",r=1,n,i,o,a){super(t),Cr.set(this,{writable:!0,value:void 0}),this.color=e,this.colorAlpha=r,this.normalTexture=n,this.specularTexture=i,this.emissiveTexture=o,this.displacementTexture=a,this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"normalTexture":this._normalTexture=t,r=e;break;case"specularTexture":this._specularTexture=t,r=e;break;case"emissiveTexture":this._emissiveTexture=t,r=e;break;case"displacementTexture":this._displacementTexture=t,r=e}r&&(Er[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],Er):this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],Er)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,Er[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],Er):this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],Er),this.needResetBindingInfo=!0)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:this._displacementTexture?this._displacementTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:2,resource:this._displacementTexture?this._displacementTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:3,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:4,resource:this._normalTexture?this._normalTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:5,resource:this._normalTexture?this._normalTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:6,resource:this._specularTexture?this._specularTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:7,resource:this._specularTexture?this._specularTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:8,resource:this._emissiveTexture?this._emissiveTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:9,resource:this._emissiveTexture?this._emissiveTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}Ve(Lr,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${Ke.GLSL_SystemUniforms_vertex.calcDisplacement}    \n    ${Ke.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out vec4 vVertexPosition;\n\tlayout( location = 3 ) out float vMouseColorID;\t\n\tlayout( location = 4 ) out float vSumOpacity;\n\tlayout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        float displacementFlowSpeedX;\n        float displacementFlowSpeedY;\n        float displacementPower;\n        float __displacementTextureRenderYn;\n    } vertexUniforms;\n    \n    layout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 2) uniform texture2D uDisplacementTexture;\n\tvoid main() {\n\t\tvVertexPosition = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\tvNormal = (meshMatrixUniforms.normalMatrix[ int(meshUniforms.index) ] * vec4(normal,1.0)).xyz;\n\t\tvUV = uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tif(vertexUniforms.__displacementTextureRenderYn == TRUTHY)  vVertexPosition.xyz += calcDisplacement(vNormal, vertexUniforms.displacementFlowSpeedX, vertexUniforms.displacementFlowSpeedY, vertexUniforms.displacementPower, uv, uDisplacementTexture, uSampler);\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * vVertexPosition;\n\t}\n\t`),Ve(Lr,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_fragment.systemUniforms}\n\t${Ke.GLSL_SystemUniforms_fragment.cotangent_frame}\n\t${Ke.GLSL_SystemUniforms_fragment.perturb_normal}\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform FragmentUniforms {\n        vec4 color;\n        float normalPower;\n        float shininess; \n        float specularPower;\n\t    vec4 specularColor;\n\t    float emissivePower;\n\t    float alpha;\n\t    float useFlatMode;\n\t    //\n\t\tfloat __normalTextureRenderYn;\n\t\tfloat __specularTextureRenderYn;\n\t\tfloat __emissiveTextureRenderYn;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in vec4 vVertexPosition;\n\tlayout( location = 3 ) in float vMouseColorID;\t\n\tlayout( location = 4 ) in float vSumOpacity;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 4 ) uniform sampler uNormalSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 5 ) uniform texture2D uNormalTexture;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 6 ) uniform sampler uSpecularSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 7 ) uniform texture2D uSpecularTexture;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 8 ) uniform sampler uEmissiveSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 9 ) uniform texture2D uEmissiveTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\t\n\tvoid main() {\n\t\tfloat testAlpha = fragmentUniforms.color.a * vSumOpacity;\n\t\t\n\t\tvec3 N = normalize(vNormal);\n\t\tvec4 normalColor = vec4(0.0);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) normalColor = texture(sampler2D(uNormalTexture, uNormalSampler), vUV) ;\n\t\tif(fragmentUniforms.useFlatMode == TRUTHY) N = getFlatNormal(vVertexPosition.xyz);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) N = perturb_normal(N, vVertexPosition.xyz, vUV, normalColor.rgb, fragmentUniforms.normalPower) ;\n\t\t\n\t\tfloat specularTextureValue = 1.0;\n\t\tif(fragmentUniforms.__specularTextureRenderYn == TRUTHY) specularTextureValue = texture(sampler2D(uSpecularTexture, uSpecularSampler), vUV).r ;\n\t\t\n\t\tvec4 finalColor = \n\t\tcalcDirectionalLight(\n\t\t\tfragmentUniforms.color,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.directionalLightCount,\n\t\t\tsystemUniforms.directionalLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue\n\t\t)\n\t    +\n\t    calcPointLight(\n\t\t\tfragmentUniforms.color,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.pointLightCount,\n\t\t\tsystemUniforms.pointLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue,\n\t\t\tvVertexPosition.xyz\n\t\t)\n\t\t+ la;\n\n\t\tif(fragmentUniforms.__emissiveTextureRenderYn == TRUTHY) {\n\t\t\tvec4 emissiveColor = texture(sampler2D(uEmissiveTexture, uEmissiveSampler), vUV);\n\t\t\tfinalColor.rgb += emissiveColor.rgb * fragmentUniforms.emissivePower;\n\t\t}\n\t\t\n\t\tfinalColor.a = testAlpha;\n\t\toutColor = finalColor;\n\t\toutColor.a *= fragmentUniforms.alpha;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve(Lr,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Lr,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.VERTEX,type:"sampler"},{binding:2,visibility:GPUShaderStage.VERTEX,type:"sampled-texture"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:4,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:5,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:6,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:7,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:8,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:9,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"}]}),Ve(Lr,"uniformBufferDescriptor_vertex",[{size:$e.float,valueName:"displacementFlowSpeedX"},{size:$e.float,valueName:"displacementFlowSpeedY"},{size:$e.float,valueName:"displacementPower"},{size:$e.float,valueName:"__displacementTextureRenderYn"}]),Ve(Lr,"uniformBufferDescriptor_fragment",[{size:$e.float4,valueName:"colorRGBA"},{size:$e.float,valueName:"normalPower"},{size:$e.float,valueName:"shininess"},{size:$e.float,valueName:"specularPower"},{size:$e.float4,valueName:"specularColorRGBA"},{size:$e.float,valueName:"emissivePower"},{size:$e.float,valueName:"alpha"},{size:$e.float,valueName:"useFlatMode"},{size:$e.float,valueName:"__normalTextureRenderYn"},{size:$e.float,valueName:"__specularTextureRenderYn"},{size:$e.float,valueName:"__emissiveTextureRenderYn"}]);let Rr=new Float32Array(1);var Dr=new WeakMap;class Ir extends(Mr.mix(mr,Mr.diffuseTexture,Mr.normalTexture,Mr.specularTexture,Mr.emissiveTexture,Mr.environmentTexture,Mr.displacementTexture,Mr.basicLightPropertys,Mr.alpha)){constructor(t,e,r,n,i,o,a){super(t),Dr.set(this,{writable:!0,value:void 0}),this.diffuseTexture=e,this.environmentTexture=r,this.normalTexture=n,this.emissiveTexture=o,this.specularTexture=i,this.displacementTexture=a,this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"diffuseTexture":this._diffuseTexture=t,r=e;break;case"normalTexture":this._normalTexture=t,r=e;break;case"specularTexture":this._specularTexture=t,r=e;break;case"emissiveTexture":this._emissiveTexture=t,r=e;break;case"environmentTexture":this._environmentTexture=t,r=e;break;case"displacementTexture":this._displacementTexture=t,r=e}r&&(Rr[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],Rr):this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],Rr)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,Rr[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],Rr):this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],Rr),this.needResetBindingInfo=!0)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:this._displacementTexture?this._displacementTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:2,resource:this._displacementTexture?this._displacementTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:3,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:4,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:5,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:6,resource:this._normalTexture?this._normalTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:7,resource:this._normalTexture?this._normalTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:8,resource:this._specularTexture?this._specularTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:9,resource:this._specularTexture?this._specularTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:10,resource:this._emissiveTexture?this._emissiveTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:11,resource:this._emissiveTexture?this._emissiveTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:12,resource:this._environmentTexture?this._environmentTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:13,resource:this._environmentTexture?this._environmentTexture._GPUTextureView:this.redGPUContext.state.emptyCubeTextureView}],this._afterResetBindingInfo()}}Ve(Ir,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n    ${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${Ke.GLSL_SystemUniforms_vertex.calcDisplacement}    \n    ${Ke.GLSL_SystemUniforms_vertex.meshUniforms}\n         \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out vec4 vVertexPosition;\t\n\tlayout( location = 3 ) out float vMouseColorID;\t\n\tlayout( location = 4 ) out float vSumOpacity;\n\tlayout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        float displacementFlowSpeedX;\n        float displacementFlowSpeedY;\n        float displacementPower;        \n\t\tfloat __displacementTextureRenderYn;\n    } vertexUniforms;\n\t\n\tlayout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 1 ) uniform sampler uDisplacementSampler;\n\tlayout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 2 ) uniform texture2D uDisplacementTexture;\n\tvoid main() {\t\t\n\t\tvVertexPosition = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position, 1.0);\n\t\tvNormal = (meshMatrixUniforms.normalMatrix[ int(meshUniforms.index) ] * vec4(normal,1.0)).xyz;\n\t\tvUV = uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tif(vertexUniforms.__displacementTextureRenderYn == TRUTHY) vVertexPosition.xyz += calcDisplacement(vNormal, vertexUniforms.displacementFlowSpeedX, vertexUniforms.displacementFlowSpeedY, vertexUniforms.displacementPower, uv, uDisplacementTexture, uDisplacementSampler);\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * vVertexPosition;\n\t\n\t\n\t}\n\t`),Ve(Ir,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_fragment.systemUniforms}\n\t${Ke.GLSL_SystemUniforms_fragment.cotangent_frame}\n\t${Ke.GLSL_SystemUniforms_fragment.perturb_normal}\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform FragmentUniforms {\n        float normalPower;\n        float shininess; \n        float specularPower;\n\t    vec4 specularColor;\n\t    float emissivePower;\n\t    float environmentPower;\n\t    float alpha;\n\t    float useFlatMode;\n\t    //\n\t    float __diffuseTextureRenderYn;\n\t\tfloat __environmentTextureRenderYn;\n\t\tfloat __normalTextureRenderYn;\n\t\tfloat __specularTextureRenderYn;\n\t\tfloat __emissiveTextureRenderYn;\n    } fragmentUniforms;\n\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in vec4 vVertexPosition;\n\tlayout( location = 3 ) in float vMouseColorID;\n\tlayout( location = 4 ) in float vSumOpacity;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 4 ) uniform sampler uDiffuseSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 5 ) uniform texture2D uDiffuseTexture;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 6 ) uniform sampler uNormalSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 7 ) uniform texture2D uNormalTexture;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 8 ) uniform sampler uSpecularSampler;\t\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 9 ) uniform texture2D uSpecularTexture;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 10 ) uniform sampler uEmissiveSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 11 ) uniform texture2D uEmissiveTexture;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 12 ) uniform sampler uEnvironmentSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 13 ) uniform textureCube uEnvironmentTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tfloat testAlpha = 0.0;\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor = texture(sampler2D(uDiffuseTexture, uDiffuseSampler), vUV) ;\n\t\t\n\t\t\n\t    vec3 N = normalize(vNormal);\n\t\tvec4 normalColor = vec4(0.0);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) normalColor = texture(sampler2D(uNormalTexture, uNormalSampler), vUV) ;\n\t\tif(fragmentUniforms.useFlatMode == TRUTHY) N = getFlatNormal(vVertexPosition.xyz);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) N = perturb_normal(N, vVertexPosition.xyz, vUV, normalColor.rgb, fragmentUniforms.normalPower) ;\n\t\n\t\tif(fragmentUniforms.__environmentTextureRenderYn == TRUTHY) {\n\t\t\tvec3 R = reflect( vVertexPosition.xyz - systemUniforms.cameraPosition, N);\n\t\t\tvec4 reflectionColor = texture(samplerCube(uEnvironmentTexture,uEnvironmentSampler), R);\n\t\t\tdiffuseColor = mix(diffuseColor, reflectionColor, fragmentUniforms.environmentPower);\n\t\t}\n\t\t\n\t\ttestAlpha = diffuseColor.a ;\n\t\t\n\t\tfloat specularTextureValue = 1.0;\n\t\tif(fragmentUniforms.__specularTextureRenderYn == TRUTHY) specularTextureValue = texture(sampler2D(uSpecularTexture, uSpecularSampler), vUV).r ;\n\t\t\n\t\tvec4 finalColor = \n\t\tcalcDirectionalLight(\n\t\t\tdiffuseColor,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.directionalLightCount,\n\t\t\tsystemUniforms.directionalLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue\n\t\t)\n\t\t+\n\t\tcalcPointLight(\n\t\t\tdiffuseColor,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.pointLightCount,\n\t\t\tsystemUniforms.pointLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue,\n\t\t\tvVertexPosition.xyz\n\t\t)\n\t\t+ la;\n\t\t\n\t\tif(fragmentUniforms.__emissiveTextureRenderYn == TRUTHY) {\n\t\t\tvec4 emissiveColor = texture(sampler2D(uEmissiveTexture, uEmissiveSampler), vUV);\n\t\t\tfinalColor.rgb += emissiveColor.rgb * fragmentUniforms.emissivePower;\n\t\t}\n\t\t\n\t\t\n\t\tfinalColor.a = testAlpha;\n\t\toutColor = finalColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve(Ir,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Ir,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.VERTEX,type:"sampler"},{binding:2,visibility:GPUShaderStage.VERTEX,type:"sampled-texture"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:4,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:5,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:6,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:7,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:8,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:9,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:10,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:11,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:12,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:13,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture",viewDimension:"cube"}]}),Ve(Ir,"uniformBufferDescriptor_vertex",[{size:$e.float,valueName:"displacementFlowSpeedX"},{size:$e.float,valueName:"displacementFlowSpeedY"},{size:$e.float,valueName:"displacementPower"},{size:$e.float,valueName:"__displacementTextureRenderYn"}]),Ve(Ir,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"normalPower"},{size:$e.float,valueName:"shininess"},{size:$e.float,valueName:"specularPower"},{size:$e.float4,valueName:"specularColorRGBA"},{size:$e.float,valueName:"emissivePower"},{size:$e.float,valueName:"environmentPower"},{size:$e.float,valueName:"alpha"},{size:$e.float,valueName:"useFlatMode"},{size:$e.float,valueName:"__diffuseTextureRenderYn"},{size:$e.float,valueName:"__environmentTextureRenderYn"},{size:$e.float,valueName:"__normalTextureRenderYn"},{size:$e.float,valueName:"__specularTextureRenderYn"},{size:$e.float,valueName:"__emissiveTextureRenderYn"}]);let Nr=new Float32Array(1);class Fr extends(Mr.mix(mr,Mr.diffuseTexture,Mr.alpha)){constructor(t,e){super(t),this.diffuseTexture=e,this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"diffuseTexture":this._diffuseTexture=t,r=e}r&&(Nr[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],Nr):this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],Nr)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,Nr[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],Nr):this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],Nr),this.needResetBindingInfo=!0)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:1,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:2,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}Ve(Fr,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${Ke.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out float vMouseColorID;\t\n\tlayout( location = 3 ) out float vSumOpacity;\n\tvoid main() {\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t}\n\t`),Ve(Fr,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\tconst float TRUTHY = 1.0;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in float vMouseColorID;\t\n\tlayout( location = 3 ) in float vSumOpacity;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float alpha;\n        //\n        float __diffuseTextureRenderYn;\n    } fragmentUniforms;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uDiffuseTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor = texture(sampler2D(uDiffuseTexture, uSampler), vUV) ;\n\t\toutColor = diffuseColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve(Fr,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Fr,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:2,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"}]}),Ve(Fr,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(Fr,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"alpha"},{size:$e.float,valueName:"__diffuseTextureRenderYn"}]);class Ar extends mr{constructor(t){super(t),this.needResetBindingInfo=!0}resetBindingInfo(){this.entries=[],this._afterResetBindingInfo()}}Ve(Ar,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${Ke.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec4 color;\n\tlayout( location = 0 ) out vec4 vColor;\n\n\tvoid main() {\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\tvColor = color;\n\t}\n\t`),Ve(Ar,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\tlayout( location = 0 ) in vec4 vColor;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tvoid main() {\n\t\toutColor = vColor;\n\t\t\n\t}\n\t`),Ve(Ar,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Ar,"uniformsBindGroupLayoutDescriptor_material",{entries:[]}),Ve(Ar,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(Ar,"uniformBufferDescriptor_fragment",mr.uniformBufferDescriptor_empty);class Vr extends(Mr.mix(mr)){set skyBoxTexture(t){this.checkTexture(t,"skyBoxTexture")}get skyBoxTexture(){return this._skyBoxTexture}constructor(t,e){super(t),Ve(this,"_skyBoxTexture",void 0),this.skyBoxTexture=e,this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){switch(e){case"skyBoxTexture":this._skyBoxTexture=t}this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,this.needResetBindingInfo=!0)}resetBindingInfo(){this.entries=[{binding:0,resource:this._skyBoxTexture?this._skyBoxTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:1,resource:this._skyBoxTexture?this._skyBoxTexture._GPUTextureView:this.redGPUContext.state.emptyCubeTextureView}],this._afterResetBindingInfo()}}Ve(Vr,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${Ke.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 0 ) out vec3 vReflectionCubeCoord;\n\tvoid main() {\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\tvReflectionCubeCoord = (meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] *vec4(position, 0.0)).xyz;\n\t}\n\t`),Ve(Vr,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\tlayout( location = 0 ) in vec3 vReflectionCubeCoord;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 0) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1) uniform textureCube uSkyBoxTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\t//#RedGPU#skyBoxTexture# diffuseColor = texture(samplerCube(uSkyBoxTexture,uSampler), vReflectionCubeCoord) ;\n\t\toutColor = diffuseColor;\n\t\t\n\t}\n`),Ve(Vr,"PROGRAM_OPTION_LIST",{vertex:[],fragment:["skyBoxTexture"]}),Ve(Vr,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:1,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture",viewDimension:"cube"}]}),Ve(Vr,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(Vr,"uniformBufferDescriptor_fragment",mr.uniformBufferDescriptor_empty);class Or extends(Mr.mix(mr,Mr.alpha)){constructor(t){super(t),this.needResetBindingInfo=!0}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}}],this._afterResetBindingInfo()}}Ve(Or,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n\t${Ke.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec4 color;\n\tlayout( location = 0 ) out float vMouseColorID;\n\tlayout( location = 1 ) out vec4 vColor;\t\t\n\tlayout( location = 2 ) out float vSumOpacity;\n\tvoid main() {\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvColor = color;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\n\t}\n\t`),Ve(Or,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n         float alpha;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in float vMouseColorID;\n\tlayout( location = 1 ) in vec4 vColor;\t\t\t\n\tlayout( location = 2 ) in float vSumOpacity;\n\tlayout( location = 0 ) out vec4 outColor;\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\toutColor = vColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n\t`),Ve(Or,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Or,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"}]}),Ve(Or,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(Or,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"alpha"}]);let Yr=new Float32Array(1);var Xr=new WeakMap,zr=new WeakMap;class $r extends(Mr.mix(mr,Mr.diffuseTexture,Mr.alpha)){get width(){return this._width}set width(t){this._width=t,Yr[0]=this._width,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap.width,Yr)}get height(){return this._height}set height(t){this._height=t,Yr[0]=this._height,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap.height,Yr)}constructor(t,e){super(t),Xr.set(this,{writable:!0,value:!1}),zr.set(this,{writable:!0,value:!1}),Ve(this,"_width",256),Ve(this,"_height",256),this.diffuseTexture=e,this.needResetBindingInfo=!0}get useFixedScale(){return Oe(this,Xr)}set useFixedScale(t){Ye(this,Xr,t),this.needResetBindingInfo=!0}get useSprite3DMode(){return Oe(this,zr)}set useSprite3DMode(t){Ye(this,zr,t),this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){switch(e){case"diffuseTexture":this._diffuseTexture=t}this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,this.needResetBindingInfo=!0)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:2,resource:this.redGPUContext.state.emptySampler.GPUSampler},{binding:3,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}Ve($r,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${Ke.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        float width;\n        float height;\n    } vertexUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out float vMouseColorID;\t\n\tlayout( location = 3 ) out float vSumOpacity;\n    ${Ke.GLSL_SystemUniforms_vertex.getSprite3DMatrix}\t\n\tvoid main() {\n\t\tfloat w = vertexUniforms.width ;\n\t\tfloat h = vertexUniforms.height ;\n\t\tmat4 modelMatrix = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ];\n\t\tmat4 targetMatrix;\n\t\t\n\t\t// 기본\n\t\ttargetMatrix = modelMatrix * mat4( w / max( w, h ), 0.0, 0.0, 0.0,   0.0, h / max( w, h ), 0.0, 0.0,    0.0, 0.0, 1.0, 0.0,    0.0, 0.0, 0.0, 1.0 );\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * targetMatrix * vec4(position,1.0);\t\t\t\t\n\t\t\n\t\t// sprite3D\n\t\t//#RedGPU#useSprite3DMode#  targetMatrix = modelMatrix * mat4( w / systemUniforms.resolution.y, 0.0, 0.0, 0.0,    0.0, h / systemUniforms.resolution.y, 0.0, 0.0,    0.0, 0.0, 1.0, 0.0,    0.0, 0.0, 0.0, 1.0);\n\t\t//#RedGPU#useSprite3DMode#  gl_Position = systemUniforms.perspectiveMTX * getSprite3DMatrix( systemUniforms.cameraMTX, targetMatrix ) * vec4(position,1.0);\t\n\t\t\t\n\t\t\n\t\t//#RedGPU#useSprite3DMode#  //#RedGPU#useFixedScale#  gl_Position /= gl_Position.w;\n\t\t//#RedGPU#useSprite3DMode#  //#RedGPU#useFixedScale#  gl_Position.xy += position.xy * vec2((systemUniforms.perspectiveMTX * targetMatrix)[0][0],(systemUniforms.perspectiveMTX * targetMatrix)[1][1]);\n\t\n\t\t\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t}\n\t`),Ve($r,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in float vMouseColorID;\t\n\tlayout( location = 3 ) in float vSumOpacity;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform FragmentUniforms {\n        float alpha;\n    } fragmentUniforms;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform texture2D uDiffuseTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\t//#RedGPU#diffuseTexture# diffuseColor = texture(sampler2D(uDiffuseTexture, uSampler), vUV) ;\n\t\t// if(diffuseColor.a < 0.05) discard;\n\t\toutColor = diffuseColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve($r,"PROGRAM_OPTION_LIST",{vertex:["useFixedScale","useSprite3DMode"],fragment:["diffuseTexture"]}),Ve($r,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:2,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"}]}),Ve($r,"uniformBufferDescriptor_vertex",[{size:$e.float,valueName:"width"},{size:$e.float,valueName:"height"}]),Ve($r,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"alpha"}]);let kr=new Float32Array(1);var Wr=new WeakMap,Zr=new WeakMap,Qr=new WeakMap;class Hr extends(Mr.mix(mr,Mr.alpha,Mr.diffuseTexture)){get frameRate(){return Oe(this,Wr)}set frameRate(t){t<1&&Ye(this,Wr,1),Ye(this,Wr,t),this._perFrameTime=1e3/Oe(this,Wr)}constructor(t,e){super(t),Wr.set(this,{writable:!0,value:void 0}),Zr.set(this,{writable:!0,value:0}),Qr.set(this,{writable:!0,value:{}}),e&&(this.addAction("default",e),this.setAction("default")),this.needResetBindingInfo=!0,this.sheetRect=new Float32Array(4),this.currentIndex=0,this.loop=!0,this._playYn=!0}update(t){if(Oe(this,Zr)||Ye(this,Zr,this._perFrameTime+t),this._playYn&&Oe(this,Zr)<t){let e=parseInt((t-Oe(this,Zr))/this._perFrameTime);e=e||1,Ye(this,Zr,this._perFrameTime+t),this.currentIndex+=e,this.currentIndex>=this.totalFrame&&(this.loop?(this._playYn=!0,this.currentIndex=0):(this._playYn=!1,this.currentIndex=this.totalFrame-1))}this.sheetRect[0]=1/this.segmentW,this.sheetRect[1]=1/this.segmentH,this.sheetRect[2]=this.currentIndex%this.segmentW/this.segmentW,this.sheetRect[3]=Math.floor(this.currentIndex/this.segmentH)/this.segmentH,this.uniformBuffer_vertex&&this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap.sheetRect,this.sheetRect)}addAction(t,e){Oe(this,Qr)[t]=e}removeAction(t,e){delete Oe(this,Qr)[t]}setAction(t){this.diffuseTexture=Oe(this,Qr)[t].texture,this.segmentW=Oe(this,Qr)[t].segmentW,this.segmentH=Oe(this,Qr)[t].segmentH,this.totalFrame=Oe(this,Qr)[t].totalFrame,this.frameRate=Oe(this,Qr)[t].frameRate,this.currentIndex=0,Ye(this,Zr,0)}play(){this._playYn=!0,Ye(this,Zr,0)}pause(){this._playYn=!1}stop(){this._playYn=!1,this.currentIndex=0}gotoAndStop(t){t>this.totalFrame-1&&(t=this.totalFrame-1),t<0&&(t=0),this._playYn=!1,this.currentIndex=t}gotoAndPlay(t){t>this.totalFrame-1&&(t=this.totalFrame-1),t<0&&(t=0),this._playYn=!0,this.currentIndex=t,Ye(this,Zr,0)}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"diffuseTexture":this._diffuseTexture=t,r=e}r&&(kr[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],kr):this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],kr)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,kr[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],kr):this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],kr),this.needResetBindingInfo=!0)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:2,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:3,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}Ve(Hr,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${Ke.GLSL_SystemUniforms_vertex.meshUniforms}\n    layout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        vec4 sheetRect;\n    } vertexUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out float vMouseColorID;\n\tlayout( location = 3 ) out float vSumOpacity;\t\n\tvoid main() {\n\t\tvUV = uv;\n\t\tvUV = vec2(\n\t\t\tvUV.s * vertexUniforms.sheetRect.x + vertexUniforms.sheetRect.z,\n\t\t\tvUV.t * vertexUniforms.sheetRect.y -vertexUniforms.sheetRect.w\n\t\t);\t\n\t\tvSumOpacity = meshUniforms.sumOpacity;\t\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\tvNormal = normal;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\n\t}\n\t`),Ve(Hr,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\tconst float TRUTHY = 1.0;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in float vMouseColorID;\t\n\tlayout( location = 3 ) in float vSumOpacity;\t\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform FragmentUniforms {\n        float alpha;\n        //\n        float __diffuseTextureRenderYn;\n    } fragmentUniforms;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform texture2D uDiffuseTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor = texture(sampler2D(uDiffuseTexture, uSampler), vUV) ;\n\t\t\n\t\tif(diffuseColor.a<0.05) discard;\n\t\t\t\n\t\toutColor = diffuseColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve(Hr,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Hr,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:2,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"}]}),Ve(Hr,"uniformBufferDescriptor_vertex",[{size:$e.float4,valueName:"sheetRect"}]),Ve(Hr,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"alpha"},{size:$e.float,valueName:"__diffuseTextureRenderYn"}]);const qr={};class jr{constructor(t,e={}){if(e={magFilter:e.magFilter||"linear",minFilter:e.minFilter||"linear",mipmapFilter:e.mipmapFilter||"linear",addressModeU:e.addressModeU||"repeat",addressModeV:e.addressModeV||"repeat",addressModeW:e.addressModeW||"repeat"},this.string=JSON.stringify(e),qr[this.string])return qr[this.string];this.GPUSampler=t.device.createSampler(e),qr[this.string]=this}}let Jr,Kr,tn=new Set;var en=new WeakMap,rn=new WeakMap,nn=new WeakMap;class on{get detector(){return Oe(this,nn)}constructor(t,e){en.set(this,{writable:!0,value:0}),rn.set(this,{writable:!0,value:0}),nn.set(this,{writable:!0,value:void 0}),Ve(this,"viewList",[]),new Promise(async t=>{Kr?(Kr.compileGLSL(` ${Ke.GLSL_VERSION}\nvoid main(){} `,"vertex"),Kr.compileGLSL(` ${Ke.GLSL_VERSION}\nvoid main(){} `,"fragment"),t()):(Jr=await import("https://unpkg.com/@webgpu/glslang@0.0.15/dist/web-devel/glslang.js"),Kr=await Jr.default(),Kr.compileGLSL(` ${Ke.GLSL_VERSION}\nvoid main(){} `,"vertex"),Kr.compileGLSL(` ${Ke.GLSL_VERSION}\nvoid main(){} `,"fragment"),t())}).then(r=>{Ye(this,nn,new Je(this));let n=!0;navigator.gpu?navigator.gpu.requestAdapter({powerPreference:"high-performance"}).then(r=>{r.requestDevice({}).then(r=>{this.glslang=Kr,this.canvas=t,this.context=t.getContext("gpupresent"),this.device=r,this.swapChainFormat="bgra8unorm",this.swapChain=function(t,e,r){const n={device:t,format:e,usage:GPUTextureUsage.OUTPUT_ATTACHMENT|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC};return r.configureSwapChain(n)}(this.device,this.swapChainFormat,this.context),this.state={Geometry:new Map,Buffer:{vertexBuffer:new Map,indexBuffer:new Map},emptySampler:new jr(this),emptyTextureView:r.createTexture({size:{width:1,height:1,depth:1},format:"r8unorm",usage:GPUTextureUsage.SAMPLED}).createView(),emptyCubeTextureView:r.createTexture({size:{width:1,height:1,depth:6},dimension:"2d",mipLevelCount:1,sampleCount:1,format:"r8unorm",usage:GPUTextureUsage.SAMPLED}).createView({format:"r8unorm",dimension:"cube",aspect:"all",baseMipLevel:0,mipLevelCount:1,baseArrayLayer:0,arrayLayerCount:6})},[Oe(this,nn).click,Oe(this,nn).move,Oe(this,nn).down,Oe(this,nn).up].forEach(t=>{let e,r,n,i;e="offsetX",r="offsetY",this.canvas.addEventListener(t,t=>{let e,r,o;for(t.preventDefault(),Oe(this,nn).isMobile?t.changedTouches[0]&&(e={type:t.type,x:t.changedTouches[0].clientX,y:t.changedTouches[0].clientY,nativeEvent:t},n=t.changedTouches[0].clientX,i=t.changedTouches[0].clientY):(e={type:t.type,x:t.offsetX,y:t.offsetY,nativeEvent:t},n=t.offsetX,i=t.offsetY),r=this.viewList.length;r--;)o=this.viewList[r],o.mouseEventChecker.mouseEventInfo.push(e),o.mouseX=n-o.viewRect[0],o.mouseY=i-o.viewRect[1]},!1)}),Oe(this,nn).detectGPU(),this.setSize("100%","100%"),tn.size||window.addEventListener("resize",t=>{for(const t of tn)t.setSize()}),tn.add(this),e.call(this,!0),new Br(this),new Gr(this),new Ar(this),new Vr(this),new wr(this),new Fr(this),new Ir(this),new Lr(this),new Or(this),new $r(this),new Hr(this)})}).catch(t=>{n=!1,e(!1,t)}):e(n=!1,"navigate.gpu is null")})}addView(t){this.viewList.push(t),t.resetTexture(this)}removeView(t){this.viewList.includes(t)&&this.viewList.splice(t,1)}setSize(t=Oe(this,en),e=Oe(this,rn)){let r,n;Ye(this,en,t),Ye(this,rn,e);let i=document.body.getBoundingClientRect();i.height=window.innerHeight,r="number"!=typeof t&&t.includes("%")?parseInt(+i.width*t.replace("%","")/100):t,n="number"!=typeof e&&e.includes("%")?parseInt(+i.height*e.replace("%","")/100):e,r<1&&(r=1),n<1&&(n=1),this.canvas.width=r,this.canvas.height=n,this.canvas.style.width=r+"px",this.canvas.style.height=n+"px",this.viewList.forEach(t=>{t.setSize(),t.setLocation()})}}Ve(on,"useDebugConsole",!1);class an extends ze{constructor(t){super(),Ve(this,"redGPUContext",void 0),Ve(this,"GPUBuffer",void 0),Ve(this,"uniformBufferDescriptor",void 0),t instanceof on||He.throwFunc(`${this.constructor.name} - only allow redGPUContext Instance.- inputValue : ${t} { type : ${typeof t} }`),this.redGPUContext=t}setBuffer(t){t instanceof qe||He.throwFunc(`${this.constructor.name} - only allow UniformBufferDescriptor Instance.- inputValue : ${t} { type : ${typeof t} }`),this.GPUBuffer&&this.GPUBuffer.destroy(),this.GPUBuffer=this.redGPUContext.device.createBuffer(t),this.float32Array=new Float32Array(t.size/Float32Array.BYTES_PER_ELEMENT),this.uniformBufferDescriptor=t}}class sn extends ze{get children(){return this._children}set children(t){this._children=t}constructor(){super(),Ve(this,"_children",[]),Ve(this,"_parent",void 0)}addChild(...t){t.forEach(t=>{t instanceof On||He.throwFunc(`addChild - only allow BaseObject3D Instance. - inputValue : ${t} { type : ${typeof t} }`),this._children.includes(t)?He.throwFunc(`${t} : Already registered object. - inputValue : ${t} { type : ${typeof t} }`):(t._parent=this.directionalLightList?null:this,this._children.push(t))}),sn.needFlatListUpdate=!0}addChildAt(t,e){t instanceof On||He.throwFunc(`addChildAt - only allow BaseObject3D Instance. - inputValue : ${t}, ${e} { type : ${typeof t}, ${typeof e} }`),this._children.includes(t)&&this.removeChild(t),this._children.length<e&&(e=this._children.length),null!=e?this._children.splice(e,0,t):(t._parent=this.directionalLightList?null:this,this._children.push(t)),sn.needFlatListUpdate=!0}removeChild(t){this._children.includes(t)?(t._parent=null,this._children.splice(this._children.indexOf(t),1)):He.throwFunc(`removeChild - Attempt to delete an object that does not exist. - inputValue : ${t} { type : ${typeof t} }`),sn.needFlatListUpdate=!0}removeChildAt(t){this._children[t]?(this._children[t]._parent=null,this._children.splice(t,1)):He.throwFunc(`removeChildAt - No object at index. - inputValue : ${t} { type : ${typeof t} }`),sn.needFlatListUpdate=!0}removeChildAll(){let t=this._children.length;for(;t--;)this._children[t]._parent=null;this._children.length=0,sn.needFlatListUpdate=!0}getChildAt(t){return this._children[t]}getChildIndex(t){this._children.indexOf(t)}numChildren(){return this._children.length}}var un=new WeakMap;class ln extends ze{constructor(t,e){super(),Ve(this,"redGPUContext",void 0),un.set(this,{writable:!0,value:void 0}),Ve(this,"GPURenderPipeline",void 0),this.redGPUContext=t,Ye(this,un,e),this.GPURenderPipeline=null}update(t,e){let r=Oe(this,un);const n=t.device,i={layout:n.createPipelineLayout({bindGroupLayouts:[e.systemUniformInfo_vertex.GPUBindGroupLayout,e.systemUniformInfo_fragment.GPUBindGroupLayout,r.GPUBindGroupLayout,r._material.GPUBindGroupLayout]}),vertexStage:{module:r._material.vShaderModule.GPUShaderModule,entryPoint:"main"},fragmentStage:{module:r._material.fShaderModule.GPUShaderModule,entryPoint:"main"},vertexState:r._geometry.vertexState,colorStates:[{format:t.swapChainFormat,colorBlend:{srcFactor:r._blendColorSrc,dstFactor:r._blendColorDst,operation:"add"},alphaBlend:{srcFactor:r._blendAlphaSrc,dstFactor:r._blendAlphaDst,operation:"add"}},{format:"rgba32float"}],rasterizationState:{frontFace:"ccw",cullMode:r._cullMode},primitiveTopology:r._primitiveTopology,depthStencilState:{format:"depth24plus-stencil8",depthWriteEnabled:r._depthWriteEnabled,depthCompare:r._depthCompare},sampleCount:4};this.GPURenderPipeline=n.createRenderPipeline(i)}}var fn=new WeakMap;class mn{constructor(t){fn.set(this,{writable:!0,value:[]})}get effectList(){return Oe(this,fn)}addEffect(t){Oe(this,fn).push(t)}removeEffect(t){Oe(this,fn).includes(t)?Oe(this,fn).splice(Oe(this,fn).indexOf(t),1):He.throwFunc(`removeEffect - Attempt to delete an object that does not exist. - inputValue : ${t} { type : ${typeof t} }`)}}let cn=function(t){if(t.length){let e=t.shift();e.info[e.type].call(e.info.target,{target:e.info.target,type:"out"})}};var hn=new WeakMap,dn=new WeakMap,pn=new WeakMap,vn=new WeakMap,_n=new WeakMap,gn=new WeakMap;class xn extends ze{get mouseEventInfo(){return Oe(this,gn)}constructor(t){super(),hn.set(this,{writable:!0,value:void 0}),dn.set(this,{writable:!0,value:void 0}),pn.set(this,{writable:!0,value:[]}),vn.set(this,{writable:!0,value:void 0}),_n.set(this,{writable:!0,value:void 0}),gn.set(this,{writable:!0,value:[]}),Ve(this,"checkMouseEvent",(function(t,e){let r,n;for(r=0,n=Oe(this,gn).length;r<n;r++){let n,i,o=Oe(this,gn)[r];e&&(n=xn.mouseMAP[e]),n?(o.type==t.detector.down&&(i="down",i&&n[i]&&n[i].call(n.target,{target:n.target,type:i,nativeEvent:o.nativeEvent})),o.type==t.detector.up&&(i="up",i&&n[i]&&n[i].call(n.target,{target:n.target,type:i,nativeEvent:o.nativeEvent})),Oe(this,_n)&&Oe(this,_n)!=n&&(i="out",i&&Oe(this,_n)[i]&&Oe(this,_n)[i].call(Oe(this,_n).target,{target:Oe(this,_n).target,type:i})),Oe(this,_n)!=n&&(i="over",i&&n[i]&&n[i].call(n.target,{target:n.target,type:i,nativeEvent:o.nativeEvent})),Ye(this,_n,n)):(i="out",Oe(this,_n)&&Oe(this,_n)[i]&&Oe(this,pn).push({info:Oe(this,_n),type:i,nativeEvent:o.nativeEvent}),Ye(this,_n,null)),cn(Oe(this,pn))}Oe(this,_n)?this.cursorState="pointer":this.cursorState="default",Oe(this,gn).length=0})),Ve(this,"check",t=>(Oe(this,hn)||(Ye(this,hn,Oe(this,vn).readPixelArrayBuffer(t,Oe(this,vn),Oe(this,vn).baseAttachment_mouseColorID_depth_ResolveTarget,Oe(this,vn).mouseX,Oe(this,vn).mouseY)),Oe(this,hn).then(e=>{Ye(this,hn,null),Ye(this,dn,Math.round(new Float32Array(e)[0])),this.checkMouseEvent(t,Oe(this,dn))})),this.cursorState)),Ye(this,vn,t)}}Ve(xn,"mouseMAP",{});var yn=new WeakMap,Tn=new WeakMap,Sn=new WeakMap,Un=new WeakMap,Mn=new WeakMap,bn=new WeakMap,Pn=new WeakMap,wn=new WeakMap,Gn=new WeakMap,Bn=new WeakMap,En=new WeakMap;class Cn extends ze{get mouseEventChecker(){return Oe(this,Gn)}get useFrustumCulling(){return this._useFrustumCulling}set useFrustumCulling(t){this._useFrustumCulling=t}get postEffect(){return Oe(this,wn)}get scene(){return Oe(this,yn)}set scene(t){Ye(this,yn,t)}get camera(){return Oe(this,Tn)}set camera(t){Ye(this,Tn,t)}get y(){return this._y}get x(){return this._x}get width(){return Oe(this,Sn)}get height(){return Oe(this,Un)}get viewRect(){return Oe(this,Mn)}constructor(t,e,r){super(),Ve(this,"redGPUContext",void 0),yn.set(this,{writable:!0,value:void 0}),Tn.set(this,{writable:!0,value:void 0}),Ve(this,"projectionMatrix",void 0),Ve(this,"_x",0),Ve(this,"_y",0),Sn.set(this,{writable:!0,value:"100%"}),Un.set(this,{writable:!0,value:"100%"}),Mn.set(this,{writable:!0,value:[]}),Ve(this,"systemUniformInfo_vertex",void 0),Ve(this,"systemUniformInfo_fragment",void 0),bn.set(this,{writable:!0,value:void 0}),Pn.set(this,{writable:!0,value:void 0}),Ve(this,"baseAttachment",void 0),Ve(this,"baseAttachmentView",void 0),Ve(this,"baseAttachment_ResolveTarget",void 0),Ve(this,"baseAttachment_ResolveTargetView",void 0),Ve(this,"baseAttachment_mouseColorID_depth",void 0),Ve(this,"baseAttachment_mouseColorID_depthView",void 0),Ve(this,"baseAttachment_mouseColorID_depth_ResolveTarget",void 0),Ve(this,"baseAttachment_mouseColorID_depth_ResolveTargetView",void 0),Ve(this,"baseDepthStencilAttachment",void 0),Ve(this,"baseDepthStencilAttachmentView",void 0),wn.set(this,{writable:!0,value:void 0}),Ve(this,"debugLightList",[]),Ve(this,"mouseX",0),Ve(this,"mouseY",0),Ve(this,"_useFrustumCulling",!0),Gn.set(this,{writable:!0,value:void 0}),Bn.set(this,{writable:!0,value:function(t){let e=$e.mat4+$e.mat4+$e.float2+$e.float;const r={size:e,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST},n={entries:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"}]};let i,o,a,s;return Ye(this,bn,new Float32Array(e/Float32Array.BYTES_PER_ELEMENT)),s={layout:o=t.createBindGroupLayout(n),entries:[{binding:0,resource:{buffer:i=t.createBuffer(r),offset:0,size:e}}]},a=t.createBindGroup(s),{GPUBuffer:i,GPUBindGroupLayout:o,GPUBindGroup:a}}}),En.set(this,{writable:!0,value:function(t){let e=$e.float4+2*$e.float4*Ke.MAX_DIRECTIONAL_LIGHT+3*$e.float4*Ke.MAX_POINT_LIGHT+$e.float4*$e.float4+3*$e.float4*Ke.MAX_SPOT_LIGHT+$e.float4+$e.float2;const r={size:e,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST},n={entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"}]};let i,o,a,s;return Ye(this,Pn,new Float32Array(e/Float32Array.BYTES_PER_ELEMENT)),s={layout:o=t.createBindGroupLayout(n),entries:[{binding:0,resource:{buffer:i=t.createBuffer(r),offset:0,size:e}}]},a=t.createBindGroup(s),{GPUBuffer:i,GPUBindGroupLayout:o,GPUBindGroup:a}}}),Ve(this,"readPixelArrayBuffer",async(t,e,r,n=0,i=0,o=1,a=1)=>{let s=e.viewRect;if(n>0&&n<s[2]&&i>0&&i<s[3]){let e,s,u,l,f;return e=t.device.createCommandEncoder(),s=t.device.createBuffer({size:16*o*a,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),u={texture:r,origin:{x:n,y:i,z:0}},l={buffer:s,bytesPerRow:Math.max(256,4*o*a),rowsPerImage:1},f={width:o,height:a,depth:1},e.copyTextureToBuffer(u,l,f),t.device.defaultQueue.submit([e.finish()]),s=t.device.createBufferMapped({size:16*o*a,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ})[0],new Promise(t=>{l.buffer.mapReadAsync().then(e=>{s.unmap(),s.destroy(),s=null,t(e)})})}}),this.redGPUContext=t,this.camera=r,this.scene=e,this.systemUniformInfo_vertex=Oe(this,Bn).call(this,t.device),this.systemUniformInfo_fragment=Oe(this,En).call(this,t.device),this.projectionMatrix=Ae.mat4.create(),Ye(this,wn,new mn(t)),Ye(this,Gn,new xn(this))}resetTexture(t){Ye(this,Mn,this.getViewRect(t));let e={colorAttachments:[{key:"baseAttachment",format:t.swapChainFormat,usage:GPUTextureUsage.OUTPUT_ATTACHMENT,resolveUsage:GPUTextureUsage.OUTPUT_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.SAMPLED},{key:"baseAttachment_mouseColorID_depth",format:"rgba32float",usage:GPUTextureUsage.OUTPUT_ATTACHMENT,resolveUsage:GPUTextureUsage.OUTPUT_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.SAMPLED}],depthStencilAttachment:{key:"baseDepthStencilAttachment",format:"depth24plus-stencil8",usage:GPUTextureUsage.OUTPUT_ATTACHMENT}},r={width:Oe(this,Mn)[2],height:Oe(this,Mn)[3],depth:1};[...e.colorAttachments,e.depthStencilAttachment].forEach(e=>{let n=e.key,i=e.format,o=e.usage,a=e.resolveUsage;this[n]&&(this[n].destroy(),a&&this[n+"_ResolveTarget"].destroy()),this[n]=t.device.createTexture({size:r,sampleCount:4,format:i,usage:o}),this[n+"View"]=this[n].createView(),a&&(this[n+"_ResolveTarget"]=t.device.createTexture({size:r,sampleCount:1,format:i,usage:a}),this[n+"_ResolveTargetView"]=this[n+"_ResolveTarget"].createView())})}updateSystemUniform(t,e){let r,n,i,o,a,s;for(r=this.systemUniformInfo_vertex,n=this.systemUniformInfo_fragment,Ye(this,Mn,this.getViewRect(e)),o=0,i=Math.abs(Oe(this,Mn)[2]/Oe(this,Mn)[3]),this.camera.hasOwnProperty("farClipping")?Ae.mat4.perspective(this.projectionMatrix,Math.PI/180*this.camera.fov,i,this.camera.nearClipping,this.camera.farClipping):(Ae.mat4.ortho(this.projectionMatrix,0,1,0,1,-1e3,1e3),Ae.mat4.scale(this.projectionMatrix,this.projectionMatrix,[1/Oe(this,Mn)[2],1/Oe(this,Mn)[3],1]),Ae.mat4.translate(this.projectionMatrix,this.projectionMatrix,[0,Oe(this,Mn)[3],0])),Oe(this,bn).set(this.projectionMatrix,o),o+=$e.mat4/Float32Array.BYTES_PER_ELEMENT,Oe(this,bn).set(this.camera.matrix,o),o+=$e.mat4/Float32Array.BYTES_PER_ELEMENT,Oe(this,bn).set([Oe(this,Mn)[2],Oe(this,Mn)[3],performance.now()],o),o+=$e.float2/Float32Array.BYTES_PER_ELEMENT,o=0,Oe(this,Pn).set([this.scene.directionalLightList.length,this.scene.pointLightList.length,this.scene.spotLightList.length],o),this.debugLightList.length=0,a=0,o=$e.float4/Float32Array.BYTES_PER_ELEMENT,s=this.scene.directionalLightList.length;a<s;a++){let t=this.scene.directionalLightList[a];t&&(Oe(this,Pn).set(t._colorRGBA,o),o+=$e.float4/Float32Array.BYTES_PER_ELEMENT,Oe(this,Pn).set([t._x,t._y,t._z,t._intensity],o),o+=$e.float4/Float32Array.BYTES_PER_ELEMENT,t.useDebugMesh&&this.debugLightList.push(t._debugMesh))}for(o=($e.float4+2*$e.float4*Ke.MAX_DIRECTIONAL_LIGHT)/Float32Array.BYTES_PER_ELEMENT,a=0,s=this.scene.pointLightList.length;a<s;a++){let t=this.scene.pointLightList[a];t&&(Oe(this,Pn).set(t._colorRGBA,o),o+=$e.float4/Float32Array.BYTES_PER_ELEMENT,Oe(this,Pn).set([t._x,t._y,t._z,t._intensity],o),o+=$e.float4/Float32Array.BYTES_PER_ELEMENT,Oe(this,Pn).set([t._radius],o),o+=$e.float4/Float32Array.BYTES_PER_ELEMENT,t.useDebugMesh&&this.debugLightList.push(t._debugMesh))}o=($e.float4+2*$e.float4*Ke.MAX_DIRECTIONAL_LIGHT+3*$e.float4*Ke.MAX_POINT_LIGHT)/Float32Array.BYTES_PER_ELEMENT;let u=this.scene.ambientLight;for(Oe(this,Pn).set(u?u._colorRGBA:[0,0,0,0],o),o+=$e.float4/Float32Array.BYTES_PER_ELEMENT,Oe(this,Pn).set([u?u._intensity:1],o),o+=$e.float4/Float32Array.BYTES_PER_ELEMENT,a=0,s=this.scene.spotLightList.length;a<s;a++){let t=this.scene.spotLightList[a];t&&(Oe(this,Pn).set(t._colorRGBA,o),o+=$e.float4/Float32Array.BYTES_PER_ELEMENT,Oe(this,Pn).set([t._x,t._y,t._z,t._intensity],o),o+=$e.float4/Float32Array.BYTES_PER_ELEMENT,Oe(this,Pn).set([t.cutoff,t.exponent],o),o+=$e.float4/Float32Array.BYTES_PER_ELEMENT,t.useDebugMesh&&this.debugLightList.push(t._debugMesh.children))}o=($e.float4+2*$e.float4*Ke.MAX_DIRECTIONAL_LIGHT+3*$e.float4*Ke.MAX_POINT_LIGHT+3*$e.float4*Ke.MAX_SPOT_LIGHT+2*$e.float4)/Float32Array.BYTES_PER_ELEMENT,Oe(this,Pn).set([this.camera.x,this.camera.y,this.camera.z],o),o+=$e.float4/Float32Array.BYTES_PER_ELEMENT,Oe(this,Pn).set([Oe(this,Mn)[2],Oe(this,Mn)[3]],o),t.setBindGroup(0,r.GPUBindGroup),t.setBindGroup(1,n.GPUBindGroup),e.device.defaultQueue.writeBuffer(r.GPUBuffer,0,Oe(this,bn)),e.device.defaultQueue.writeBuffer(n.GPUBuffer,0,Oe(this,Pn))}getViewRect(t){return["number"==typeof this.x?this.x:parseInt(this.x)/100*t.canvas.width,"number"==typeof this.y?this.y:parseInt(this.y)/100*t.canvas.height,"number"==typeof this.width?this.width:parseInt(parseInt(this.width)/100*t.canvas.width),"number"==typeof this.height?this.height:parseInt(parseInt(this.height)/100*t.canvas.height)]}setSize(t=Oe(this,Sn),e=Oe(this,Un)){let r=Oe(this,Mn).toString();"number"==typeof t?Ye(this,Sn,t<1?1:parseInt(t)):t.includes("%")&&+t.replace("%","")>=0?Ye(this,Sn,t):He.throwFunc("View setSize : width는 0이상의 숫자나 %만 허용.",t),"number"==typeof e?Ye(this,Un,e<1?1:parseInt(e)):e.includes("%")&&+e.replace("%","")>=0?Ye(this,Un,e):He.throwFunc("View setSize : height는 0이상의 숫자나 %만 허용.",e),this.getViewRect(this.redGPUContext).toString()!=r&&this.resetTexture(this.redGPUContext)}setLocation(t=this._x,e=this._y){"number"==typeof t?this._x=parseInt(t):t.includes("%")&&+t.replace("%","")>=0?this._x=t:He.throwFunc("View setLocation : x는 0이상의 숫자나 %만 허용.",t),"number"==typeof e?this._y=parseInt(e):e.includes("%")&&+e.replace("%","")>=0?this._y=e:He.throwFunc("View setLocation : y는 0이상의 숫자나 %만 허용.",e),this.getViewRect(this.redGPUContext)}computeViewFrustumPlanes(){let t=Ae.mat4.create();Ae.mat4.multiply(t,this.projectionMatrix,this.camera.matrix);let e=[];e[0]=[t[3]-t[0],t[7]-t[4],t[11]-t[8],t[15]-t[12]],e[1]=[t[3]+t[0],t[7]+t[4],t[11]+t[8],t[15]+t[12]],e[2]=[t[3]+t[1],t[7]+t[5],t[11]+t[9],t[15]+t[13]],e[3]=[t[3]-t[1],t[7]-t[5],t[11]-t[9],t[15]-t[13]],e[4]=[t[3]-t[2],t[7]-t[6],t[11]-t[10],t[15]-t[14]],e[5]=[t[3]+t[2],t[7]+t[6],t[11]+t[10],t[15]+t[14]];for(let t=0;t<e.length;t++){let r=e[t],n=Math.sqrt(r[0]*r[0]+r[1]*r[1]+r[2]*r[2]);r[0]/=n,r[1]/=n,r[2]/=n,r[3]/=n}return e}}const Ln=[];let Rn=0,Dn=0,In=new Float32Array(1);const Nn=new qe([{size:$e.mat4*Ke.MESH_UNIFORM_POOL_NUM,valueName:"matrix"},{size:$e.mat4*Ke.MESH_UNIFORM_POOL_NUM,valueName:"normalMatrix"}]);let Fn=0;var An=new WeakMap,Vn=new WeakMap;class On extends sn{get sumOpacity(){return this._sumOpacity}set sumOpacity(t){this._sumOpacity=t,In[0]=this._sumOpacity,this._redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_mesh.GPUBuffer,$e.float2,In)}get opacity(){return this._opacity}set opacity(t){this._opacity=t}get renderDrawLayerIndex(){return this._renderDrawLayerIndex}set renderDrawLayerIndex(t){this._renderDrawLayerIndex=t}get blendColorSrc(){return this._blendColorSrc}set blendColorSrc(t){this._blendColorSrc=t,this.dirtyPipeline=!0}get blendColorDst(){return this._blendColorDst}set blendColorDst(t){this._blendColorDst=t,this.dirtyPipeline=!0}get blendAlphaDst(){return this._blendAlphaDst}set blendAlphaDst(t){this._blendAlphaDst=t,this.dirtyPipeline=!0}get blendAlphaSrc(){return this._blendAlphaSrc}set blendAlphaSrc(t){this._blendAlphaSrc=t,this.dirtyPipeline=!0}get x(){return this._x}set x(t){this._x=t,this.dirtyTransform=!0}get y(){return this._y}set y(t){this._y=t,this.dirtyTransform=!0}get z(){return this._z}set z(t){this._z=t,this.dirtyTransform=!0}getPosition(){return[this._x,this._y,this._z]}setPosition(t,e,r){this._x=t,this._y=e,this._z=r,this.dirtyTransform=!0}get pivotZ(){return this._pivotZ}set pivotZ(t){this._pivotZ=t,this.dirtyTransform=!0}get pivotY(){return this._pivotY}set pivotY(t){this._pivotY=t,this.dirtyTransform=!0}get pivotX(){return this._pivotX}set pivotX(t){this._pivotX=t,this.dirtyTransform=!0}getPivotPosition(){return[this._pivotX,this._pivotY,this._pivotZ]}setPivotPosition(t,e,r){this._pivotX=t,this._pivotY=e,this._pivotZ=r,this.dirtyTransform=!0}get rotationX(){return this._rotationX}set rotationX(t){this._rotationX=t,this.dirtyTransform=!0}get rotationY(){return this._rotationY}set rotationY(t){this._rotationY=t,this.dirtyTransform=!0}get rotationZ(){return this._rotationZ}set rotationZ(t){this._rotationZ=t,this.dirtyTransform=!0}getRotation(){return[this._rotationX,this._rotationY,this._rotationZ]}setRotation(t,e,r){this._rotationX=t,this._rotationY=e,this._rotationZ=r,this.dirtyTransform=!0}get scaleX(){return this._scaleX}set scaleX(t){this._scaleX=t,this.dirtyTransform=!0}get scaleY(){return this._scaleY}set scaleY(t){this._scaleY=t,this.dirtyTransform=!0}get scaleZ(){return this._scaleZ}set scaleZ(t){this._scaleZ=t,this.dirtyTransform=!0}getScale(){return[this._scaleX,this._scaleY,this._scaleZ]}setScale(t,e,r){this._scaleX=t,this._scaleY=e,this._scaleZ=r,this.dirtyTransform=!0}get geometry(){return this._geometry}set geometry(t){this._geometry=t,this.dirtyPipeline=!0}get material(){return this._material}set material(t){this._material=t,this.dirtyPipeline=!0}get depthWriteEnabled(){return this._depthWriteEnabled}set depthWriteEnabled(t){this.dirtyPipeline=!0,this._depthWriteEnabled=t}get depthCompare(){return this._depthCompare}set depthCompare(t){this.dirtyPipeline=!0,this._depthCompare=t}get cullMode(){return this._cullMode}set cullMode(t){this.dirtyPipeline=!0,this._cullMode=t}get primitiveTopology(){return this._primitiveTopology}set primitiveTopology(t){this.dirtyPipeline=!0,this._primitiveTopology=t}constructor(t){super(),Ve(this,"_x",0),Ve(this,"_y",0),Ve(this,"_z",0),Ve(this,"_pivotX",0),Ve(this,"_pivotY",0),Ve(this,"_pivotZ",0),Ve(this,"_rotationX",0),Ve(this,"_rotationY",0),Ve(this,"_rotationZ",0),Ve(this,"_scaleX",1),Ve(this,"_scaleY",1),Ve(this,"_scaleZ",1),Ve(this,"dirtyTransform",!0),Ve(this,"dirtyPipeline",!0),Ve(this,"_material",void 0),Ve(this,"_geometry",void 0),Ve(this,"_redGPUContext",void 0),Ve(this,"_depthWriteEnabled",!0),Ve(this,"_depthCompare","less-equal"),Ve(this,"_cullMode","back"),Ve(this,"_primitiveTopology","triangle-list"),Ve(this,"_blendColorSrc","src-alpha"),Ve(this,"_blendColorDst","one-minus-src-alpha"),Ve(this,"_blendAlphaSrc","one"),Ve(this,"_blendAlphaDst","one-minus-src-alpha"),Ve(this,"pipeline",void 0),An.set(this,{writable:!0,value:void 0}),Vn.set(this,{writable:!0,value:0}),Ve(this,"_renderDrawLayerIndex",oo.DRAW_LAYER_INDEX0),Ve(this,"_sumOpacity",1),Ve(this,"_opacity",1),Ve(this,"targetTo",(t=>{let e=new Float32Array([0,1,0]),r=[],n=[],i=Ae.mat4.create();return function(t,o,a){r[0]=t,r[1]=o,r[2]=a,Ae.mat4.identity(i),Ae.mat4.targetTo(i,[this._x,this._y,this._z],r,e),n=He.mat4ToEuler(i,[]),this._rotationX=180*-n[0]/Math.PI,this._rotationY=180*-n[1]/Math.PI,this._rotationZ=180*-n[2]/Math.PI,this.dirtyTransform=!0}})()),Ve(this,"localToWorld",(t=>{let e;return e=Ae.mat4.create(),function(t=0,r=0,n=0){return"number"==typeof t||He.throwFunc("BaseObject3D - localToWorld : x - number만 허용함","입력값 : ",t),"number"==typeof r||He.throwFunc("BaseObject3D - localToWorld : y - number만 허용함","입력값 : ",r),"number"==typeof n||He.throwFunc("BaseObject3D - localToWorld : z - number만 허용함","입력값 : ",n),e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t,e[13]=r,e[14]=n,e[15]=1,Ae.mat4.multiply(e,this.matrix,e),[e[12],e[13],e[14]]}})()),Ve(this,"worldToLocal",(t=>{let e,r;return e=Ae.mat4.create(),r=Ae.mat4.create(),function(t=0,n=0,i=0){return"number"==typeof t||He.throwFunc("BaseObject3D - worldToLocal : x - number만 허용함","입력값 : ",t),"number"==typeof n||He.throwFunc("BaseObject3D - worldToLocal : y - number만 허용함","입력값 : ",n),"number"==typeof i||He.throwFunc("BaseObject3D - worldToLocal : z - number만 허용함","입력값 : ",i),Ae.mat4.invert(e,this.matrix),Ae.mat4.transpose(e,e),Ae.mat4.multiply(r,e,this.matrix),[r[0]*t+r[1]*n+r[2]*i+r[3],r[4]*t+r[5]*n+r[6]*i+r[7],r[8]*t+r[9]*n+r[10]*i+r[11]]}})()),Ve(this,"getScreenPoint",(t=>{let e,r,n,i=Ae.mat4.create(),o=Ae.mat4.create();return n={x:0,y:0,z:0,w:0},function(t,a=0,s=0,u=0){let l=this.localToWorld(a,s,u);return o[0]=1,o[1]=0,o[2]=0,o[3]=0,o[4]=0,o[5]=1,o[6]=0,o[7]=0,o[8]=0,o[9]=0,o[10]=1,o[11]=0,o[12]=l[0],o[13]=l[1],o[14]=l[2],o[15]=1,t instanceof Cn||He.throwFunc("BaseObject3D - getScreenPoint : redView - RedView Instance 만 허용함","입력값 : ",t),e=t.camera,r=t.viewRect,Ae.mat4.multiply(i,t.projectionMatrix,e.matrix),Ae.mat4.multiply(i,i,o),n.x=i[12],n.y=i[13],n.z=i[14],n.w=i[15],n.x=.5*n.x/n.w+.5,n.y=.5*n.y/n.w+.5,[(r[0]+n.x*r[2])/window.devicePixelRatio,(r[1]+(1-n.y)*r[3])/window.devicePixelRatio]}})()),this._redGPUContext=t;let e=function(t,e){let r;Ln[Dn]||(r=new an(t),r.setBuffer(Nn),Ln[Dn]=r),r=Ln[Dn];let n={float32Array:r.float32Array,uniformBuffer_meshMatrix:r,offsetMatrix:$e.mat4*Rn,offsetNormalMatrix:$e.mat4*Ke.MESH_UNIFORM_POOL_NUM+$e.mat4*Rn,uniformIndex:Rn};return Rn++,Rn==Ke.MESH_UNIFORM_POOL_NUM&&(Dn++,Rn=0),n}(t);this.uniformBuffer_meshMatrix=e.uniformBuffer_meshMatrix,this.uniformBuffer_meshMatrix.meshFloat32Array=e.float32Array,this.offsetMatrix=e.offsetMatrix,this.offsetNormalMatrix=e.offsetNormalMatrix,Fn++,Ye(this,Vn,Fn),this.uniformBuffer_mesh=new an(t),this.uniformBuffer_mesh.setBuffer(On.uniformBufferDescriptor_meshIndex),t.device.defaultQueue.writeBuffer(this.uniformBuffer_mesh.GPUBuffer,0,new Float32Array([e.uniformIndex])),t.device.defaultQueue.writeBuffer(this.uniformBuffer_mesh.GPUBuffer,$e.float,new Float32Array([Oe(this,Vn)])),this.sumOpacity=1,Ye(this,An,[{binding:0,resource:{buffer:this.uniformBuffer_meshMatrix.GPUBuffer,offset:0,size:this.uniformBuffer_meshMatrix.uniformBufferDescriptor.size}},{binding:1,resource:{buffer:this.uniformBuffer_mesh.GPUBuffer,offset:0,size:this.uniformBuffer_mesh.uniformBufferDescriptor.size}}]),this.GPUBindGroupLayout=t.device.createBindGroupLayout(On.uniformsBindGroupLayoutDescriptor_mesh),this.GPUBindGroup=this._redGPUContext.device.createBindGroup({layout:this.GPUBindGroupLayout,entries:Oe(this,An)}),this.pipeline=new ln(t,this),this.normalMatrix=Ae.mat4.create(),this.matrix=Ae.mat4.create(),this.localMatrix=Ae.mat4.create()}addEventListener(t,e){xn.mouseMAP[Oe(this,Vn)]||(xn.mouseMAP[Oe(this,Vn)]={target:this}),xn.mouseMAP[Oe(this,Vn)][t]=e}removeEventListener(t){xn.mouseMAP[Oe(this,Vn)]&&(xn.mouseMAP[Oe(this,Vn)][t]=null)}}Ve(On,"uniformsBindGroupLayoutDescriptor_mesh",{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"}]}),Ve(On,"uniformBufferDescriptor_meshIndex",new qe([{size:$e.float,valueName:"meshUniformIndex"},{size:$e.float,valueName:"mouseColorID"},{size:$e.float,valueName:"sumOpacity"}]));class Yn extends On{constructor(t,e,r){super(t),this.geometry=e,this.material=r}}const Xn={};class zn extends ze{constructor(t,e,r,n=zn.TYPE_2D){if(super(),this.callback=r,n===zn.TYPE_2D){let t=location.pathname.split("/");t.length>1&&t.pop();let n=location.origin+t.join("/")+"/"+e;(e.includes(";base64,")||e.includes("://"))&&(n=e),Xn[n]?Xn[n].loaded?(this.imageDatas=Xn[n].imageDatas,r&&r.call(this,{ok:!0})):Xn[n].tempList.push(this):(Xn[n]={loaded:!1,tempList:[]},Xn[n].tempList.push(this),nr(n).then(t=>{Xn[n].loaded=!0,Xn[n].imageDatas=t.imageDatas,Xn[n].tempList.forEach(e=>{e.imageDatas=Xn[n].imageDatas,e.callback&&e.callback.call(e,t)}),Xn[n].tempList.length=0}).catch(t=>{Xn[n].tempList.forEach(e=>{e.callback&&e.callback.call(e,t)}),Xn[n].tempList.length=0}))}else{let t=0,n=0,i=0,o=[];e.forEach((e,a)=>{if(e){let s=location.pathname.split("/");s.length>1&&s.pop();let u=location.origin+s.join("/")+"/"+e;(e.includes(";base64,")||e.includes("://"))&&(u=e),Xn[u]?Xn[u].loaded?(this.imageDatas=Xn[u].imageDatas,r&&r.call(this,{ok:!0})):Xn[u].tempList.push(this):(Xn[u]={loaded:!1,imgList:o,tempList:[]},Xn[u].tempList.push(this),nr(u).then(e=>{o[a]=e,i++,t=Math.max(t,e.imageDatas[0].width),n=Math.max(n,e.imageDatas[0].height),t>1920&&(t=1920),n>1920&&(n=1920),6==i&&(Xn[u].loaded=!0,Xn[u].imgList=o,Xn[u].maxW=t,Xn[u].maxH=n,Xn[u].tempList.forEach(t=>{t.imgList=Xn[u].imgList,t.maxW=Xn[u].maxW,t.maxH=Xn[u].maxH,t.callback&&t.callback.call(t,e)}),Xn[u].tempList.length=0)}).catch(t=>{Xn[u].tempList.forEach(e=>{e.callback&&e.callback.call(e,t)}),Xn[u].tempList.length=0}))}else;})}}}function $n(t,e,r,n,i,o=-1){return new Promise((a,s)=>{r.forEach((r,a)=>{if(!i.useMipmap&&a)return;if(a>i.mipMaps)return;let s=new Uint8ClampedArray(r.data),u=r.width,l=r.height,f=r.bytesPerRow;const m=e.createBuffer({size:s.byteLength+s.byteLength%4,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC});e.defaultQueue.writeBuffer(m,0,s);const c={buffer:m,bytesPerRow:f,rowsPerImage:l},h={texture:n,mipLevel:a,origin:{z:Math.max(o,0)}},d={width:u,height:l,depth:1};t.copyBufferToTexture(c,h,d)}),a()})}Ve(zn,"TYPE_2D","TYPE_2D"),Ve(zn,"TYPE_CUBE","TYPE_CUBE");var kn=new WeakMap;class Wn extends ze{constructor(){super(),kn.set(this,{writable:!0,value:[]}),Ve(this,"_GPUTexture",void 0),Ve(this,"_GPUTextureView",void 0)}get GPUTexture(){return this._GPUTexture}get GPUTextureView(){return this._GPUTextureView}resolve(t){this._GPUTexture=t,this instanceof qn?this._GPUTextureView=t?t.createView():null:(this._GPUTexture=t,t._GPUTextureView?this._GPUTextureView=t._GPUTextureView:t._GPUTextureView=this._GPUTextureView=t?t.createView({format:"rgba8unorm",dimension:"cube",aspect:"all",baseMipLevel:0,mipLevelCount:this.mipMaps+1,baseArrayLayer:0,arrayLayerCount:6}):null);let e=Oe(this,kn).length;for(;e--;){let t=Oe(this,kn)[e];t[0][t[1]]=this}Oe(this,kn).length=0}addUpdateTarget(t,e){Oe(this,kn).push([t,e])}}let Zn;const Qn=new Map;let Hn;class qn extends Wn{constructor(t,e,r,n=!0,i,o){if(super(),Zn||(Zn=new jr(t)),this.sampler=r||Zn,this.onload=i,this.onerror=o,this.mapKey=e+n+this.sampler.string,this.useMipmap=n,e){let r=this;new zn(t,e,(function(e){Qn.get(r.mapKey)?(r.resolve(Qn.get(r.mapKey)),r.onload&&r.onload(r)):e.ok?function(t,e,r){let n,i,o,a,s;n=e[0].width,i=e[0].height,r.useMipmap&&(r.mipMaps=Math.round(Math.log2(Math.max(n,i))),r.mipMaps>10&&(r.mipMaps=10)),o={size:{width:n,height:i,depth:1},dimension:"2d",format:"rgba8unorm",mipLevelCount:r.useMipmap?r.mipMaps+1:1,usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.SAMPLED},a=t.device.createTexture(o),Qn.set(r.mapKey,a),s=t.device.createCommandEncoder({}),$n(s,t.device,e,a,r).then(e=>{t.device.defaultQueue.submit([s.finish()]),r.resolve(a),r.onload&&r.onload(r)})}(t,this.imageDatas,r):(r.resolve(null),r.onerror&&r.onerror(r))}),zn.TYPE_2D)}else;}}const jn=new Map;class Jn extends Wn{constructor(t,e,r,n=!0,i,o){if(super(),Hn||(Hn=new jr(t)),this.sampler=r||Hn,this.onload=i,this.onerror=o,this.mapKey=e+n+this.sampler.string,this.useMipmap=n,e){let r=this;new zn(t,e,(function(e){jn.get(r.mapKey)?(r.resolve(jn.get(r.mapKey)),r.onload&&r.onload(r)):e.ok?function(t,e,r){let n,i,o,a,s;n=e[0].imageDatas[0].width,i=e[0].imageDatas[0].height,r.useMipmap&&(r.mipMaps=Math.round(Math.log2(Math.max(n,i))),r.mipMaps>10&&(r.mipMaps=10)),o={size:{width:n,height:i,depth:r instanceof qn?1:6},dimension:"2d",format:"rgba8unorm",mipLevelCount:r.useMipmap?r.mipMaps+1:1,usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.SAMPLED},a=t.device.createTexture(o),jn.set(r.mapKey,a);let u=[];s=t.device.createCommandEncoder({}),e.forEach((e,n)=>{u.push($n(s,t.device,e.imageDatas,a,r,n))}),Promise.all(u).then(e=>{t.device.defaultQueue.submit([s.finish()]),r.resolve(a),r.onload&&r.onload.call(r)})}(t,this.imgList,r):(r.resolve(null),r.onerror&&r.onerror(r))}),zn.TYPE_CUBE)}else;}}class Kn extends ze{constructor(t,e,r,n){let i,o;super(),Ve(this,"textures",[]),i=0,o=t=>{i++,n&&n.call(this,{totalNum:e.length,loaded:i}),i==e.length&&requestAnimationFrame(t=>{r&&r.call(this,this)})},(e=e||[]).length?e.forEach((e,r)=>{let n,i,a,s=qn;e.hasOwnProperty("src")?(i=e.src,a=e.sampler):i=e,i instanceof Array&&(s=Jn),n={src:i,texture:null,loadEnd:!1,loadSuccess:!1,userInfo:e},n.texture=new s(t,i,a,!0,(function(t){n.loadSuccess=!0,n.loadEnd=!0,o()}),(function(t){n.loadSuccess=!1,n.loadEnd=!0,o()})),this.textures.push(n)}):requestAnimationFrame(t=>{r&&r.call(this,this)})}getTextureByIndex(t){if(this.textures[t])return this.textures[t].texture}}const ti={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array};class ei{constructor(t,e,r){switch(this.accessor=e.accessors[r],this.bufferView=e.bufferViews[this.accessor.bufferView],this.bufferIndex=this.bufferView.buffer,this.buffer=e.buffers[this.bufferIndex],this.bufferURIDataView=null,this.buffer.uri&&(this.bufferURIDataView=t.parsingResult.uris.buffers[this.bufferIndex]),this.componentType=ti[this.accessor.componentType],this.componentType_BYTES_PER_ELEMENT=this.componentType.BYTES_PER_ELEMENT,this.componentType){case Float32Array:this.getMethod="getFloat32";break;case Uint32Array:this.getMethod="getUint32";break;case Uint16Array:this.getMethod="getUint16";break;case Int16Array:this.getMethod="getInt16";break;case Uint8Array:this.getMethod="getUint8";break;case Int8Array:this.getMethod="getInt8";break;default:He.throwFunc("파싱할수없는 타입",this.componentType)}this.accessorBufferOffset=this.accessor.byteOffset||0,this.bufferViewOffset=this.bufferView.byteOffset||0,this.bufferViewByteStride=this.bufferView.byteStride||0,this.startIndex=(this.bufferViewOffset+this.accessorBufferOffset)/this.componentType_BYTES_PER_ELEMENT}}let ri;ri=function(t,e,r){let n,i=[],o=new ei(t,e,r),a=o.componentType_BYTES_PER_ELEMENT,s=o.bufferURIDataView,u=o.getMethod,l=o.accessor.type,f=o.accessor.count,m=o.startIndex;switch(l){case"SCALAR":for(n=m+1*f;m<n;m++)i.push(s[u](m*a,!0));break;case"VEC4":for(n=m+4*f;m<n;m++)i.push(s[u](m*a,!0));break;case"VEC3":for(n=m+3*f;m<n;m++)i.push(s[u](m*a,!0))}return i};let ni=function(t,e,r){return new Promise(r=>{if(e.animations||(e.animations=[]),e.animations.length){let n=e.nodes,i=e.meshes,o=0,a=0;e.animations.forEach((function(s){let u=s.samplers,l=[];l.minTime=1e7,l.maxTime=-1,l.name=s.name,t.parsingResult.animations.push(l);let f=0;const m=s.channels.length;a+=m;let c=h=>{let d,p,v,_,g,x=[],y=s.channels[h];if(d=u[y.sampler],p=y.target,_=n[p.node],"mesh"in _)v=_.Mesh,i[_.mesh].primitives.forEach(t=>x.push(t.Mesh));else{let e;if(!t.parsingResult.groups[p.node])return;e=t.parsingResult.groups[p.node],v=e}"scale"!=p.path&&"rotation"!=p.path&&"translation"!=p.path&&"weights"!=p.path||l.push(g={key:p.path,time:ri(t,e,d.input),data:ri(t,e,d.output),interpolation:d.interpolation,target:v,targets:x}),g&&(l.minTime>g.time[0]&&(l.minTime=g.time[0]),l.maxTime<g.time[g.time.length-1]&&(l.maxTime=g.time[g.time.length-1])),f++,o++,f!=m&&requestAnimationFrame(t=>c(f)),o==a&&(t.parsingResult.animations.length&&t.parsingResult.animations.forEach(e=>t.playAnimation(e)),r())};c(f)}))}else r()})};var ii=new WeakMap;class oi extends On{constructor(t){super(t),ii.set(this,{writable:!0,value:new Float32Array([0,1,0])}),Ve(this,"fov",60),Ve(this,"nearClipping",.1),Ve(this,"farClipping",1e5)}get x(){return this._x}set x(t){this._x=t,this.matrix[12]=t}get y(){return this._y}set y(t){this._y=t,this.matrix[13]=t}get z(){return this._z}set z(t){this._z=t,this.matrix[14]=t}lookAt(t,e,r){Ae.mat4.lookAt(this.matrix,[this.x,this.y,this.z],[t,e,r],Oe(this,ii))}}let ai=function(t,e){e.cameras&&e.cameras.forEach((function(e){let r=new oi(t.redGPUContext);"orthographic"==e.type?r.mode2DYn=!0:(r.fov=180*e.perspective.yfov/Math.PI,r.farClipping=e.perspective.zfar,r.nearClipping=e.perspective.znear),t.parsingResult.cameras.push(r)}))};const si=function(){const t=Ae.mat4.create(),e=[0,0,0];let r=[];const n=[];let i;return function(o,a){"matrix"in a&&(i=a.matrix,He.mat4ToEuler(i,e),o._rotationX=-180*e[0]/Math.PI,o._rotationY=-180*e[1]/Math.PI,o._rotationZ=-180*e[2]/Math.PI,o._x=i[12],o._y=i[13],o._z=i[14],Ae.mat4.getScaling(n,i),o._scaleX=n[0],o._scaleY=n[1],o._scaleZ=n[2]),"rotation"in a&&(r=a.rotation,He.quaternionToRotationMat4(r,t),He.mat4ToEuler(t,e),o._rotationX=-180*e[0]/Math.PI,o._rotationY=-180*e[1]/Math.PI,o._rotationZ=-180*e[2]/Math.PI),"translation"in a&&(o._x=a.translation[0],o._y=a.translation[1],o._z=a.translation[2]),"scale"in a&&(o._scaleX=a.scale[0],o._scaleY=a.scale[1],o._scaleZ=a.scale[2]),o.dirtyTransform=!0}}();let ui=function(t,e,r,n){if(r[n].Mesh){let t=r[n].Mesh;e.joints.push(t),t.primitiveTopology="line-list",t.depthCompare="never"}else requestAnimationFrame((function(){ui(t,e,r,n)}))},li=function(t,e,r,n){let i={joints:[],inverseBindMatrices:[]},o=e.nodes;r.joints.forEach((function(e){ui(t,i,o,e)})),r.skeleton&&(i.skeleton=e.nodes[r.skeleton].Mesh);let a,s=r.inverseBindMatrices,u=new ei(t,e,s),l=u.componentType_BYTES_PER_ELEMENT,f=u.bufferViewByteStride,m=u.bufferURIDataView,c=u.getMethod,h=u.accessor.type,d=u.accessor.count,p=0,v=f/l,_=u.startIndex;switch(h){case"MAT4":if(f)for(a=_+d*(f/l);_<a;_++)p%v<16&&i.inverseBindMatrices.push(m[c](_*l,!0)),p++;else for(a=_+16*d;_<a;_++)i.inverseBindMatrices.push(m[c](_*l,!0)),p++}i.inverseBindMatrices=new Float32Array(i.inverseBindMatrices),n.skinInfo=i,n.material.useSkin=!!n.skinInfo},fi=new Float32Array(1);var mi=new WeakMap;class ci extends(Mr.mix(mr,Mr.diffuseTexture,Mr.normalTexture,Mr.emissiveTexture,Mr.environmentTexture,Mr.displacementTexture,Mr.roughnessTextureGLTF,Mr.occlusionTextureGLTF,Mr.basicLightPropertys)){set alphaBlend(t){this._alphaBlend=t,fi[0]=t,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.alphaBlend,fi)}get alphaBlend(){return this._alphaBlend}set cutOff(t){this._cutOff=t,fi[0]=t,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.cutOff,fi)}get cutOff(){return this._cutOff}get useCutOff(){return this._useCutOff}set useCutOff(t){this._useCutOff=t,fi[0]=t?1:0,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.useCutOff,fi)}get useSkin(){return this._useSkin}set useSkin(t){this._useSkin=t,fi[0]=t?1:0,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap.useSkin,fi)}set emissivePower(t){this._emissivePower=t,fi[0]=t,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.emissivePower,fi)}get emissivePower(){return this._emissivePower}get useMaterialDoubleSide(){return this._useMaterialDoubleSide}set useMaterialDoubleSide(t){this._useMaterialDoubleSide=t,fi[0]=t?1:0,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.useMaterialDoubleSide,fi)}get useVertexTangent(){return this._useVertexTangent}set useVertexTangent(t){this._useVertexTangent=t,fi[0]=t,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.useVertexTangent,fi)}get metallicFactor(){return this._metallicFactor}set metallicFactor(t){this._metallicFactor=t,fi[0]=t,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.metallicFactor,fi)}get useVertexColor_0(){return this._useVertexColor_0}set useVertexColor_0(t){this._useVertexColor_0=t,fi[0]=t?1:0,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.useVertexColor_0,fi)}get baseColorFactor(){return this._baseColorFactor}set baseColorFactor(t){this._baseColorFactor=new Float32Array(t),this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.baseColorFactor,this._baseColorFactor)}get diffuseTexCoordIndex(){return this._diffuseTexCoordIndex}set diffuseTexCoordIndex(t){this._diffuseTexCoordIndex=t,fi[0]=t,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.diffuseTexCoordIndex,fi)}get normalTexCoordIndex(){return this._normalTexCoordIndex}set normalTexCoordIndex(t){this._normalTexCoordIndex=t,fi[0]=t,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.normalTexCoordIndex,fi)}get emissiveTexCoordIndex(){return this._emissiveTexCoordIndex}set emissiveTexCoordIndex(t){this._emissiveTexCoordIndex=t,fi[0]=t,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.emissiveTexCoordIndex,fi)}constructor(t,e,r,n,i,o,a){super(t),Ve(this,"_baseColorFactor",new Float32Array(4)),Ve(this,"_useVertexColor_0",!1),Ve(this,"_diffuseTexCoordIndex",0),Ve(this,"_normalTexCoordIndex",0),Ve(this,"_emissiveTexCoordIndex",0),Ve(this,"_metallicFactor",1),Ve(this,"_useMaterialDoubleSide",!1),Ve(this,"_useVertexTangent",!1),Ve(this,"_emissivePower",1),Ve(this,"_cutOff",0),Ve(this,"_useCutOff",!0),Ve(this,"_alphaBlend",0),Ve(this,"_useSkin",!1),Ve(this,"jointMatrix",new Float32Array(127*$e.mat4/Float32Array.BYTES_PER_ELEMENT)),Ve(this,"inverseBindMatrixForJoint",new Float32Array(127*$e.mat4/Float32Array.BYTES_PER_ELEMENT)),Ve(this,"globalTransformOfNodeThatTheMeshIsAttachedTo",new Float32Array($e.mat4/Float32Array.BYTES_PER_ELEMENT)),mi.set(this,{writable:!0,value:void 0}),this.diffuseTexture=e,this.environmentTexture=r,this.normalTexture=n,this.occlusionTexture=i,this.emissiveTexture=o,this.roughnessTexture=a,this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"diffuseTexture":this._diffuseTexture=t,r=e;break;case"normalTexture":this._normalTexture=t,r=e;break;case"environmentTexture":this._environmentTexture=t,r=e;break;case"emissiveTexture":this._emissiveTexture=t,r=e;break;case"roughnessTexture":this._roughnessTexture=t,r=e;break;case"occlusionTexture":this._occlusionTexture=t,r=e}r&&(fi[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],fi):this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],fi)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,fi[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],fi):this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],fi),this.needResetBindingInfo=!0)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:this._displacementTexture?this._displacementTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:2,resource:this._displacementTexture?this._displacementTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:3,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:4,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:5,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:6,resource:this._normalTexture?this._normalTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:7,resource:this._normalTexture?this._normalTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:8,resource:this._roughnessTexture?this._roughnessTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:9,resource:this._roughnessTexture?this._roughnessTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:10,resource:this._emissiveTexture?this._emissiveTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:11,resource:this._emissiveTexture?this._emissiveTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:12,resource:this._environmentTexture?this._environmentTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:13,resource:this._environmentTexture?this._environmentTexture._GPUTextureView:this.redGPUContext.state.emptyCubeTextureView},{binding:14,resource:this._occlusionTexture?this._occlusionTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:15,resource:this._occlusionTexture?this._occlusionTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}Ve(ci,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n    ${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${Ke.GLSL_SystemUniforms_vertex.calcDisplacement}\n    ${Ke.GLSL_SystemUniforms_vertex.meshUniforms}\n         \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 3 ) in vec2 uv1;\n\tlayout( location = 4 ) in vec4 vertexColor_0;\n\tlayout( location = 5 ) in vec4 aVertexWeight;\n\tlayout( location = 6 ) in vec4 aVertexJoint;\n\tlayout( location = 7 ) in vec4 vertexTangent;\n\tlayout( location = 0 ) out vec4 vVertexColor_0;\n\tlayout( location = 1 ) out vec3 vNormal;\n\tlayout( location = 2 ) out vec2 vUV;\n\tlayout( location = 3 ) out vec2 vUV1;\n\tlayout( location = 4 ) out vec4 vVertexTangent;\n\tlayout( location = 5 ) out vec4 vVertexPosition;\n\tlayout( location = 6 ) out float vMouseColorID;\t\n\tlayout( location = 7 ) out float vSumOpacity;\n\tlayout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n\t\tmat4 jointMatrix[127];\n\t\tmat4 inverseBindMatrixForJoint[127];\n\t\tmat4 globalTransformOfNodeThatTheMeshIsAttachedTo;\n        float displacementFlowSpeedX;\n        float displacementFlowSpeedY;\n        float displacementPower;\n        float __displacementTextureRenderYn;\n        float useSkin;\n        \n    } vertexUniforms;\n\t\n\tlayout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 1 ) uniform sampler uDisplacementSampler;\n\tlayout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 2 ) uniform texture2D uDisplacementTexture;\n\tvoid main() {\t\t\n\t\tmat4 targetMatrix = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] ;\n\t\tmat4 skinMat = mat4(1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0);\n\t\tif(vertexUniforms.useSkin == TRUTHY) {\n\t\t\tskinMat =\n\t\t\taVertexWeight.x * vertexUniforms.globalTransformOfNodeThatTheMeshIsAttachedTo * vertexUniforms.jointMatrix[ int(aVertexJoint.x) ] * vertexUniforms.inverseBindMatrixForJoint[int(aVertexJoint.x)]+\n\t\t\taVertexWeight.y * vertexUniforms.globalTransformOfNodeThatTheMeshIsAttachedTo * vertexUniforms.jointMatrix[ int(aVertexJoint.y) ] * vertexUniforms.inverseBindMatrixForJoint[int(aVertexJoint.y)]+\n\t\t\taVertexWeight.z * vertexUniforms.globalTransformOfNodeThatTheMeshIsAttachedTo * vertexUniforms.jointMatrix[ int(aVertexJoint.z) ] * vertexUniforms.inverseBindMatrixForJoint[int(aVertexJoint.z)]+\n\t\t\taVertexWeight.w * vertexUniforms.globalTransformOfNodeThatTheMeshIsAttachedTo * vertexUniforms.jointMatrix[ int(aVertexJoint.w) ] * vertexUniforms.inverseBindMatrixForJoint[int(aVertexJoint.w)];\n\t\t\tvVertexPosition = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * skinMat * vec4(position, 1.0);\n\t\t\tvNormal = (meshMatrixUniforms.normalMatrix[ int(meshUniforms.index) ]  * skinMat * vec4(normal,0.0)).xyz;\n\t\t}else{\n\t\t\tvVertexPosition = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position, 1.0);\n\t\t\tvNormal = (meshMatrixUniforms.normalMatrix[ int(meshUniforms.index) ] *  vec4(normal,1.0)).xyz;\n\t\t}\n\t\t\n\t\tvVertexColor_0 = vertexColor_0;\n\t\t\n\t\tvUV = uv;\n\t\tvUV1 = uv1;\n\t\tvVertexTangent = vertexTangent;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tif(vertexUniforms.__displacementTextureRenderYn == TRUTHY) vVertexPosition.xyz += calcDisplacement(vNormal, vertexUniforms.displacementFlowSpeedX, vertexUniforms.displacementFlowSpeedY, vertexUniforms.displacementPower, uv, uDisplacementTexture, uDisplacementSampler);\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * vVertexPosition;\t\t\n\t}\n\t`),Ve(ci,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_fragment.systemUniforms}\n\t${Ke.GLSL_SystemUniforms_fragment.cotangent_frame}\n\t${Ke.GLSL_SystemUniforms_fragment.perturb_normal}\n\t\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform FragmentUniforms {\n        float normalPower;\n        float shininess; \n\t    float emissivePower;\n\t    float occlusionPower;\n\t    float environmentPower;\n\t    vec4 baseColorFactor;\n\t    float diffuseTexCoordIndex;\n\t    float normalTexCoordIndex;\n\t    float emissiveTexCoordIndex;\n\t    float roughnessTexCoordIndex;\n\t    float occlusionTexCoordIndex;\n\t    float metallicFactor;\n\t    float roughnessFactor;\n\t    float cutOff;\n\t    float alphaBlend;\n\t    //\n\t    float useFlatMode;\n\t    float useCutOff;\n\t    float useVertexTangent;\n\t    float useVertexColor_0;\n\t    float useMaterialDoubleSide;\n\t    //\n\t    float __diffuseTextureRenderYn;\n\t\tfloat __environmentTextureRenderYn;\n\t\tfloat __normalTextureRenderYn;\n\t\tfloat __occlusionTextureRenderYn;\n\t\tfloat __emissiveTextureRenderYn;\n\t\tfloat __roughnessTextureRenderYn;\n\t    \n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec4 vVertexColor_0;\n\tlayout( location = 1 ) in vec3 vNormal;\n\tlayout( location = 2 ) in vec2 vUV;\n\tlayout( location = 3 ) in vec2 vUV1;\n\tlayout( location = 4 ) in vec4 vVertexTangent;\n\tlayout( location = 5 ) in vec4 vVertexPosition;\n\tlayout( location = 6 ) in float vMouseColorID;\t\n\tlayout( location = 7 ) in float vSumOpacity;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 4 ) uniform sampler uDiffuseSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 5 ) uniform texture2D uDiffuseTexture;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 6 ) uniform sampler uNormalSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 7 ) uniform texture2D uNormalTexture;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 8 ) uniform sampler uRoughnessSampler;\t\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 9 ) uniform texture2D uRoughnessTexture;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 10 ) uniform sampler uEmissiveSampler;\t\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 11 ) uniform texture2D uEmissiveTexture;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 12 ) uniform sampler uEnvironmentSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 13 ) uniform textureCube uEnvironmentTexture;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 14 ) uniform sampler uOcclusionSampler;\t\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 15 ) uniform texture2D uOcclusionTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvec2 diffuseTexCoord;\n\tvec2 normalTexCoord;\n\tvec2 emissiveTexCoord;\n\tvec2 roughnessTexCoord;\n\tvec2 occlusionTexCoord;\n\tvoid main() {\n\t\t// 인덱스 찾고\n\t\tdiffuseTexCoord = fragmentUniforms.diffuseTexCoordIndex == 0.0 ? vUV : vUV1;\n\t\tnormalTexCoord = fragmentUniforms.normalTexCoordIndex == 0.0 ? vUV : vUV1;\n\t\temissiveTexCoord = fragmentUniforms.emissiveTexCoordIndex == 0.0 ? vUV : vUV1;\n\t\troughnessTexCoord = fragmentUniforms.roughnessTexCoordIndex == 0.0 ? vUV : vUV1;\n\t\tocclusionTexCoord = fragmentUniforms.occlusionTexCoordIndex == 0.0 ? vUV : vUV1;\n\t\t\n\t\t\n\t\tfloat tMetallicPower = fragmentUniforms.metallicFactor;\n\t\tfloat tRoughnessPower = fragmentUniforms.roughnessFactor;\n\t\t\n\t\tvec4 roughnessColor = vec4(0.0);\n\t\tif(fragmentUniforms.__roughnessTextureRenderYn == TRUTHY) {\n\t\t\troughnessColor = texture(sampler2D(uRoughnessTexture, uRoughnessSampler), roughnessTexCoord);\n\t\t\ttMetallicPower *= roughnessColor.b; // 메탈릭 산출 roughnessColor.b\n\t\t\ttRoughnessPower *= roughnessColor.g; // 거칠기 산출 roughnessColor.g\n\t\t}\n\t\t\n\t\t\n\t\n\t\tvec4 diffuseColor = fragmentUniforms.baseColorFactor;\n\t\tif(fragmentUniforms.useVertexColor_0 == TRUTHY) diffuseColor *= clamp(vVertexColor_0,0.0,1.0) ;\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor *= texture(sampler2D(uDiffuseTexture, uDiffuseSampler), diffuseTexCoord) ;\n\t\t\t\n\t\tfloat tAlpha = diffuseColor.a;\n\t\tif(fragmentUniforms.useCutOff == TRUTHY) {\n\t\t\tif(tAlpha <= fragmentUniforms.cutOff) discard;\n\t\t}\n\t\t\n\t    vec3 N = normalize(vNormal);\n\t    bool backFaceYn = false;\n\t    if(fragmentUniforms.useMaterialDoubleSide == TRUTHY) {\n\t\t    vec3 fdx = dFdx(vVertexPosition.xyz);\n\t\t\tvec3 fdy = dFdy(vVertexPosition.xyz);\n\t\t\tvec3 faceNormal = normalize(cross(fdy,fdx));\n\t\t\tif (dot (vNormal, faceNormal) < 0.0) { N = -N; backFaceYn = true; };\n\t    } \n\t\tvec4 normalColor = vec4(0.0);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) normalColor = texture(sampler2D(uNormalTexture, uNormalSampler), normalTexCoord) ;\n\t\tif(fragmentUniforms.useFlatMode == TRUTHY) N = getFlatNormal(vVertexPosition.xyz);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) N = perturb_normal(N, vVertexPosition.xyz, backFaceYn ?  1.0 - normalTexCoord : normalTexCoord, vec3(normalColor.r, 1.0- normalColor.g, normalColor.b), fragmentUniforms.normalPower) ;\n\n\t\tif(fragmentUniforms.useVertexTangent == TRUTHY) {\n\t\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY){\n\t\t\t\tvec3 pos_dx = dFdx(vVertexPosition.xyz);\n\t\t\t\tvec3 pos_dy = dFdy(vVertexPosition.xyz);\n\t\t\t\tvec3 tex_dx = dFdx(vec3(normalTexCoord, 0.0));\n\t\t\t\tvec3 tex_dy = dFdy(vec3(normalTexCoord, 0.0));\n\t\t\t\tvec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\n\t\t\t\tvec3 ng = normalize(vNormal);\n\t\t\t\tt = normalize(t - ng * dot(ng, t));\n\t\t\t\tvec3 b = normalize(cross(ng, t));\n\t\t\t\tmat3 tbn = mat3(t, b, ng);\n\t\t\t\tN = normalize(tbn * ((2.0 * normalColor.rgb - 1.0) * vec3(1.0, 1.0 * vVertexTangent.w,1.0)));\n\t\t\t\tN = backFaceYn ? -N : N;\n\t\t\t}\t\t\t\n\t\t}\n\n\t\tif(fragmentUniforms.__environmentTextureRenderYn == TRUTHY) {\n\t\t\t// 환경맵 계산\n\t\t\tvec3 R = reflect( vVertexPosition.xyz - systemUniforms.cameraPosition, N);\n\t\t\tvec4 reflectionColor = texture(samplerCube(uEnvironmentTexture,uEnvironmentSampler), R);\t\t\n\t\t\t// 환경맵 합성\n\t\t\tdiffuseColor.rgb = mix( diffuseColor.rgb , reflectionColor.rgb , max(tMetallicPower-tRoughnessPower,0.0)*(1.0-tRoughnessPower));\n\t\t\tdiffuseColor = mix( diffuseColor , vec4(0.04, 0.04, 0.04, 1.0) , tRoughnessPower * (tMetallicPower) * 0.5);\n\t\t}\n\t\t\n\n\n\t\n\t\toutColor = diffuseColor;\n\t\tvec4 specularLightColor = vec4(1.0, 1.0, 1.0, 1.0);\n\t    vec4 ld = vec4(0.0, 0.0, 0.0, 1.0);\n\t    vec4 ls = vec4(0.0, 0.0, 0.0, 1.0);\n\n\t    vec3 L;\t\n\n\n\t    float lambertTerm;\n\t    float intensity;\n\t    float specular;\n\n\t\tDirectionalLight lightInfo;\n\t\tvec4 lightColor;\n\t\tfor(int i=0; i<systemUniforms.directionalLightCount; i++){\n\t\t\tlightInfo = systemUniforms.directionalLightList[i];\n\t\t\tvec3 L = normalize(-lightInfo.position);\n\t\t\tfloat lambertTerm = dot(N,-L);\n\t\t\tif(lambertTerm > 0.0){\n\t\t\t\tld += lightInfo.color * diffuseColor * lambertTerm * lightInfo.intensity * lightInfo.color.a;\n\t\t\t\tspecular = pow( max(dot(reflect(L, N), -L), 0.0), pow(fragmentUniforms.shininess, 1.0-tRoughnessPower+0.04) );\n\t\t\t\tspecular *= pow(1.0-tRoughnessPower+0.04, 2.0 * (1.0-tMetallicPower)) ;\n\t\t\t\tls +=  specularLightColor * specular * fragmentUniforms.metallicFactor * lightInfo.intensity * lightInfo.color.a * (1.0-tRoughnessPower+0.04);\n\t\t\t}\n\t\t}\n\t\t\n\t\t vec4 finalColor = ld + ls + la;;\n\t\t\n\t\tif(fragmentUniforms.__emissiveTextureRenderYn == TRUTHY) {\n\t\t\t// 이미시브 합성\n\t\t\tvec4 emissiveColor = texture(sampler2D(uEmissiveTexture, uEmissiveSampler), emissiveTexCoord);\n\t\t\tfinalColor.rgb += emissiveColor.rgb * fragmentUniforms.emissivePower;\n\t\t}\t\t\n\t\n\t\tif(fragmentUniforms.__occlusionTextureRenderYn == TRUTHY) {\n\t\t// 오클루젼 합성\n\t\t\tvec4 occlusionColor =texture(sampler2D(uOcclusionTexture, uOcclusionSampler), occlusionTexCoord);\n\t\t\tfinalColor.rgb = mix(finalColor.rgb, finalColor.rgb * occlusionColor.r, occlusionColor.r * fragmentUniforms.occlusionPower);\n\t\t}\n\n\n\t\t// 알파블렌드 - BLEND\n\t\tif( fragmentUniforms.alphaBlend == 2.0 ) {\t\t\n\t\t\tfinalColor.a = tAlpha;\n\t\t}\n\t\toutColor = finalColor;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve(ci,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(ci,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.VERTEX,type:"sampler"},{binding:2,visibility:GPUShaderStage.VERTEX,type:"sampled-texture"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:4,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:5,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:6,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:7,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:8,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:9,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:10,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:11,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:12,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:13,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture",viewDimension:"cube"},{binding:14,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:15,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"}]}),Ve(ci,"uniformBufferDescriptor_vertex",[{size:127*$e.mat4,valueName:"jointMatrix"},{size:127*$e.mat4,valueName:"inverseBindMatrixForJoint"},{size:$e.mat4,valueName:"globalTransformOfNodeThatTheMeshIsAttachedTo"},{size:$e.float,valueName:"displacementFlowSpeedX"},{size:$e.float,valueName:"displacementFlowSpeedY"},{size:$e.float,valueName:"displacementPower"},{size:$e.float,valueName:"__displacementTextureRenderYn"},{size:$e.float,valueName:"useSkin"}]),Ve(ci,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"normalPower"},{size:$e.float,valueName:"shininess"},{size:$e.float,valueName:"emissivePower"},{size:$e.float,valueName:"occlusionPower"},{size:$e.float,valueName:"environmentPower"},{size:$e.float4,valueName:"baseColorFactor"},{size:$e.float,valueName:"diffuseTexCoordIndex"},{size:$e.float,valueName:"normalTexCoordIndex"},{size:$e.float,valueName:"emissiveTexCoordIndex"},{size:$e.float,valueName:"roughnessTexCoordIndex"},{size:$e.float,valueName:"occlusionTexCoordIndex"},{size:$e.float,valueName:"metallicFactor"},{size:$e.float,valueName:"roughnessFactor"},{size:$e.float,valueName:"cutOff"},{size:$e.float,valueName:"alphaBlend"},{size:$e.float,valueName:"useFlatMode"},{size:$e.float,valueName:"useCutOff"},{size:$e.float,valueName:"useVertexTangent"},{size:$e.float,valueName:"useVertexColor_0"},{size:$e.float,valueName:"useMaterialDoubleSide"},{size:$e.float,valueName:"__diffuseTextureRenderYn"},{size:$e.float,valueName:"__environmentTextureRenderYn"},{size:$e.float,valueName:"__normalTextureRenderYn"},{size:$e.float,valueName:"__occlusionTextureRenderYn"},{size:$e.float,valueName:"__emissiveTextureRenderYn"},{size:$e.float,valueName:"__roughnessTextureRenderYn"}]);class hi{constructor(t,e){this.attributeHint=t,this.format=e,this.stride=$e[e]}}class di extends ze{get volume(){return this._volume||this.volumeCalculate(),this._volume}constructor(){super(),Ve(this,"_volume",void 0)}volumeCalculate(){let t,e,r,n,i,o,a,s,u,l,f,m,c=this.interleaveBuffer.stride;for(t=e=r=n=i=o=0,l=this.interleaveBuffer.data,f=0,m=this.interleaveBuffer.vertexCount;f<m;f++)a=f*c,s=a+1,u=a+2,t=l[a]<t?l[a]:t,n=l[a]>n?l[a]:n,e=l[s]<e?l[s]:e,i=l[s]>i?l[s]:i,r=l[u]<r?l[u]:r,o=l[u]>o?l[u]:o;return this._volume={},this._volume.volume=[n-t,i-e,o-r],this._volume.minX=t,this._volume.maxX=n,this._volume.minY=e,this._volume.maxY=i,this._volume.minZ=r,this._volume.maxZ=o,this._volume.xSize=Math.max(Math.abs(t),Math.abs(n)),this._volume.ySize=Math.max(Math.abs(e),Math.abs(i)),this._volume.zSize=Math.max(Math.abs(r),Math.abs(o)),this._volume.geometryRadius=Math.max(this._volume.xSize,this._volume.ySize,this._volume.zSize),this._volume}}class pi extends di{constructor(t,e,r){super(),Ve(this,"interleaveBuffer",void 0),Ve(this,"indexBuffer",void 0),Ve(this,"vertexState",void 0),this.interleaveBuffer=e,this.indexBuffer=r;let n=0,i=[];e.interleaveInfo.forEach((function(t,e){i.push({attributeHint:t.attributeHint,shaderLocation:e,offset:n,format:t.format}),n+=t.stride})),this.vertexState={indexFormat:"uint32",vertexBuffers:[{arrayStride:n,attributes:i}]},this.volumeCalculate()}}class vi extends ze{constructor(t,e,r,n,i,o){if(super(),Ve(this,"type",void 0),Ve(this,"vertexCount",void 0),Ve(this,"bufferDescriptor",void 0),Ve(this,"GPUBuffer",void 0),Ve(this,"redGPUContext",void 0),t.state.Buffer[r].has(e))return t.state.Buffer[r].get(e);let a;switch(this.redGPUContext=t,this.type=r,this.vertexCount=0,this.stride=0,r){case vi.TYPE_VERTEX:a=o||GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST,this.interleaveInfo=i,i.forEach(t=>{this.vertexCount+=t.stride/Float32Array.BYTES_PER_ELEMENT,this.stride+=t.stride/Float32Array.BYTES_PER_ELEMENT}),this.vertexCount=n.length/this.vertexCount;break;case vi.TYPE_INDEX:a=o||GPUBufferUsage.INDEX|GPUBufferUsage.COPY_DST,this.indexNum=n.length}this.bufferDescriptor={size:n.byteLength,usage:a},this.data=n,this.GPUBuffer=t.device.createBuffer(this.bufferDescriptor),t.device.defaultQueue.writeBuffer(this.GPUBuffer,0,n),t.state.Buffer[r].set(e,this)}update(t){this.data=t,this.redGPUContext.device.defaultQueue.writeBuffer(this.GPUBuffer,0,new Float32Array(t))}destroy(){this.GPUBuffer&&this.GPUBuffer.destroy(),this.GPUBuffer=null}}Ve(vi,"TYPE_VERTEX","vertexBuffer"),Ve(vi,"TYPE_INDEX","indexBuffer");let _i=function(t,e,r,n,i,o,a,s,u){let l=0,f=e.length/3,m=0;for(;l<f;l++)e.length&&(t[m++]=e[3*l+0],t[m++]=e[3*l+1],t[m++]=e[3*l+2]),n.length?(t[m++]=n[3*l+0],t[m++]=n[3*l+1],t[m++]=n[3*l+2]):(t[m++]=0,t[m++]=0,t[m++]=0),i.length||i.push(0,0),i.length&&(t[m++]=i[2*l+0],t[m++]=i[2*l+1]),o.length?(t[m++]=o[2*l+0],t[m++]=o[2*l+1]):i.length&&(t[m++]=i[2*l+0],t[m++]=i[2*l+1]),r.length?(t[m++]=r[4*l+0],t[m++]=r[4*l+1],t[m++]=r[4*l+2],t[m++]=r[4*l+3]):(t[m++]=0,t[m++]=0,t[m++]=0,t[m++]=0),a.length?(t[m++]=a[4*l+0],t[m++]=a[4*l+1],t[m++]=a[4*l+2],t[m++]=a[4*l+3]):(t[m++]=0,t[m++]=0,t[m++]=0,t[m++]=0),s.length?(t[m++]=s[4*l+0],t[m++]=s[4*l+1],t[m++]=s[4*l+2],t[m++]=s[4*l+3]):(t[m++]=0,t[m++]=0,t[m++]=0,t[m++]=0),u.length?(t[m++]=u[4*l+0],t[m++]=u[4*l+1],t[m++]=u[4*l+2],t[m++]=u[4*l+3]):(t[m++]=0,t[m++]=0,t[m++]=0,t[m++]=0)},gi=function(t,e,r,n,i,o,a,s,u,l,f,m){let c,h=n.componentType_BYTES_PER_ELEMENT,d=n.bufferViewByteStride,p=n.bufferURIDataView,v=n.getMethod,_=n.accessor.type,g=n.accessor.count,x=0,y=d/h,T=n.startIndex;switch(_){case"VEC4":if(d)for(c=T+g*(d/h);T<c;T++)x%y<4&&("WEIGHTS_0"==r?u.push(p[v](T*h,!0)):"JOINTS_0"==r?l.push(p[v](T*h,!0)):"COLOR_0"==r?f.push(p[v](T*h,!0)):"TANGENT"==r&&m.push(p[v](T*h,!0))),x++;else for(c=T+4*g;T<c;T++)"WEIGHTS_0"==r?u.push(p[v](T*h,!0)):"JOINTS_0"==r?l.push(p[v](T*h,!0)):"COLOR_0"==r?f.push(p[v](T*h,!0)):"TANGENT"==r&&m.push(p[v](T*h,!0)),x++;break;case"VEC3":if(d)for(c=T+g*(d/h);T<c;T++)x%y<3&&("NORMAL"==r?s.push(p[v](T*h,!0)):"POSITION"==r?i.push(p[v](T*h,!0)):"COLOR_0"==r&&(f.push(p[v](T*h,!0)),x%y==2&&f.push(1))),x++;else for(c=T+3*g;T<c;T++)"NORMAL"==r?s.push(p[v](T*h,!0)):"POSITION"==r?i.push(p[v](T*h,!0)):"COLOR_0"==r&&(f.push(p[v](T*h,!0)),x%3==2&&f.push(1)),x++;break;case"VEC2":if(d)for(c=T+g*(d/h);T<c;T++)x%y<2&&("TEXCOORD_0"==r?o.push(p[v](T*h,!0)):"TEXCOORD_1"==r?a.push(p[v](T*h,!0)):He.throwFunc("VEC2에서 현재 지원하고 있지 않는 키",r)),x++;else for(c=T+2*g;T<c;T++)"TEXCOORD_0"==r?o.push(p[v](T*h,!0)):"TEXCOORD_1"==r?a.push(p[v](T*h,!0)):He.throwFunc("VEC2에서 현재 지원하고 있지 않는 키",r),x++}},xi=function(){let t=function(t,e,r){return e.images[r].uri.indexOf("blob:http")>-1?e.images[r].uri:(e.images[r].uri.indexOf(";base64,")>-1?"":t.path)+e.images[r].uri},e=function(t,e,r){let n={magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",addressModeU:"repeat",addressModeV:"repeat",addressModeW:"repeat"},i={33071:"clamp-to-edge",33648:"mirror-repeat",10497:"repeat"},o={9728:"nearest",9729:"linear"},a={9728:"nearest",9729:"linear"};if(e.samplers){let t=e.samplers[r];"magFilter"in t&&(n.magFilter=o[t.magFilter]||"linear"),"minFilter"in t&&(n.minFilter=a[t.minFilter]||"linear"),"wrapS"in t&&(n.addressModeU=i[t.wrapS]),"wrapT"in t&&(n.addressModeV=i[t.wrapT])}return n.string=JSON.stringify(n),n};return function(r,n,i){let o,a,s=!1,u=.5;if("material"in i){let l=r.environmentTexture;o=new ci(r.redGPUContext,null,l,null,null,null,null);let f=i.material,m=n.materials[f];if("doubleSided"in m&&(s=!!m.doubleSided),"alphaMode"in m&&(a=m.alphaMode),"alphaCutoff"in m&&(u=m.alphaCutoff),"baseColorTexture"in m.pbrMetallicRoughness){let i=m.pbrMetallicRoughness.baseColorTexture.index,a=n.textures[i],s=a.source,u=t(r,n,s),l=a.sampler,f=e(0,n,l);r.parsingResult.textureRawList.push({src:u,sampler:new jr(r.redGPUContext,f),targetTexture:"diffuseTexture",targetMaterial:o})}if("metallicRoughnessTexture"in m.pbrMetallicRoughness){let i=m.pbrMetallicRoughness.metallicRoughnessTexture.index,a=n.textures[i],s=a.source,u=t(r,n,s),l=a.sampler,f=e(0,n,l);r.parsingResult.textureRawList.push({src:u,sampler:new jr(r.redGPUContext,f),targetTexture:"roughnessTexture",targetMaterial:o})}let c=m.normalTexture;if(null!=c){c=c.index;let i=n.textures[c],a=i.source,s=t(r,n,a),u=i.sampler,l=e(0,n,u);r.parsingResult.textureRawList.push({src:s,sampler:new jr(r.redGPUContext,l),targetTexture:"normalTexture",targetMaterial:o})}let h=m.emissiveTexture;if(null!=h){h=h.index;let i=n.textures[h],a=i.source,s=t(r,n,a),u=i.sampler,l=e(0,n,u);r.parsingResult.textureRawList.push({src:s,sampler:new jr(r.redGPUContext,l),targetTexture:"emissiveTexture",targetMaterial:o})}let d,p,v,_=m.occlusionTexture;if(null!=_){_=_.index;let i=n.textures[_],a=i.source,s=t(r,n,a),u=i.sampler,l=e(0,n,u);r.parsingResult.textureRawList.push({src:s,sampler:new jr(r.redGPUContext,l),targetTexture:"occlusionTexture",targetMaterial:o})}"metallicFactor"in m.pbrMetallicRoughness&&(d=m.pbrMetallicRoughness.metallicFactor),"roughnessFactor"in m.pbrMetallicRoughness&&(p=m.pbrMetallicRoughness.roughnessFactor),v=m.pbrMetallicRoughness&&m.pbrMetallicRoughness.baseColorFactor?m.pbrMetallicRoughness.baseColorFactor:[1,1,1,1],o.baseColorFactor=v,m.pbrMetallicRoughness&&(o.metallicFactor=null!=d?d:1,o.roughnessFactor=null!=p?p:1),o.emissiveFactor=null!=m.emissiveFactor?m.emissiveFactor:new Float32Array([1,1,1]),m.pbrMetallicRoughness&&(m.pbrMetallicRoughness.metallicRoughnessTexture&&(o.roughnessTexCoordIndex=m.pbrMetallicRoughness.metallicRoughnessTexture.texCoord||0),m.pbrMetallicRoughness.baseColorTexture&&(o.diffuseTexCoordIndex=m.pbrMetallicRoughness.baseColorTexture.texCoord||0)),m.occlusionTexture&&(o.occlusionTexCoordIndex=m.occlusionTexture.texCoord||0,o.occlusionPower=m.occlusionTexture.strength||1),m.emissiveTexture&&(o.emissiveTexCoordIndex=m.emissiveTexture.texCoord||0),m.normalTexture&&(o.normalTexCoordIndex=m.normalTexture.texCoord||0)}else{let t=[Math.random(),Math.random(),Math.random(),1];o=new ci(r.redGPUContext),o.baseColorFactor=t}return[o,s,a,u]}}(),yi=function(t,e,r,n,i,o,a,s,u,l){if(r.sparse){let o=[],a=[],s=[];!function(){let i,u,l,f,m,c=r.sparse,h=c.values,d=n.bufferViews[h.bufferView],p=d.buffer;n.buffers[p].uri&&(i=t.parsingResult.uris.buffers[p]),f=ti[r.componentType],f==Float32Array&&(m="getFloat32"),f==Uint32Array&&(m="getUint32"),f==Uint16Array&&(m="getUint16"),f==Int16Array&&(m="getInt16"),f==Uint8Array&&(m="getUint8"),f==Int8Array&&(m="getInt8");let v=r.byteOffset||0;switch(u=((d.byteOffset||0)+v)/f.BYTES_PER_ELEMENT,r.type){case"VEC3":for(l=u+f.BYTES_PER_ELEMENT*c.count/f.BYTES_PER_ELEMENT*3;u<l;u++)"NORMAL"==e?a.push(i[m](u*f.BYTES_PER_ELEMENT,!0)):"POSITION"==e&&o.push(i[m](u*f.BYTES_PER_ELEMENT,!0));break;case"VEC2":for(l=u+f.BYTES_PER_ELEMENT*c.count/f.BYTES_PER_ELEMENT*2;u<l;u++)"TEXCOORD_0"==e&&s.push(i[m](u*f.BYTES_PER_ELEMENT,!0))}}();let u,l,f,m,c,h=r.sparse,d=h.indices,p=n.bufferViews[d.bufferView],v=p.buffer;n.buffers[v].uri&&(u=t.parsingResult.uris.buffers[v]),m=ti[d.componentType],m==Uint16Array?c="getUint16":m==Uint8Array&&(c="getUint8");let _=d.byteOffset||0;l=((p.byteOffset||0)+_)/m.BYTES_PER_ELEMENT,f=l+m.BYTES_PER_ELEMENT*h.count/m.BYTES_PER_ELEMENT;let g=0;for(;l<f;l++){let t=u[c](l*m.BYTES_PER_ELEMENT,!0);i[3*t]=o[3*g],i[3*t+1]=o[3*g+1],i[3*t+2]=o[3*g+2],g++}}};class Ti{constructor(t,e,r,n){let i=[];r.targets&&r.targets.forEach((function(r){let n={vertices:[],verticesColor_0:[],normals:[],uvs:[],uvs1:[],jointWeights:[],joints:[],tangents:[]};i.push(n);for(let i in r){let o=n.vertices,a=n.verticesColor_0,s=n.normals,u=n.uvs,l=n.uvs1,f=n.jointWeights,m=n.joints,c=n.tangents,h=r[i],d=new ei(t,e,h);gi(0,0,i,d,o,u,l,s,f,m,a,c),d.accessor.sparse&&yi(t,i,d.accessor,e,o)}})),this.list=i,i.weights=n||[],this.origin=null}}let Si=function(t,e,r,n,i){if("mesh"in n){let r=n.mesh;(function(t,e,r){let n,i,o,a;r.name&&(n=r.name);let s=[];return r.primitives.forEach((function(u,l){let f,m,c,h,d=[],p=[],v=[],_=[],g=[],x=[],y=[],T=[],S=[];if(u.attributes)for(let r in u.attributes){let n=u.attributes[r],i=new ei(t,e,n);gi(0,0,r,i,p,_,g,x,y,T,v,S),i.accessor.sparse&&yi(t,r,i.accessor,e,p)}if("indices"in u){let r=u.indices;!function(t,e,r,n){let i,o=r.componentType_BYTES_PER_ELEMENT,a=r.bufferURIDataView,s=r.getMethod,u=r.accessor.type,l=r.accessor.count,f=r.startIndex;switch(u){case"SCALAR":for(i=f+l;f<i;f++)n.push(a[s](f*o,!0))}}(0,0,new ei(t,e,r),d)}if(m=xi(t,e,u),i=m[1],o=m[2],a=m[3],m=m[0],m instanceof ci&&t.parsingResult.materials.push(m),"mode"in u)switch(u.mode){case 0:c="point-list";break;case 1:case 2:c="line-list";break;case 3:c="line-strip";break;case 4:c="triangle-list";break;case 5:case 6:c="triangle-strip"}h=x.length?x:He.calculateNormals(p,d);let U,M=[];_i(M,p,v,h,_,g,y,T,S);let b=[];if(p.length&&b.push(new hi("aVertexPosition","float3")),h.length&&b.push(new hi("aVertexNormal","float3")),_.length&&b.push(new hi("aTexcoord","float2")),(g.length||_.length)&&b.push(new hi("aTexcoord1","float2")),b.push(new hi("aVertexColor_0","float4")),b.push(new hi("aVertexWeight","float4")),b.push(new hi("aVertexJoint","float4")),b.push(new hi("aVertexTangent","float4")),U=new pi(t.redGPUContext,new vi(t.redGPUContext,"testGLTF_interleaveBuffer_"+ze.getNextUUID(),vi.TYPE_VERTEX,new Float32Array(M),b),d.length?new vi(t.redGPUContext,"testGLTF_indexBuffer_"+ze.getNextUUID(),vi.TYPE_INDEX,new Uint32Array(d)):null),m||He.throwFunc("재질을 파싱할수없는경우 ",u),f=new Yn(t.redGPUContext,U,m),n&&(f.name=n,t.parsingOption))for(let e in t.parsingOption)n.toLowerCase().indexOf(e)>-1&&t.parsingOption[e](f);switch(f.primitiveTopology=c||"triangle-list",i&&(f.cullMode="none",m.useMaterialDoubleSide=!0),o){case"BLEND":f.renderDrawLayerIndex=oo.DRAW_LAYER_INDEX1,m.alphaBlend=2;break;case"MASK":m.alphaBlend=1,m.cutOff=a,m.useCutOff=!0;break;default:m.alphaBlend=0,m.useCutOff=!1}v.length&&(m.useVertexColor_0=!0),S.length&&(m.useVertexTangent=!0);let P=new Ti(t,e,u,r.weights);P.list.forEach((function(t){let e;e=t.normals.length?t.normals:He.calculateNormals(t.vertices,d);let r=[];_i(r,t.vertices,t.verticesColor_0,e,t.uvs,t.uvs1,t.jointWeights,t.joints,t.tangents),t.interleaveData=r})),f._morphInfo=P,f._morphInfo.origin=new Float32Array(M);let w=f.geometry.interleaveBuffer.data,G=0;b.forEach((function(t){G+=t.size})),f._morphInfo.list.forEach((function(t,e){let r=0,n=w.length/G,i=null==f._morphInfo.list.weights[e]?.5:f._morphInfo.list.weights[e];for(;r<n;r++)w[r*G+0]+=t.vertices[3*r+0]*i,w[r*G+1]+=t.vertices[3*r+1]*i,w[r*G+2]+=t.vertices[3*r+2]*i})),f.geometry.interleaveBuffer.update(w),f._morphInfo.origin=new Float32Array(w),u.Mesh=f,s.push(f)})),s})(t,e,e.meshes[r]).forEach((function(r){i.addChild(n.Mesh=r),si(r,n),"children"in n&&n.children.forEach((function(n){Si(t,e,n,e.nodes[n],r)})),"skin"in n&&li(t,e,e.skins[n.skin],r)}))}else{let o;if(t.parsingResult.groups[r]?(o=t.parsingResult.groups[r],n.Mesh=o):(o=new Yn(t.redGPUContext),i.addChild(o),n.Mesh=o,t.parsingResult.groups[r]=o,t.parsingResult.groups[r].name=n.name),si(o,n),"camera"in n){t.parsingResult.cameras[n.camera]._parentMesh=i,t.parsingResult.cameras[n.camera]._targetMesh=o;let e=new Yn(t.redGPUContext);o.addChild(e),t.parsingResult.cameras[n.camera]._cameraMesh=e}"children"in n&&n.children.forEach((function(r){Si(t,e,r,e.nodes[r],o)})),"skin"in n&&li(t,e,e.skins[n.skin],o)}},Ui=function(t,e,r){let n,i,o,a;o=e.scenes[0].nodes,n=0,i=o.length;let s=function(){a=o[n],Si(t,e,a,e.nodes[a],t.resultMesh),n++,n===i?r&&r():s()};s()};var Mi;!function(){var t,e,r=(e={},function(t,r,n,i){if(e[t])requestAnimationFrame((function(){n(e[t])}));else{var o=new XMLHttpRequest;o.open("GET",t,!0),o.onreadystatechange=function(r){4===o.readyState&&200===o.status?(e[t]=o,n(o)):i(o,r)},o.send()}}),n=function(){var t={};return function(e,r,n){if(t[e])requestAnimationFrame((function(){r(t[e])}));else{var i=new XMLHttpRequest;i.open("GET",e,!0),i.overrideMimeType("application/octet-stream"),i.responseType="arraybuffer",i.onreadystatechange=function(o){4===i.readyState&&200===i.status?(t[e]=i,r(i)):n(i,o)},i.send()}}}();Mi=function(e,i,o,s,u,l){if(!(this instanceof Mi))return new Mi(e,i,o,s,u,l);this.redGPUContext=e;var f=this;if(o.indexOf(".glb")>-1){var m;m=function(t){var e="";return t.map((function(t){e+=String.fromCharCode(t)})),e},n(i+o,(function(r){for(var n=null,i=null,o=null,a=null,u=0,l=0,c=null,h=new DataView(r.response,12),d=(m(new Uint8Array(r.response,0,4)),h.getUint32(4,!0),h.getUint32(8,!0),new DataView(r.response,12));u<d.byteLength;)l=d.getUint32(u,!0),u+=4,c=d.getUint32(u,!0),u+=4,1313821514===c?(i=new Uint8Array(r.response,12+u,l),n=m(i)):5130562===c&&(a=12+u,o=r.response.slice(a,a+l)),u+=l;if(null===n)throw new Error("JSON content not found");var p=JSON.parse(n),v=o;p.images&&p.images.forEach((function(t){if("image/png"===t.mimeType||"image/jpeg"===t.mimeType||"image/gif"===t.mimeType){var e;e=p.bufferViews[t.bufferView].byteOffset||0;var r=v.slice(e,e+p.bufferViews[t.bufferView].byteLength),n=new Blob([new Uint8Array(r)],{type:t.mimeType});t.uri=URL.createObjectURL(n)}})),t(f,e,p,(function(){s&&s(f)}),v)}),(function(t,e){}))}else r(i+o,null,(function(r){t(f,e,JSON.parse(r.response),(function(){s&&s(f)}))}),(function(t,e){}));this.redGPUContext=e,this.path=i,this.fileName=o,this.resultMesh=new Yn(e),this.resultMesh.name="instanceOfGLTFLoader_"+ze.getNextUUID(),this.parsingResult={groups:[],materials:[],uris:{buffers:[]},textures:{},textureRawList:[],cameras:[],animations:[]},this.parsingOption=l,this.environmentTexture=u||null;var c=null;this.stopAnimation=function(){a.indexOf(c)>-1&&a.splice(a.indexOf(c),1)},this.playAnimation=function(t){a.push(c={startTime:performance.now(),targetAnimationData:t})}};var i,o,a=[];Mi.animationLooper=t=>function(t,e){let r,n,i,o,a,s,u,l,f,m,c,h,d,p,v,_,g,x,y,T,S,U,M,b,P,w,G,B,E,C,L,R,D,I,N,F,A,V,O,Y,X,z,$,k,W,Z,Q,H,q,j,J,K,tt,et,rt,nt,it,ot,at,st,ut=e.length;for(;ut--;)for(C=e[ut],B=C.targetAnimationData,L=B.length;L--;){for(R=B[L],r=(t-C.startTime)%(1e3*B.maxTime)/1e3,D=R.target,F=R.time,A=R.time,V=F.length,O=0,N=F.length-1,I=0,n=F[N],i=F[I];O<V;O++){let t=F[O];if(t<r&&(N=O,n=F[N],null==F[N+1]?(I=0,i=F[I]):(I=N+1,i=F[I])),0==O&&r<F[O]){N=V-1,n=F[N],I=O,i=F[I],r=t;break}if(O==V-1&&r>t){N=0,n=F[N],I=V-1,i=F[I],r=t;break}}if(D&&(D.dirtyTransform=!0),"CUBICSPLINE"==R.interpolation){E=i-n,"NaN"==E.toString()&&(E=0);let t=(r-n)/E;"NaN"==t.toString()&&(t=0);let e=t*t,B=e*t,C=-2*B+3*e,L=B-e,F=1-C,O=L-e+t;if(D){let t,e,r,n,i=R.data;switch(R.key){case"rotation":if(M=i[12*N+4],b=i[12*N+5],P=i[12*N+6],w=i[12*N+7],G=M*M+b*b+P*P+w*w,G>0&&(G=1/Math.sqrt(G)),v=M*G,_=b*G,g=P*G,x=w*G,M=i[12*I+4],b=i[12*I+5],P=i[12*I+6],w=i[12*I+7],G=M*M+b*b+P*P+w*w,G>0&&(G=1/Math.sqrt(G)),o=M*G,a=b*G,s=P*G,u=w*G,M=i[12*N+8],b=i[12*N+9],P=i[12*N+10],w=i[12*N+11],G=M*M+b*b+P*P+w*w,G>0&&(G=1/Math.sqrt(G)),y=M*G,T=b*G,S=P*G,U=w*G,M=i[12*N+0],b=i[12*N+1],P=i[12*N+2],w=i[12*N+3],G=M*M+b*b+P*P+w*w,G>0&&(G=1/Math.sqrt(G)),c=M*G,h=b*G,d=P*G,p=w*G,N!=V-1){t=v,e=y*E,r=o,n=c*E,M=F*t+O*e+C*r+L*n,t=_,e=T*E,r=a,n=h*E,b=F*t+O*e+C*r+L*n,t=g,e=S*E,r=s,n=d*E,P=F*t+O*e+C*r+L*n,t=x,e=U*E,r=u,n=p*E,w=F*t+O*e+C*r+L*n;let i=[],l=[0,0,0],f=M+M,m=b+b,G=P+P,B=M*f,R=M*m,I=M*G,N=b*m,A=b*G,V=P*G,Y=w*f,X=w*m,z=w*G;i[0]=1-(N+V),i[4]=R-z,i[8]=I+X,i[1]=R+z,i[5]=1-(B+V),i[9]=A-Y,i[2]=I-X,i[6]=A+Y,i[10]=1-(B+N),i[3]=0,i[7]=0,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1;let $=i[0],k=i[4],W=i[8],Z=i[5],Q=i[9],H=i[6],q=i[10];l[1]=Math.asin(Math.max(-1,Math.min(1,W))),Math.abs(W)<.99999?(l[0]=Math.atan2(-Q,q),l[2]=Math.atan2(-k,$)):(l[0]=Math.atan2(H,Z),l[2]=0),l[0]=-180*l[0]/Math.PI,l[1]=-180*l[1]/Math.PI,l[2]=-180*l[2]/Math.PI,D._rotationX=l[0],D._rotationY=l[1],D._rotationZ=l[2]}break;case"translation":o=i[9*N+3],a=i[9*N+4],s=i[9*N+5],v=i[9*I+3],_=i[9*I+4],g=i[9*I+5],y=i[9*N+6],T=i[9*N+7],S=i[9*N+8],l=i[9*I+0],f=i[9*I+1],m=i[9*I+2],N!=V-1&&(t=v,e=y*E,r=o,n=l*E,D._x=F*t+O*e+C*r+L*n,t=_,e=T*E,r=a,n=f*E,D._y=F*t+O*e+C*r+L*n,t=g,e=S*E,r=s,n=m*E,D._z=F*t+O*e+C*r+L*n);break;case"scale":o=i[9*N+3],a=i[9*N+4],s=i[9*N+5],v=i[9*I+3],_=i[9*I+4],g=i[9*I+5],y=i[9*N+6],T=i[9*N+7],S=i[9*N+8],l=i[9*I+0],f=i[9*I+1],m=i[9*I+2],N!=V-1&&(t=v,e=y*E,r=o,n=l*E,D._scaleX=F*t+O*e+C*r+L*n,t=_,e=T*E,r=a,n=f*E,D._scaleY=F*t+O*e+C*r+L*n,t=g,e=S*E,r=s,n=m*E,D._scaleZ=F*t+O*e+C*r+L*n);break;case"weights":for(Y=R.targets.length;Y--;){let t;for(X=R.targets[Y],z=X.geometry.interleaveBuffer.data,$=X._morphInfo.origin,k=X.geometry.interleaveBuffer.stride,Z=z.length/k,et=X._morphInfo.list.length,A=R.data,rt=X._morphInfo.list,rt.cacheData||(rt.cacheData={}),W=0;W<Z;W++){if(tt=W*k,st=rt.cacheData[tt+"_"+N+"_"+I],st)Q=st[0],H=st[1],q=st[2],j=st[3],J=st[4],K=st[5];else{for(Q=$[tt],H=$[tt],q=$[tt+1],j=$[tt+1],J=$[tt+2],K=$[tt+2],nt=et;nt--;)nt%3==1&&(it=A[N*et+nt],ot=A[I*et+nt],at=rt[nt].interleaveData,t=at[tt],Q+=it*t,H+=ot*t,t=at[tt+1],q+=it*t,j+=ot*t,t=at[tt+2],J+=it*t,K+=ot*t);rt.cacheData[tt+"_"+N+"_"+I]=[Q,H,q,j,J,K]}z[tt]=Q+E*(H-Q),z[tt+1]=q+E*(j-q),z[tt+2]=J+E*(K-J)}X.geometry.interleaveBuffer.update(z)}}}}else if(E="STEP"==R.interpolation?0:(r-n)/(i-n),"NaN"==E.toString()&&(E=0),D){let t=R.data;switch(R.key){case"rotation":let e,r,n,i,l;M=t[4*N],b=t[4*N+1],P=t[4*N+2],w=t[4*N+3],G=M*M+b*b+P*P+w*w,G>0&&(G=1/Math.sqrt(G)),v=M*G,_=b*G,g=P*G,x=w*G,M=t[4*I],b=t[4*I+1],P=t[4*I+2],w=t[4*I+3],G=M*M+b*b+P*P+w*w,G>0&&(G=1/Math.sqrt(G)),o=M*G,a=b*G,s=P*G,u=w*G,r=v*o+_*a+g*s+x*u,r<0&&(r=-r,o=-o,a=-a,s=-s,u=-u),1-r>Ae.glMatrix.EPSILON?(e=Math.acos(r),n=Math.sin(e),i=Math.sin((1-E)*e)/n,l=Math.sin(E*e)/n):(i=1-E,l=E),M=i*v+l*o,b=i*_+l*a,P=i*g+l*s,w=i*x+l*u;let f=[],m=[0,0,0],c=M+M,h=b+b,d=P+P,p=M*c,y=M*h,T=M*d,S=b*h,U=b*d,B=P*d,C=w*c,L=w*h,F=w*d;f[0]=1-(S+B),f[4]=y-F,f[8]=T+L,f[1]=y+F,f[5]=1-(p+B),f[9]=U-C,f[2]=T-L,f[6]=U+C,f[10]=1-(p+S),f[3]=0,f[7]=0,f[11]=0,f[12]=0,f[13]=0,f[14]=0,f[15]=1;let V=f[0],O=f[4],ut=f[8],lt=f[5],ft=f[9],mt=f[6],ct=f[10];m[1]=Math.asin(Math.max(-1,Math.min(1,ut))),Math.abs(ut)<.99999?(m[0]=Math.atan2(-ft,ct),m[2]=Math.atan2(-O,V)):(m[0]=Math.atan2(mt,lt),m[2]=0),m[0]=-180*m[0]/Math.PI,m[1]=-180*m[1]/Math.PI,m[2]=-180*m[2]/Math.PI,D._rotationX=m[0],D._rotationY=m[1],D._rotationZ=m[2];break;case"translation":o=t[3*I],a=t[3*I+1],s=t[3*I+2],v=t[3*N],_=t[3*N+1],g=t[3*N+2],D._x=v+E*(o-v),D._y=_+E*(a-_),D._z=g+E*(s-g);break;case"scale":o=t[3*I],a=t[3*I+1],s=t[3*I+2],v=t[3*N],_=t[3*N+1],g=t[3*N+2],D._scaleX=v+E*(o-v),D._scaleY=_+E*(a-_),D._scaleZ=g+E*(s-g);break;case"weights":for(Y=R.targets.length;Y--;){let t;for(X=R.targets[Y],z=X.geometry.interleaveBuffer.data,$=X._morphInfo.origin,k=X.geometry.interleaveBuffer.stride,Z=z.length/k,et=X._morphInfo.list.length,A=R.data,rt=X._morphInfo.list,rt.cacheData||(rt.cacheData={}),W=0;W<Z;W++){if(tt=W*k,st=rt.cacheData[tt+"_"+N+"_"+I],st)Q=st[0],H=st[1],q=st[2],j=st[3],J=st[4],K=st[5];else{for(Q=$[tt],H=$[tt],q=$[tt+1],j=$[tt+1],J=$[tt+2],K=$[tt+2],nt=et;nt--;)it=A[N*et+nt],ot=A[I*et+nt],at=rt[nt].interleaveData,t=at[tt],Q+=it*t,H+=ot*t,t=at[tt+1],q+=it*t,j+=ot*t,t=at[tt+2],J+=it*t,K+=ot*t;rt.cacheData[tt+"_"+N+"_"+I]=[Q,H,q,j,J,K]}z[tt]=Q+E*(H-Q),z[tt+1]=q+E*(j-q),z[tt+2]=J+E*(K-J)}X.geometry.interleaveBuffer.update(z)}}}}}(t,a),i=function(t){void 0===t.asset&&He.throwFunc("GLTFLoader - asset은 반드시 정의되어야함"),t.asset.version[0]<2&&He.throwFunc("GLTFLoader - asset의 버전은 2.0이상이어야함")},o=function(t,e,r){var i=0,o=0;e.buffers.forEach((function(e,a){if(e._redURIkey="buffers",e._redURIIndex=a,i++,e.uri instanceof ArrayBuffer)o++,t.parsingResult.uris[e._redURIkey][e._redURIIndex]=new DataView(e.uri),o==i&&r&&r();else{var s="data:"==e.uri.substr(0,5)?e.uri:t.path+e.uri;n(s,(function(n){o++,t.parsingResult.uris[e._redURIkey][e._redURIIndex]=new DataView(n.response),o==i&&r&&r()}),(function(t,e){}))}}))},t=function(t,e,r,n,a){i(r),a?(r.buffers[0].uri=a,o(t,r,(function(){ai(t,r),Ui(t,r,(function(){new Kn(t.redGPUContext,t.parsingResult.textureRawList,e=>{e.textures.forEach(t=>{t.userInfo.targetMaterial[t.userInfo.targetTexture]=t.texture}),ni(t,r).then(t=>{n&&n()})})}))}))):o(t,r,(function(){ai(t,r),Ui(t,r,(function(){new Kn(t.redGPUContext,t.parsingResult.textureRawList,e=>{e.textures.forEach(t=>{t.userInfo.targetMaterial[t.userInfo.targetTexture]=t.texture}),ni(t,r).then(t=>{n&&n()})})}))}))}}();var bi=Mi;let Pi,wi,Gi=!1,Bi=t=>{wi||(wi=document.createElement("div"),wi.style.cssText="\n\t\t\tposition:fixed;\n\t\t\tbottom:0; left:0;\n\t\t\twidth : 200px;\n\t\t\toverflow : hidden;\n\t\t\tbackground:rgba(0, 0, 0, 0.5);\n\t\t\tpadding:5px;\n\t\t\tfont-size:11px;\n\t\t\tcolor:#fff;\n\t\t")};const Ei={LEFT_TOP:"leftTop",RIGHT_TOP:"rightTop",LEFT_BOTTOM:"leftBottom",RIGHT_BOTTOM:"rightBottom",resetData:t=>(Pi=[],t.forEach(t=>Pi.push({view:t,object3DNum:0,dirtyTransformNum:0,drawCallNum:0,triangleNum:0,dirtyPipelineNum:0,x:t.x,y:t.y,width:t.width,height:t.height,viewRect:t.viewRect,baseRenderTime:0,postEffectRenderTime:0,finalRenderTime:0})),Pi),visible:(t,e=Ei.LEFT_BOTTOM)=>{Gi=t,Bi(),Gi?(document.body.appendChild(wi),Ei.setLocation(e)):wi.parentNode&&document.body.removeChild(wi)},setLocation:(t=Ei.LEFT_BOTTOM)=>{switch(wi.style.top="",wi.style.bottom="",wi.style.left="",wi.style.right="",t){case Ei.LEFT_TOP:wi.style.left=wi.style.top=0;break;case Ei.LEFT_BOTTOM:wi.style.left=wi.style.bottom=0;break;case Ei.RIGHT_TOP:wi.style.right=wi.style.top=0;break;case Ei.RIGHT_BOTTOM:wi.style.right=wi.style.bottom=0}},update:t=>{Bi(),Gi&&(wi.innerHTML="",Pi.forEach(t=>{let e,r,n,i,o={x:1,width:1};e=document.createElement("div"),e.style.cssText="\n\t\t\t\t\tbackground : rgba(0,0,0,0.75);\n\t\t\t\t\tmargin-bottom : 1px;\n\t\t\t\t\tpadding : 8px;\n\t\t\t\t",wi.appendChild(e),r=document.createElement("div"),r.style.color="#fff",e.appendChild(r),n="";for(let e in t)i=t[e],"number"==typeof i&&(e.includes("Time")&&(i=i.toFixed(5)),i=i.toLocaleString()),n+=`<span style="color:rgba(255,255,255,0.5)">${e}</span> : ${i}`,n+=o[e]?" / ":"<br>";r.innerHTML=n}))}};var Ci=new WeakMap;class Li extends di{constructor(t,e=1,r=1,n=1,i=1,o=1,a=!1){let s;if(super(),Ci.set(this,{writable:!0,value:function(){let t,e,r,n,i,o,a,s,u,l,f,m,c,h,d,p;return function(v,_,g,x,y,T,S,U){t=g/2,e=x/2,r=Math.floor(y)||1,n=Math.floor(T)||1,i=r+1,o=n+1,a=g/r,s=x/n;const M=[],b=[];for(l=0;l<o;l++)for(m=l*s-e,u=0;u<i;u++)f=u*a-t,M.push(f,-m,0,0,0,1,u/r*S,(U?1-l/n:l/n)*S);for(l=0;l<n;l++)for(u=0;u<r;u++)c=u+i*l,h=u+i*(l+1),d=u+1+i*(l+1),p=u+1+i*l,b.push(c,h,p,h,d,p);return new pi(v,new vi(v,_+"_interleaveBuffer",vi.TYPE_VERTEX,new Float32Array(M),[new hi("vertexPosition","float3"),new hi("vertexNormal","float3"),new hi("texcoord","float2")]),new vi(v,_+"_indexBuffer",vi.TYPE_INDEX,new Uint32Array(b)))}}()}),s=[this.constructor.name,e,r,n,i,o,a].join("_"),t.state.Geometry.has(s))return t.state.Geometry.get(s);let u=Oe(this,Ci).call(this,t,s,e,r,n,i,o,a);this.interleaveBuffer=u.interleaveBuffer,this.indexBuffer=u.indexBuffer,this.vertexState=u.vertexState,t.state.Geometry.set(s,this)}}let Ri=new Float32Array(1);class Di extends Fr{get sprite3DMode(){return this._sprite3DMode}set sprite3DMode(t){this._sprite3DMode=t,Ri[0]=t?1:0,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap.sprite3DMode,Ri)}constructor(t,e){super(t),Ve(this,"_sprite3DMode",!0),this.diffuseTexture=e,this.needResetBindingInfo=!0}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:2,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:3,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}Ve(Di,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${Ke.GLSL_SystemUniforms_vertex.meshUniforms}\n    ${Ke.GLSL_SystemUniforms_vertex.getSprite3DMatrix}    \n\tlayout(location = 0) in vec3 a_pos;\n    layout(location = 1) in vec2 a_uv;\n    layout(location = 2) in vec3 position;\n    layout(location = 3) in float alpha;\n    layout(location = 4) in vec3 rotation;\n    layout(location = 5) in float scale;\n\tlayout(location = 0 ) out vec2 vUV;\n\tlayout(location = 1 ) out float vMouseColorID;\t\n\tlayout(location = 2 ) out float vSumOpacity;\n\tlayout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        float sprite3DMode;\n    } vertexUniforms;\n\tmat4 rotationMTX(vec3 t)\n    {\n       float s = sin(t[0]);float c = cos(t[0]);\n       mat4 m1 = mat4( 1,0,0,0, 0,c,s,0, 0,-s,c,0, 0,0,0,1);s = sin(t[1]);c = cos(t[1]);\n       mat4 m2 = mat4(c,0,-s,0, 0,1,0,0, s,0,c,0,  0,0,0,1);s = sin(t[2]);c = cos(t[2]);\n       mat4 m3 = mat4(c,s,0,0, -s,c,0,0, 0,0,1,0,  0,0,0,1);\n       return m3*m2*m1;\n    }\n\tvoid main() {\n\t\tvUV = a_uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity * alpha;\n\t\tfloat ratio = systemUniforms.resolution.x/systemUniforms.resolution.y; \n\t\tif( vertexUniforms.sprite3DMode == 1.0 ) {\n\t\t\tmat4 scaleMTX = mat4(\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\tposition, 1\n\t\t\t) *\n\t\t\tmat4(\n\t\t\t\tscale, 0, 0, 0,\n\t\t\t\t0, scale , 0, 0,\n\t\t\t\t0, 0, scale, 0,\n\t\t\t\t0, 0, 0, 1\n\t\t\t) ;\n\t\t\tgl_Position = systemUniforms.perspectiveMTX * getSprite3DMatrix( systemUniforms.cameraMTX,  scaleMTX ) * rotationMTX(vec3(0,0, rotation.z)) * vec4(a_pos , 1);\n\t\t}else{\n\t\t\tmat4 scaleMTX = mat4(\n\t\t\t\tscale, 0, 0, 0,\n\t\t\t\t0, scale, 0, 0,\n\t\t\t\t0, 0, scale, 0,\n\t\t\t\tposition, 1\n\t\t\t)\n\t\t\t* rotationMTX(rotation);\n\t\t\tgl_Position = systemUniforms.perspectiveMTX *  systemUniforms.cameraMTX * scaleMTX * vec4(a_pos , 1);\n\t\t}\n\t\t\n\t}\n\t`),Ve(Di,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\tconst float TRUTHY = 1.0;\n\tlayout( location = 0 ) in vec2 vUV;\n\tlayout( location = 1 ) in float vMouseColorID;\t\n\tlayout( location = 2 ) in float vSumOpacity;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform FragmentUniforms {\n        float alpha;\n        //\n        float __diffuseTextureRenderYn;\n    } fragmentUniforms;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform texture2D uDiffuseTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor = texture(sampler2D(uDiffuseTexture, uSampler), vUV) ;\n\t\toutColor = diffuseColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve(Di,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Di,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:2,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"}]}),Ve(Di,"uniformBufferDescriptor_vertex",[{size:$e.float,valueName:"sprite3DMode"}]),Ve(Di,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"alpha"},{size:$e.float,valueName:"__diffuseTextureRenderYn"}]);var Ii=new WeakMap;class Ni extends ze{constructor(t,e){super(),Ve(this,"redGPUContext",void 0),Ii.set(this,{writable:!0,value:void 0}),Ve(this,"GPURenderPipeline",void 0),this.redGPUContext=t,Ye(this,Ii,e),this.GPURenderPipeline=null}update(t,e){let r=Oe(this,Ii);const n=t.device,i={layout:n.createPipelineLayout({bindGroupLayouts:[e.systemUniformInfo_vertex.GPUBindGroupLayout,e.systemUniformInfo_fragment.GPUBindGroupLayout,r.GPUBindGroupLayout,r._material.GPUBindGroupLayout]}),vertexStage:{module:r._material.vShaderModule.GPUShaderModule,entryPoint:"main"},fragmentStage:{module:r._material.fShaderModule.GPUShaderModule,entryPoint:"main"},vertexState:{indexFormat:"uint32",vertexBuffers:[{arrayStride:32,stepMode:"vertex",attributes:[{shaderLocation:0,offset:0,format:"float3"},{shaderLocation:1,offset:24,format:"float2"}]},{arrayStride:4*r._PROPERTY_NUM,stepMode:"instance",attributes:[{shaderLocation:2,offset:16,format:"float3"},{shaderLocation:3,offset:28,format:"float"},{shaderLocation:4,offset:32,format:"float3"},{shaderLocation:5,offset:44,format:"float"}]}]},colorStates:[{format:t.swapChainFormat,colorBlend:{srcFactor:r._blendColorSrc,dstFactor:r._blendColorDst,operation:"add"},alphaBlend:{srcFactor:r._blendAlphaSrc,dstFactor:r._blendAlphaDst,operation:"add"}},{format:"rgba32float"}],rasterizationState:{frontFace:"ccw",cullMode:r._cullMode},primitiveTopology:r._primitiveTopology,depthStencilState:{format:"depth24plus-stencil8",depthWriteEnabled:r._depthWriteEnabled,depthCompare:r._depthCompare},sampleCount:4};this.GPURenderPipeline=n.createRenderPipeline(i)}}var Fi=new WeakMap;class Ai extends On{get particleNum(){return this._particleNum}set particleNum(t){this._particleNum=t,this.setParticleData()}get sprite3DMode(){return this._material._sprite3DMode}set sprite3DMode(t){return this._material.sprite3DMode=t}get texture(){return this._material.diffuseTexture}set texture(t){return this._material.diffuseTexture=t}get material(){return this._material}set material(t){}compute(t){Oe(this,Fi).set([t,this._x,this._y,this._z,this.minLife,this.maxLife,this.minStartX,this.maxStartX,this.minEndX,this.maxEndX,this.easeX,this.minStartY,this.maxStartY,this.minEndY,this.maxEndY,this.easeY,this.minStartZ,this.maxStartZ,this.minEndZ,this.maxEndZ,this.easeZ,this.minStartAlpha,this.maxStartAlpha,this.minEndAlpha,this.maxEndAlpha,this.easeAlpha,this.minStartScale,this.maxStartScale,this.minEndScale,this.maxEndScale,this.easeScale,this.minStartRotationX,this.maxStartRotationX,this.minEndRotationX,this.maxEndRotationX,this.easeRotationX,this.minStartRotationY,this.maxStartRotationY,this.minEndRotationY,this.maxEndRotationY,this.easeRotationY,this.minStartRotationZ,this.maxStartRotationZ,this.minEndRotationZ,this.maxEndRotationZ,this.easeRotationZ],0),this.redGPUContext.device.defaultQueue.writeBuffer(this.simParamBuffer,0,Oe(this,Fi));const e=this.redGPUContext.device.createCommandEncoder({}),r=e.beginComputePass();r.setPipeline(this.computePipeline),r.setBindGroup(Ke.SET_INDEX_ComputeUniforms,this.particleBindGroup),r.dispatch(this._particleNum),r.endPass(),this.redGPUContext.device.defaultQueue.submit([e.finish()])}constructor(t,e=1,r={},n,i){super(t),Ve(this,"redGPUContext",void 0),Fi.set(this,{writable:!0,value:void 0}),Ve(this,"computePipeline",void 0),Ve(this,"particleBindGroup",void 0),Ve(this,"particleBuffer",void 0),Ve(this,"minLife",2e3),Ve(this,"maxLife",1e4),Ve(this,"minStartX",-1),Ve(this,"maxStartX",1),Ve(this,"minEndX",-15),Ve(this,"maxEndX",15),Ve(this,"minStartY",-1),Ve(this,"maxStartY",1),Ve(this,"minEndY",-15),Ve(this,"maxEndY",15),Ve(this,"minStartZ",-1),Ve(this,"maxStartZ",1),Ve(this,"minEndZ",-15),Ve(this,"maxEndZ",15),Ve(this,"minStartAlpha",0),Ve(this,"maxStartAlpha",1),Ve(this,"minEndAlpha",0),Ve(this,"maxEndAlpha",0),Ve(this,"minStartScale",0),Ve(this,"maxStartScale",.25),Ve(this,"minEndScale",0),Ve(this,"maxEndScale",3),Ve(this,"minStartRotationX",360*-Math.random()),Ve(this,"maxStartRotationX",360*Math.random()),Ve(this,"minEndRotationX",360*-Math.random()),Ve(this,"maxEndRotationX",360*Math.random()),Ve(this,"minStartRotationY",360*-Math.random()),Ve(this,"maxStartRotationY",360*Math.random()),Ve(this,"minEndRotationY",360*-Math.random()),Ve(this,"maxEndRotationY",360*Math.random()),Ve(this,"minStartRotationZ",360*-Math.random()),Ve(this,"maxStartRotationZ",360*Math.random()),Ve(this,"minEndRotationZ",360*-Math.random()),Ve(this,"maxEndRotationZ",360*Math.random()),Ve(this,"easeX",Ai.Linear),Ve(this,"easeY",Ai.Linear),Ve(this,"easeZ",Ai.Linear),Ve(this,"easeScale",Ai.Linear),Ve(this,"easeRotationX",Ai.Linear),Ve(this,"easeRotationY",Ai.Linear),Ve(this,"easeRotationZ",Ai.Linear),Ve(this,"easeAlpha",Ai.Linear),this.redGPUContext=t,this._material=new Di(t);for(const t in r)this.hasOwnProperty(t)&&(this[t]=r[t]);this.geometry=i||new Li(t),this.texture=n,this.renderDrawLayerIndex=oo.DRAW_LAYER_INDEX2_Z_POINT_SORT,this._PROPERTY_NUM=44,this.blendColorSrc="src-alpha",this.blendColorDst="one",this.blendAlphaSrc="src-alpha",this.blendAlphaDst="one",this.depthWriteEnabled=!1,this.cullMode="none",Ye(this,Fi,new Float32Array([performance.now(),this._x,this._y,this._z,this.minLife,this.maxLife,this.minStartX,this.maxStartX,this.minEndX,this.maxEndX,this.easeX,this.minStartY,this.maxStartY,this.minEndY,this.maxEndY,this.easeY,this.minStartZ,this.maxStartZ,this.minEndZ,this.maxEndZ,this.easeZ,this.minStartAlpha,this.maxStartAlpha,this.minEndAlpha,this.maxEndAlpha,this.easeAlpha,this.minStartScale,this.maxStartScale,this.minEndScale,this.maxEndScale,this.easeScale,this.minStartRotationX,this.maxStartRotationX,this.minEndRotationX,this.maxEndRotationX,this.easeRotationX,this.minStartRotationY,this.maxStartRotationY,this.minEndRotationY,this.maxEndRotationY,this.easeRotationY,this.minStartRotationZ,this.maxStartRotationZ,this.minEndRotationZ,this.maxEndRotationZ,this.easeRotationZ]));let o={size:Oe(this,Fi).byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST};this.simParamBuffer=t.device.createBuffer(o),t.device.defaultQueue.writeBuffer(this.simParamBuffer,0,Oe(this,Fi)),this.pipeline=new Ni(t,this),this.particleNum=e||1}setParticleData(){let t=this.redGPUContext;const e=this._PROPERTY_NUM,r=new Float32Array(this._particleNum*e),n=performance.now();for(let t=0;t<this._particleNum;++t){let i=Math.random()*this.maxLife,o=Math.random()*i;r[e*t+0]=n-o,r[e*t+1]=i,r[e*t+4]=0,r[e*t+5]=0,r[e*t+6]=0,r[e*t+7]=r[e*t+8]=0,r[e*t+9]=0,r[e*t+10]=0,r[e*t+11]=0,r[e*t+12]=Math.random()*(this.maxStartX-this.minStartX)+this.minStartX,r[e*t+13]=Math.random()*(this.maxEndX-this.minEndX)+this.minEndX,r[e*t+14]=this.easeX,r[e*t+15]=this._x,r[e*t+16]=Math.random()*(this.maxStartY-this.minStartY)+this.minStartY,r[e*t+17]=Math.random()*(this.maxEndY-this.minEndY)+this.minEndY,r[e*t+18]=this.easeY,r[e*t+19]=this._y,r[e*t+20]=Math.random()*(this.maxStartZ-this.minStartZ)+this.minStartZ,r[e*t+21]=Math.random()*(this.maxEndZ-this.minEndZ)+this.minEndZ,r[e*t+22]=this.easeZ,r[e*t+23]=this._z,r[e*t+24]=Math.random()*(this.maxStartRotationX-this.minStartRotationX)+this.minStartRotationX,r[e*t+25]=Math.random()*(this.maxEndRotationX-this.minEndRotationX)+this.minEndRotationX,r[e*t+26]=this.easeRotationX,r[e*t+27]=0,r[e*t+28]=Math.random()*(this.maxStartRotationY-this.minStartRotationY)+this.minStartRotationY,r[e*t+29]=Math.random()*(this.maxEndRotationY-this.minEndRotationY)+this.minEndRotationY,r[e*t+30]=this.easeRotationY,r[e*t+31]=0,r[e*t+32]=Math.random()*(this.maxStartRotationZ-this.minStartRotationZ)+this.minStartRotationZ,r[e*t+33]=Math.random()*(this.maxEndRotationZ-this.minEndRotationZ)+this.minEndRotationZ,r[e*t+34]=this.easeRotationZ,r[e*t+35]=0,r[e*t+36]=Math.random()*(this.maxStartScale-this.minStartScale)+this.minStartScale,r[e*t+37]=Math.random()*(this.maxEndScale-this.minEndScale)+this.minEndScale,r[e*t+38]=this.easeScale,r[e*t+39]=0,r[e*t+40]=Math.random()*(this.maxStartAlpha-this.minStartAlpha)+this.minStartAlpha,r[e*t+41]=Math.random()*(this.maxEndAlpha-this.minEndAlpha)+this.minEndAlpha,r[e*t+42]=this.easeAlpha,r[e*t+43]=0}this.particleBuffer&&(this.particleBuffer.destroy(),this.particleBuffer=null),this.particleBuffer=t.device.createBuffer({size:r.byteLength,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.VERTEX|GPUBufferUsage.STORAGE}),t.device.defaultQueue.writeBuffer(this.particleBuffer,0,r);let i=(t=>`\n\t#version 450\n\t// 파티클 구조체 선언\n\tstruct Info {\n\t\tfloat startValue;\n\t\tfloat endValue;\n\t\tfloat easeType;\n\t\tfloat birthCenterValue;\n\t};\n\tstruct InfoGroup {\n\t\tInfo infoX;\n\t\tInfo infoY;\n\t\tInfo infoZ;\n\t};\n\tstruct Particle {\n\t\tfloat startTime;\n\t    float life;\n\t    vec3 valuePosition;\n\t    float valueAlpha;\n        vec3 valueRotation;\n\t    float valueScale;\t  \n\t    InfoGroup infoPosition;\n\t    InfoGroup infoRotation;\n\t    Info infoScale;\n\t    Info infoAlpha;\n\t};\n\t\n\t// 이건 설정값인듯 하고\n\tlayout(std140, set = ${Ke.SET_INDEX_ComputeUniforms}, binding = 0) uniform SimParams {\n\t    float time;\n        float currentPositionX,currentPositionY,currentPositionZ;\n\t    float minLife, maxLife;\n\t    float minStartX, maxStartX, minEndX, maxEndX, easeX;\n\t    float minStartY, maxStartY, minEndY, maxEndY, easeY;\n\t    float minStartZ, maxStartZ, minEndZ, maxEndZ, easeZ;\n\t    float minStartAlpha, maxStartAlpha, minEndAlpha, maxEndAlpha, easeAlpha;\n\t    float minStartScale, maxStartScale, minEndScale, maxEndScale, easeScale;\n        float minStartRotationX, maxStartRotationX, minEndRotationX, maxEndRotationX, easeRotationX;\n\t    float minStartRotationY, maxStartRotationY, minEndRotationY, maxEndRotationY, easeRotationY;\n\t    float minStartRotationZ, maxStartRotationZ, minEndRotationZ, maxEndRotationZ, easeRotationZ;\n\t\n\t} params;\n\t\n\t// 여기다 쓰곘다는건가\t\n\tlayout(std140, set = ${Ke.SET_INDEX_ComputeUniforms}, binding = 1) buffer ParticlesA {\n\t    Particle particles[${t}];\n\t} particlesA;\n\t\n\t\n\n\t\n\tconst float PI = 3.141592653589793;\n\tconst float HPI = PI * 0.5;\n\tconst float PI2 = PI * 2;\n\tfloat calEasing(float n, float type){\n\t\tswitch( int(type) ){\n\t\t\t// linear\n\t\t\tcase 0 : break;\n\t\t\t// QuintIn\n\t\t\tcase 1 : n = n * n * n * n * n; break;\n\t\t\t// QuintOut\n\t\t\tcase 2 : n = ((n -= 1) * n * n * n * n) + 1; break;\n\t\t\t// QuintInOut\n\t\t\tcase 3 : n = ((n = n * 2) < 1) ? n * n * n * n * n * 0.5 : 0.5 * ((n -= 2) * n * n * n * n + 2); break;\n\t\t\t////////////////////////\n\t\t\t// BackIn\n\t\t\tcase 4 : n = n * n * (n * 1.70158 + n - 1.70158); break;\n\t\t\t// BackOut\n\t\t\tcase 5 : n = (n -= 1) * n * (n * 1.70158 + n + 1.70158) + 1; break;\n\t\t\t// BackInOut\n\t\t\tcase 6 : n = ((n = n * 2) < 1) ? 0.5 * n * n * (n * 1.70158 + n - 1.70158) : 0.5 * (n -= 2) * n * (n * 1.70158 + n + 1.70158) + 1; break;\n\t\t\t////////////////////////\n\t\t\t// CircIn\n\t\t\tcase 7 : n = -1 * (sqrt(1 - n * n) - 1); break;\n\t\t\t// CircOut\n\t\t\tcase 8 : n = sqrt(1 - (n -= 1) * n); break;\n\t\t\t// CircInOut\n\t\t\tcase 9 : n = ((n = n * 2) < 1) ? -0.5 * (sqrt(1 - n * n) - 1) : 0.5 * sqrt(1 - (n -= 2) * n) + 0.5; break;\n\t\t\t////////////////////////\n\t\t\t// CubicIn\n\t\t\tcase 10 : n = n * n * n; break;\n\t\t\t// CubicOut\n\t\t\tcase 11 : n = ((n -= 1) * n * n) + 1; break;\n\t\t\t// CubicInOut\n\t\t\tcase 12 : n = ((n = n * 2) < 1) ? n * n * n * 0.5 : 0.5 * ((n -= 2) * n * n + 2); break;\n\t\t\t////////////////////////\n\t\t\t// ExpoIn\n\t\t\tcase 13 : n = n == 0.0 ? 0.0 : pow(2, 10 * (n - 1)); break;\n\t\t\t// ExpoOut\n\t\t\tcase 14 : n = n == 1.0 ? 1.0 : -pow(2, -10 * n) + 1; break;\n\t\t\t// ExpoInOut\n\t\t\tcase 15 : n = ((n = n * 2) < 1) ? (n == 0.0 ? 0.0 : 0.5 * pow(2, 10 * (n - 1))) : (n == 2.0 ? 1.0 : -0.5 * pow(2, -10 * (n - 1)) + 1); break;\n\t\t\t////////////////////////\n\t\t\t// QuadIn\n\t\t\tcase 16 : n = n * n; break;\n\t\t\t// QuadOut\n\t\t\tcase 17 : n = ((2 - n) * n); break;\n\t\t\t// QuadInOut\n\t\t\tcase 18 : n = ((n = n * 2) < 1) ? n * n * 0.5 : 0.5 * ((2 - (n -= 1)) * n + 1); break;\n\t\t\t////////////////////////\n\t\t\t// QuartIn\n\t\t\tcase 19 : n = n * n * n * n; break;\n\t\t\t// QuartOut\n\t\t\tcase 20 : n = 1 - ((n -= 1) * n * n * n); break;\n\t\t\t// QuartInOut\n\t\t\tcase 21 : n = ((n = n * 2) < 1) ? n * n * n * n * 0.5 : 1 - ((n -= 2) * n * n * n * 0.5); break;\n\t\t\t////////////////////////\n\t\t\t// SineIn\n\t\t\tcase 22 : n = -cos(n * HPI) + 1; break;\n\t\t\t// SineOut\n\t\t\tcase 23 : n = sin(n * HPI); break;\n\t\t\t// SineInOut\n\t\t\tcase 24 : n = (-cos(n * PI) + 1) * 0.5; break;\n\t\t\t////////////////////////\n\t\t\t// ElasticIn\n\t\t\tcase 25 : n = n == 0.0 ? 0.0 : n == 1.0 ? 1.0 : -1 * pow(2, 10 * (n -= 1)) * sin((n - 0.075) * (PI2) / 0.3); break;\n\t\t\t// ElasticOut\n\t\t\tcase 26 : n = n == 0.0 ? 0.0 : n == 1.0 ? 1.0 : pow(2, -10 * n) * sin((n - 0.075) * (PI2) / 0.3) + 1; break;\n\t\t\t// ElasticInOut\n\t\t\tcase 27 : n =( (n == 0.0 ? 0.0 : (n == 1.0 ? 1.0 : n *= 2)), (n < 1) ? -0.5 * pow(2, 10 * (n -= 1)) * sin((n - 0.075) * (PI2) / 0.3) : 0.5 * pow(2, -10 * (n -= 1)) * sin((n - 0.075) * (PI2) / 0.3) + 1); break;\n\t\t}\n\t\treturn n;\n\t}\n\tfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\tfloat randomRange(float min, float max, float v)\n\t{\n        float newValue = rand(v);\n\t\treturn (newValue * (max-min)) + min;\n\t}\n\tvoid main() {\n\t\tuint index = gl_GlobalInvocationID.x;\n\t\tParticle targetParticle = particlesA.particles[index];\n\t\n\t\tfloat age = params.time - targetParticle.startTime;\n\t\tfloat lifeRatio = age/targetParticle.life;\n\t\tif(lifeRatio>=1) {\n\t\t\tfloat uuid = params.time + index;\n\t\t\tparticlesA.particles[index].startTime = params.time;\n\t\t\tparticlesA.particles[index].life = randomRange( params.minLife, params.maxLife, uuid );\n\t\t\t// position\n\t\t\tparticlesA.particles[index].infoPosition.infoX.startValue = randomRange( params.minStartX, params.maxStartX, uuid + 1 );\n\t\t\tparticlesA.particles[index].infoPosition.infoX.endValue   = randomRange( params.minEndX, params.maxEndX, uuid + 2 );\n\t\t\tparticlesA.particles[index].infoPosition.infoX.easeType   = params.easeX;\n\t\t\tparticlesA.particles[index].infoPosition.infoY.startValue = randomRange( params.minStartY, params.maxStartY, uuid + 3 );\n\t\t\tparticlesA.particles[index].infoPosition.infoY.endValue   = randomRange( params.minEndY, params.maxEndY, uuid + 4 );\n\t\t\tparticlesA.particles[index].infoPosition.infoY.easeType   = params.easeY;\n\t\t\tparticlesA.particles[index].infoPosition.infoZ.startValue = randomRange( params.minStartZ, params.maxStartZ, uuid + 5 );\n\t\t\tparticlesA.particles[index].infoPosition.infoZ.endValue   = randomRange( params.minEndZ, params.maxEndZ, uuid + 6 );\n\t\t\tparticlesA.particles[index].infoPosition.infoZ.easeType   = params.easeZ;\n\t\t\t// alpha\n\t\t\tparticlesA.particles[index].infoAlpha.startValue = randomRange( params.minStartAlpha, params.maxStartAlpha, uuid + 7 );\n\t\t\tparticlesA.particles[index].infoAlpha.endValue   = randomRange( params.minEndAlpha, params.maxEndAlpha, uuid + 8 );\n\t\t\tparticlesA.particles[index].infoAlpha.easeType   = params.easeAlpha;\n\t\t\t// scale\n\t\t\tparticlesA.particles[index].infoScale.startValue = randomRange( params.minStartScale, params.maxStartScale, uuid + 9 );\n\t\t\tparticlesA.particles[index].infoScale.endValue   = randomRange( params.minEndScale, params.maxEndScale, uuid + 10 );\n\t\t\tparticlesA.particles[index].infoScale.easeType   = params.easeScale;\n\t\t\t// rotation\n\t\t\tparticlesA.particles[index].infoRotation.infoX.startValue = randomRange( params.minStartRotationX, params.maxStartRotationX, uuid + 11 );\n\t\t\tparticlesA.particles[index].infoRotation.infoX.endValue   = randomRange( params.minEndRotationX, params.maxEndRotationX, uuid + 12 );\n\t\t\tparticlesA.particles[index].infoRotation.infoX.easeType   = params.easeRotationX;\n\t\t\tparticlesA.particles[index].infoRotation.infoY.startValue = randomRange( params.minStartRotationY, params.maxStartRotationY, uuid + 13 );\n\t\t\tparticlesA.particles[index].infoRotation.infoY.endValue   = randomRange( params.minEndRotationY, params.maxEndRotationY, uuid + 14 );\n\t\t\tparticlesA.particles[index].infoRotation.infoY.easeType   = params.easeRotationY;\n\t\t\tparticlesA.particles[index].infoRotation.infoZ.startValue = randomRange( params.minStartRotationZ, params.maxStartRotationZ, uuid + 15 );\n\t\t\tparticlesA.particles[index].infoRotation.infoZ.endValue   = randomRange( params.minEndRotationZ, params.maxEndRotationZ, uuid + 16 );\n\t\t\tparticlesA.particles[index].infoRotation.infoZ.easeType   = params.easeRotationZ;\n\t\t\t// birth position\n\t\t\tparticlesA.particles[index].infoPosition.infoX.birthCenterValue = params.currentPositionX;\n\t\t\tparticlesA.particles[index].infoPosition.infoY.birthCenterValue = params.currentPositionY;\n\t\t\tparticlesA.particles[index].infoPosition.infoZ.birthCenterValue = params.currentPositionZ;\n\t\t\tlifeRatio = 0;\n\t\t}\n\t\tInfo tInfo;\n\t\t// position\n\t\ttInfo = targetParticle.infoPosition.infoX;\n\t\tparticlesA.particles[index].valuePosition.x = tInfo.birthCenterValue + tInfo.startValue +  (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType);\n\t\ttInfo = targetParticle.infoPosition.infoY;\n\t\tparticlesA.particles[index].valuePosition.y = tInfo.birthCenterValue + tInfo.startValue +  (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType);\n\t\ttInfo = targetParticle.infoPosition.infoZ;\n\t\tparticlesA.particles[index].valuePosition.z = tInfo.birthCenterValue + tInfo.startValue +  (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType);\n\t\t\n\t\t// alpha\n\t\ttInfo = targetParticle.infoAlpha;\n\t\tparticlesA.particles[index].valueAlpha = tInfo.startValue +  (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType);\n\t\t\n\t\t// scale\n\t\ttInfo = targetParticle.infoScale;\n\t\tparticlesA.particles[index].valueScale = tInfo.startValue + (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType);\n\t\t\t\t\n\t\t// rotation\n\t\ttInfo = targetParticle.infoRotation.infoX;\n\t\tparticlesA.particles[index].valueRotation.x = (tInfo.startValue +  (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType)) * PI/180;\n\t\ttInfo = targetParticle.infoRotation.infoY;\n\t\tparticlesA.particles[index].valueRotation.y = (tInfo.startValue +  (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType)) * PI/180;\n\t\ttInfo = targetParticle.infoRotation.infoZ;\n\t\tparticlesA.particles[index].valueRotation.z = (tInfo.startValue +  (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType)) * PI/180;\n\t}\n`)(this._particleNum),o={code:t.glslang.compileGLSL(i,"compute"),source:i},a=t.device.createShaderModule(o);const s=t.device.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.COMPUTE,type:"storage-buffer"}]}),u=t.device.createPipelineLayout({bindGroupLayouts:[s]});this.particleBindGroup=t.device.createBindGroup({layout:s,entries:[{binding:0,resource:{buffer:this.simParamBuffer,offset:0,size:Oe(this,Fi).byteLength}},{binding:1,resource:{buffer:this.particleBuffer,offset:0,size:r.byteLength}}]}),this.computePipeline=t.device.createComputePipeline({layout:u,computeStage:{module:a,entryPoint:"main"}})}}Ve(Ai,"Linear",0),Ve(Ai,"QuintIn",1),Ve(Ai,"QuintOut",2),Ve(Ai,"QuintInOut",3),Ve(Ai,"BackIn",4),Ve(Ai,"BackOut",5),Ve(Ai,"BackInOut",6),Ve(Ai,"CircIn",7),Ve(Ai,"CircOut",8),Ve(Ai,"CircInOut",9),Ve(Ai,"CubicIn",10),Ve(Ai,"CubicOut",11),Ve(Ai,"CubicInOut",12),Ve(Ai,"ExpoIn",13),Ve(Ai,"ExpoOut",14),Ve(Ai,"ExpoInOut",15),Ve(Ai,"QuadIn",16),Ve(Ai,"QuadOut",17),Ve(Ai,"QuadInOut",18),Ve(Ai,"QuartIn",19),Ve(Ai,"QuartOut",20),Ve(Ai,"QuartInOut",21),Ve(Ai,"SineIn",22),Ve(Ai,"SineOut",23),Ve(Ai,"SineInOut",24),Ve(Ai,"ElasticIn",25),Ve(Ai,"ElasticOut",26),Ve(Ai,"ElasticInOut",27);class Vi extends On{constructor(t){super(t)}}var Oi=new WeakMap;class Yi extends ze{constructor(t,e){super(),Ve(this,"redGPUContext",void 0),Oi.set(this,{writable:!0,value:void 0}),Ve(this,"GPURenderPipeline",void 0),this.redGPUContext=t,Ye(this,Oi,e),this.GPURenderPipeline=null}update(t,e){let r=Oe(this,Oi);const n=t.device,i={layout:n.createPipelineLayout({bindGroupLayouts:[e.systemUniformInfo_vertex.GPUBindGroupLayout,e.systemUniformInfo_fragment.GPUBindGroupLayout,r.GPUBindGroupLayout,r._material.GPUBindGroupLayout]}),vertexStage:{module:r._material.vShaderModule.GPUShaderModule,entryPoint:"main"},fragmentStage:{module:r._material.fShaderModule.GPUShaderModule,entryPoint:"main"},vertexState:r._geometry.vertexState,colorStates:[{format:t.swapChainFormat,colorBlend:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},alphaBlend:{srcFactor:"one",dstFactor:"one-minus-src-alpha",operation:"add"}}],rasterizationState:{frontFace:"ccw",cullMode:r._cullMode},primitiveTopology:r._primitiveTopology,sampleCount:1};this.GPURenderPipeline=n.createRenderPipeline(i)}}var Xi=new WeakMap;class zi extends(Mr.mix(mr)){constructor(t){super(t),Xi.set(this,{writable:!0,value:[]}),Ve(this,"baseAttachment",void 0),Ve(this,"baseAttachmentView",void 0),this.quad=new Yn(t,new Li(t),this),this.quad.pipeline=new Yi(t,this.quad),this.sampler=new jr(t,{magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge",addressModeW:"repeat"})}checkSize(t,e){if([Oe(this,Xi)[2],Oe(this,Xi)[3]].toString()!=[e.viewRect[2],e.viewRect[3]].toString())return this.baseAttachment&&this.baseAttachment.destroy(),Ye(this,Xi,e.viewRect.concat()),this.baseAttachment=t.device.createTexture({size:{width:e.viewRect[2],height:e.viewRect[3],depth:1},sampleCount:1,format:t.swapChainFormat,usage:GPUTextureUsage.OUTPUT_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.SAMPLED}),this.baseAttachmentView=this.baseAttachment.createView(),!0}render(t,e,r,n){let i=this.checkSize(t,e);const o=t.device.createCommandEncoder(),a=o.beginRenderPass({colorAttachments:[{attachment:this.baseAttachmentView,loadValue:{r:0,g:0,b:0,a:0}}]});let s=this.sourceTexture===n;this.sourceTexture=n,s||this.resetBindingInfo(),i&&this.quad.pipeline.update(t,e),oo.clearStateCache(),e.updateSystemUniform(a,t),r(t,e,a,[this.quad]),a.endPass(),t.device.defaultQueue.submit([o.finish()])}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:1,resource:this.sampler.GPUSampler},{binding:2,resource:this.sourceTexture},{binding:3,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}}],this._afterResetBindingInfo()}}Ve(zi,"vertexShaderGLSL",""),Ve(zi,"fragmentShaderGLSL",""),Ve(zi,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(zi,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:2,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:3,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"}]}),Ve(zi,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(zi,"uniformBufferDescriptor_fragment",mr.uniformBufferDescriptor_empty);class $i extends zi{constructor(t){super(t),Ve(this,"viewRect",new Float32Array(4)),this.projectionMatrix=Ae.mat4.create()}checkSize(t,e){return Ae.mat4.ortho(this.projectionMatrix,0,1,0,1,-1e3,1e3),Ae.mat4.scale(this.projectionMatrix,this.projectionMatrix,[1/parseInt(t.canvas.style.width),1/parseInt(t.canvas.style.height),1]),Ae.mat4.translate(this.projectionMatrix,this.projectionMatrix,[e.getViewRect(t)[2]/2+e.getViewRect(t)[0],parseInt(t.canvas.style.height)-e.getViewRect(t)[3]/2-e.getViewRect(t)[1],0]),Ae.mat4.scale(this.projectionMatrix,this.projectionMatrix,[e.getViewRect(t)[2],e.getViewRect(t)[3],1]),t.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap.projectionMatrix,this.projectionMatrix),!0}render(t,e,r,n,i){let o=this.checkSize(t,e),a=this.sourceTexture===n;this.sourceTexture=n,a||this.resetBindingInfo(),o&&this.quad.pipeline.update(t,e),oo.clearStateCache(),e.updateSystemUniform(i,t),r(t,e,i,[this.quad])}}Ve($i,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n\t${Ke.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 3 ) uniform VertexUniforms {\n\t    mat4 projectionMatrix;\n        vec4 viewRect;\n    } vertexUniforms;\n\tvoid main() {\n\t\t// gl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\tgl_Position = vertexUniforms.projectionMatrix * vec4(position,1.0);\n\t\t\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve($i,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\n\t\tdiffuseColor = texture( sampler2D( uSourceTexture, uSampler ), vUV ) ;\n\t\t// diffuseColor.a = 0.5;\n\n\t\t// diffuseColor.rgb = 1.0 - diffuseColor.rgb;\n\t\toutColor = diffuseColor;\n\t}\n`),Ve($i,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve($i,"uniformsBindGroupLayoutDescriptor_material",zi.uniformsBindGroupLayoutDescriptor_material),Ve($i,"uniformBufferDescriptor_vertex",[{size:$e.mat4,valueName:"projectionMatrix"},{size:$e.float4,valueName:"viewRect"}]),Ve($i,"uniformBufferDescriptor_fragment",mr.uniformBufferDescriptor_empty);let ki,Wi,Zi,Qi,Hi,qi,ji=[],Ji=[],Ki=[],to=[],eo={},ro=(t,e,r,n,i=0)=>{let o,a,s,u,l,f,m,c,h,d,p,v,_,g,x,y,T,S,U,M,b,P,w,G,B,E,C,L,R,D,I,N,F,A,V,O,Y,X,z,$,k,W,Z,Q,H,q,j,J,K,tt,et,rt,nt,it,ot,at,st,ut,lt,ft,mt,ct,ht,dt,pt,vt,_t,gt,xt,yt,Tt,St,Ut=Math.PI/180;k=3.141592653589793,W=6.283185307179586,Z=.225,Q=1.27323954,H=.405284735,q=1.5707963267948966,o=n.length,j=ji[0],J=ji[1],K=ji[2],tt=ji[3],et=ji[4],rt=ji[5];let Mt=n==e.scene._flatChildList,bt=e.camera instanceof Vi;for(;o--;){if(ct=n[o],mt=ct._material,ft=ct._geometry,ut=ct._parent,at=0,St=1,st=0,Tt=ct._opacity,ut&&(st=ut._renderTimeDirtyTransform,at=ut.matrix,St=ut._sumOpacity),ct._sumOpacity!=Tt*St&&(ct.sumOpacity=Tt*St),ht=ct.dirtyTransform,ct._renderTimeDirtyTransform=st||ht,pt=ct.dirtyPipeline,dt=ct.pipeline,lt=ct.skinInfo,nt=ct.matrix,ot=ct.localMatrix,vt=0,ki.object3DNum++,mt&&(mt.needResetBindingInfo&&(mt.resetBindingInfo(),mt.needResetBindingInfo=!1,vt=ct._prevMaterialUUID!=mt._UUID,qi[mt._UUID]=1),mt instanceof Hr&&mt.update(Wi),vt=qi[mt._UUID]),ft){(pt||vt)&&(dt instanceof ln||dt instanceof Ni)&&(dt.update(t,e),ki.dirtyPipelineNum++),_t=1;let n=!1;i==oo.DRAW_LAYER_INDEX0&&ct._renderDrawLayerIndex==oo.DRAW_LAYER_INDEX1?Ji.push(ct):ct._renderDrawLayerIndex==oo.DRAW_LAYER_INDEX2_Z_POINT_SORT||mt instanceof Hr?(_=e.camera.matrix[2],T=e.camera.matrix[6],b=e.camera.matrix[10],B=e.camera.matrix[14],C=nt[12],L=nt[13],R=nt[14],D=1,to.push({z:C*_+L*T+R*b+D*B,targetText:ct})):n=!0,(n||i)&&(e._useFrustumCulling&&(gt=ft._volume||ft.volume,xt=gt.xSize*ct.matrix[0],yt=gt.ySize*ct.matrix[5],xt=xt<yt?yt:xt,yt=gt.zSize*ct.matrix[10],xt=xt<yt?yt:xt,p=nt[12],v=nt[13],_=nt[14],(j[0]*p+j[1]*v+j[2]*_+j[3]<=-xt||J[0]*p+J[1]*v+J[2]*_+J[3]<=-xt||K[0]*p+K[1]*v+K[2]*_+K[3]<=-xt||tt[0]*p+tt[1]*v+tt[2]*_+tt[3]<=-xt||et[0]*p+et[1]*v+et[2]*_+et[3]<=-xt||rt[0]*p+rt[1]*v+rt[2]*_+rt[3]<=-xt)&&(_t=0)),ct instanceof Ai?(ct.compute(Wi),r.setPipeline(dt.GPURenderPipeline),Zi!=ft.interleaveBuffer._UUID&&(r.setVertexBuffer(0,ft.interleaveBuffer.GPUBuffer),Zi=ft.interleaveBuffer._UUID),r.setVertexBuffer(1,ct.particleBuffer),r.setBindGroup(2,ct.GPUBindGroup),Hi!=mt._UUID&&(r.setBindGroup(3,mt.uniformBindGroup_material.GPUBindGroup),Hi=mt._UUID),ft.indexBuffer?(Qi!=ft.indexBuffer._UUID&&(r.setIndexBuffer(ft.indexBuffer.GPUBuffer),Qi=ft.indexBuffer._UUID),r.drawIndexed(ft.indexBuffer.indexNum,ct._particleNum,0,0,0),ki.triangleNum+=ft.indexBuffer.indexNum/3):(r.draw(ft.interleaveBuffer.vertexCount,ct._particleNum,0,0,0),ki.triangleNum+=ft.interleaveBuffer.data.length/ft.interleaveBuffer.stride),ki.drawCallNum++):_t&&(r.setPipeline(dt.GPURenderPipeline),Zi!=ft.interleaveBuffer._UUID&&(r.setVertexBuffer(0,ft.interleaveBuffer.GPUBuffer),Zi=ft.interleaveBuffer._UUID),r.setBindGroup(2,ct.GPUBindGroup),Hi!=mt._UUID&&(r.setBindGroup(3,mt.uniformBindGroup_material.GPUBindGroup),Hi=mt._UUID),ft.indexBuffer?(Qi!=ft.indexBuffer._UUID&&(r.setIndexBuffer(ft.indexBuffer.GPUBuffer),Qi=ft.indexBuffer._UUID),r.drawIndexed(ft.indexBuffer.indexNum,1,0,0,0),ki.triangleNum+=ft.indexBuffer.indexNum/3):(r.draw(ft.interleaveBuffer.vertexCount,1,0,0,0),ki.triangleNum+=ft.interleaveBuffer.data.length/ft.interleaveBuffer.stride),ki.drawCallNum++),ct._prevMaterialUUID=mt._UUID)}if(ht&&(p=1,v=0,_=0,x=0,y=1,T=0,U=0,M=0,b=1,ot[12]=ct._x,ot[13]=ct._y*(bt?-1:1),ot[14]=ct._z,ot[15]=1,c=ct._rotationX*Ut,h=ct._rotationY*Ut,d=ct._rotationZ*Ut,$=c%W,$<-k?$+=W:$>k&&($-=W),$=$<0?Q*$+H*$*$:Q*$-H*$*$,a=$<0?Z*($*-$-$)+$:Z*($*$-$)+$,$=(c+q)%W,$<-k?$+=W:$>k&&($-=W),$=$<0?Q*$+H*$*$:Q*$-H*$*$,l=$<0?Z*($*-$-$)+$:Z*($*$-$)+$,$=h%W,$<-k?$+=W:$>k&&($-=W),$=$<0?Q*$+H*$*$:Q*$-H*$*$,s=$<0?Z*($*-$-$)+$:Z*($*$-$)+$,$=(h+q)%W,$<-k?$+=W:$>k&&($-=W),$=$<0?Q*$+H*$*$:Q*$-H*$*$,f=$<0?Z*($*-$-$)+$:Z*($*$-$)+$,$=d%W,$<-k?$+=W:$>k&&($-=W),$=$<0?Q*$+H*$*$:Q*$-H*$*$,u=$<0?Z*($*-$-$)+$:Z*($*$-$)+$,$=(d+q)%W,$<-k?$+=W:$>k&&($-=W),$=$<0?Q*$+H*$*$:Q*$-H*$*$,m=$<0?Z*($*-$-$)+$:Z*($*$-$)+$,I=f*m,N=a*s*m-l*u,F=l*s*m+a*u,A=f*u,V=a*s*u+l*m,O=l*s*u-a*m,Y=-s,X=a*f,z=l*f,c=ct._scaleX,h=ct._scaleY,d=ct._scaleZ,ot[0]=(p*I+x*N+U*F)*c,ot[1]=(v*I+y*N+M*F)*c,ot[2]=(_*I+T*N+b*F)*c,ot[3]=ot[3]*c,ot[4]=(p*A+x*V+U*O)*h,ot[5]=(v*A+y*V+M*O)*h,ot[6]=(_*A+T*V+b*O)*h,ot[7]=ot[7]*h,ot[8]=(p*Y+x*X+U*z)*d,ot[9]=(v*Y+y*X+M*z)*d,ot[10]=(_*Y+T*X+b*z)*d,ot[11]=ot[11]*d,(ct._pivotX||ct._pivotY||ct._pivotZ)&&(p=ot[0],v=ot[1],_=ot[2],g=ot[3],x=ot[4],y=ot[5],T=ot[6],S=ot[7],U=ot[8],M=ot[9],b=ot[10],P=ot[11],w=ot[12],G=ot[13],B=ot[14],E=ot[15],C=1,L=0,R=0,D=0,ot[0]=C*p+L*x+R*U+D*w,ot[1]=C*v+L*y+R*M+D*G,ot[2]=C*_+L*T+R*b+D*B,ot[3]=C*g+L*S+R*P+D*E,C=0,L=1,R=0,D=0,ot[4]=C*p+L*x+R*U+D*w,ot[5]=C*v+L*y+R*M+D*G,ot[6]=C*_+L*T+R*b+D*B,ot[7]=C*g+L*S+R*P+D*E,C=0,L=0,R=1,D=0,ot[8]=C*p+L*x+R*U+D*w,ot[9]=C*v+L*y+R*M+D*G,ot[10]=C*_+L*T+R*b+D*B,ot[11]=C*g+L*S+R*P+D*E,bt?at?(C=-ct._pivotX,L=ct._pivotY,R=-ct._pivotZ,D=1):(C=-ct._pivotX/c,L=ct._pivotY/h,R=-ct._pivotZ,D=1):(C=-ct._pivotX,L=-ct._pivotY,R=-ct._pivotZ,D=1),ot[12]=C*p+L*x+R*U+D*w,ot[13]=C*v+L*y+R*M+D*G,ot[14]=C*_+L*T+R*b+D*B,ot[15]=C*g+L*S+R*P+D*E)),(st||ht)&&(ki.dirtyTransformNum++,at?(p=at[0],v=at[1],_=at[2],g=at[3],x=at[4],y=at[5],T=at[6],S=at[7],U=at[8],M=at[9],b=at[10],P=at[11],w=at[12],G=at[13],B=at[14],E=at[15],C=ot[0],L=ot[1],R=ot[2],D=ot[3],nt[0]=C*p+L*x+R*U+D*w,nt[1]=C*v+L*y+R*M+D*G,nt[2]=C*_+L*T+R*b+D*B,nt[3]=C*g+L*S+R*P+D*E,C=ot[4],L=ot[5],R=ot[6],D=ot[7],nt[4]=C*p+L*x+R*U+D*w,nt[5]=C*v+L*y+R*M+D*G,nt[6]=C*_+L*T+R*b+D*B,nt[7]=C*g+L*S+R*P+D*E,C=ot[8],L=ot[9],R=ot[10],D=ot[11],nt[8]=C*p+L*x+R*U+D*w,nt[9]=C*v+L*y+R*M+D*G,nt[10]=C*_+L*T+R*b+D*B,nt[11]=C*g+L*S+R*P+D*E,C=ot[12],L=ot[13],R=ot[14],D=ot[15],nt[12]=C*p+L*x+R*U+D*w,nt[13]=C*v+L*y+R*M+D*G,nt[14]=C*_+L*T+R*b+D*B,nt[15]=C*g+L*S+R*P+D*E):(nt[0]=ot[0],nt[1]=ot[1],nt[2]=ot[2],nt[3]=ot[3],nt[4]=ot[4],nt[5]=ot[5],nt[6]=ot[6],nt[7]=ot[7],nt[8]=ot[8],nt[9]=ot[9],nt[10]=ot[10],nt[11]=ot[11],nt[12]=ot[12],nt[13]=ot[13],nt[14]=ot[14],nt[15]=ot[15]),it=ct.normalMatrix,p=nt[0],v=nt[1],_=nt[2],g=nt[3],x=nt[4],y=nt[5],T=nt[6],S=nt[7],U=nt[8],M=nt[9],b=nt[10],P=nt[11],G=nt[12],B=nt[13],E=nt[14],C=nt[15],w=p*y-v*x,L=p*T-_*x,R=p*S-g*x,D=v*T-_*y,I=v*S-g*y,N=_*S-g*T,F=U*B-M*G,A=U*E-b*G,V=U*C-P*G,O=M*E-b*B,Y=M*C-P*B,O=b*C-P*E,z=w*O-L*Y+R*O+D*V-I*A+N*F,z=1/z,it[0]=(y*O-T*Y+S*O)*z,it[4]=(-v*O+_*Y-g*O)*z,it[8]=(B*N-E*I+C*D)*z,it[12]=(-M*N+b*I-P*D)*z,it[1]=(-x*O+T*V-S*A)*z,it[5]=(p*O-_*V+g*A)*z,it[9]=(-G*N+E*R-C*L)*z,it[13]=(U*N-b*R+P*L)*z,it[2]=(x*Y-y*V+S*F)*z,it[6]=(-p*Y+v*V-g*F)*z,it[10]=(G*I-B*R+C*w)*z,it[14]=(-U*I+M*R-P*w)*z,it[3]=(-x*O+y*A-T*F)*z,it[7]=(p*O-v*A+_*F)*z,it[11]=(-G*D+B*L-E*w)*z,it[15]=(U*D-M*L+b*w)*z,!Ki.includes(ct.uniformBuffer_meshMatrix)&&Ki.push(ct.uniformBuffer_meshMatrix),ct.uniformBuffer_meshMatrix.meshFloat32Array.set(ct.matrix,ct.offsetMatrix/Float32Array.BYTES_PER_ELEMENT),ct.uniformBuffer_meshMatrix.meshFloat32Array.set(ct.normalMatrix,ct.offsetNormalMatrix/Float32Array.BYTES_PER_ELEMENT)),lt){let e,r=lt.joints,n=0,i=r.length,o=new Float32Array(16*i),a=new Float32Array([nt[0],nt[1],nt[2],nt[3],nt[4],nt[5],nt[6],nt[7],nt[8],nt[9],nt[10],nt[11],nt[12],nt[13],nt[14],nt[15]]),s=a,u=a,l=u[0],f=u[1],m=u[2],c=u[3],h=u[4],d=u[5],p=u[6],v=u[7],_=u[8],g=u[9],x=u[10],y=u[11],T=u[12],S=u[13],U=u[14],M=u[15],b=g*U*v-S*x*v+S*p*y-d*U*y-g*p*M+d*x*M,P=T*x*v-_*U*v-T*p*y+h*U*y+_*p*M-h*x*M,w=_*S*v-T*g*v+T*d*y-h*S*y-_*d*M+h*g*M,G=T*g*p-_*S*p-T*d*x+h*S*x+_*d*U-h*g*U,B=l*b+f*P+m*w+c*G;if(0===B)return mat4.identity(a);{const t=1/B;s[0]=b*t,s[1]=(S*x*c-g*U*c-S*m*y+f*U*y+g*m*M-f*x*M)*t,s[2]=(d*U*c-S*p*c+S*m*v-f*U*v-d*m*M+f*p*M)*t,s[3]=(g*p*c-d*x*c-g*m*v+f*x*v+d*m*y-f*p*y)*t,s[4]=P*t,s[5]=(_*U*c-T*x*c+T*m*y-l*U*y-_*m*M+l*x*M)*t,s[6]=(T*p*c-h*U*c-T*m*v+l*U*v+h*m*M-l*p*M)*t,s[7]=(h*x*c-_*p*c+_*m*v-l*x*v-h*m*y+l*p*y)*t,s[8]=w*t,s[9]=(T*g*c-_*S*c-T*f*y+l*S*y+_*f*M-l*g*M)*t,s[10]=(h*S*c-T*d*c+T*f*v-l*S*v-h*f*M+l*d*M)*t,s[11]=(_*d*c-h*g*c-_*f*v+l*g*v+h*f*y-l*d*y)*t,s[12]=G*t,s[13]=(_*S*m-T*g*m+T*f*x-l*S*x-_*f*U+l*g*U)*t,s[14]=(T*d*m-h*S*m-T*f*p+l*S*p+h*f*U-l*d*U)*t,s[15]=(h*g*m-_*d*m+_*f*p-l*g*p-h*f*x+l*d*x)*t}for(;n<i;n++)e=r[n].matrix,o[16*n+0]=e[0],o[16*n+1]=e[1],o[16*n+2]=e[2],o[16*n+3]=e[3],o[16*n+4]=e[4],o[16*n+5]=e[5],o[16*n+6]=e[6],o[16*n+7]=e[7],o[16*n+8]=e[8],o[16*n+9]=e[9],o[16*n+10]=e[10],o[16*n+11]=e[11],o[16*n+12]=e[12],o[16*n+13]=e[13],o[16*n+14]=e[14],o[16*n+15]=e[15];mt.uniformBuffer_vertex.float32Array.set(a,mt.uniformBufferDescriptor_vertex.redStructOffsetMap.globalTransformOfNodeThatTheMeshIsAttachedTo/Float32Array.BYTES_PER_ELEMENT),mt.uniformBuffer_vertex.float32Array.set(o,mt.uniformBufferDescriptor_vertex.redStructOffsetMap.jointMatrix/Float32Array.BYTES_PER_ELEMENT),lt.inverseBindMatrices._UUID||(lt.inverseBindMatrices._UUID=JSON.stringify(lt.inverseBindMatrices));let E=mt.uniformBuffer_vertex._UUID;eo[E]!=lt.inverseBindMatrices._UUID&&(mt.uniformBuffer_vertex.float32Array.set(lt.inverseBindMatrices,mt.uniformBufferDescriptor_vertex.redStructOffsetMap.inverseBindMatrixForJoint/Float32Array.BYTES_PER_ELEMENT),eo[E]=lt.inverseBindMatrices._UUID),t.device.defaultQueue.writeBuffer(mt.uniformBuffer_vertex.GPUBuffer,0,mt.uniformBuffer_vertex.float32Array)}Mt||ro(t,e,r,ct.children),ct.dirtyPipeline=!1,ct.dirtyTransform=!1}},no=(t=>{let e,r=[];return(t,n,i)=>{e=n.scene,e.skyBox&&(.6*n.camera.farClipping!=e.skyBox._prevScale&&(e.skyBox.scaleX=e.skyBox.scaleY=e.skyBox.scaleZ=e.skyBox._prevScale=.6*n.camera.farClipping),r.push(e.skyBox)),e.grid&&r.push(e.grid),e.axis&&r.push(e.axis),r.length&&ro(t,n,i,r),r.length=0}})(),io=(t,e,r,n)=>{let i,o,a=performance.now();i=e.scene,o=i.backgroundColorRGBA,e.camera.update&&e.camera.update(),ji=e.computeViewFrustumPlanes(e);let s={colorAttachments:[{attachment:e.baseAttachmentView,resolveTarget:e.baseAttachment_ResolveTargetView,loadValue:{r:o[0],g:o[1],b:o[2],a:o[3]}},{attachment:e.baseAttachment_mouseColorID_depthView,resolveTarget:e.baseAttachment_mouseColorID_depth_ResolveTargetView,loadValue:{r:0,g:0,b:0,a:0}}],depthStencilAttachment:{attachment:e.baseDepthStencilAttachmentView,depthLoadValue:1,depthStoreOp:"store",stencilLoadValue:0,stencilStoreOp:"store"}},u=t.device.createCommandEncoder(),l=u.beginRenderPass(s);e.updateSystemUniform(l,t);let f=e.viewRect;l.setViewport(0,0,f[2],f[3],0,1),l.setScissorRect(0,0,f[2],f[3]),no(t,e,l),ro(t,e,l,i._flatChildList),((t,e,r)=>{Ji.length&&ro(t,e,r,Ji,oo.DRAW_LAYER_INDEX1),Ji.length=0})(t,e,l),((t,e,r)=>{if(to.length){let n=[],i=to.length;for(to.sort((t,e)=>t.z>e.z?-1:t.z<e.z?1:0);i--;)n[i]=to[i].targetText;ro(t,e,r,n,oo.DRAW_LAYER_INDEX2_Z_POINT_SORT)}to.length=0})(t,e,l),((t,e,r)=>{if(e.debugLightList.length){let n=e.useFrustumCulling;e.useFrustumCulling=!1,ro(t,e,r,e.debugLightList),e.useFrustumCulling=n}})(t,e,l),l.endPass(),ki.baseRenderTime=performance.now()-a,a=performance.now();let m=e.postEffect.effectList.length?((t,e)=>{let r=e.baseAttachment_ResolveTargetView,n=e.baseAttachment_ResolveTarget,i=0,o=e.postEffect.effectList.length;for(;i<o;i++){let o=e.postEffect.effectList[i];o.render(t,e,ro,r),r=o.baseAttachmentView,n=o.baseAttachment}return n})(t,e):e.baseAttachment_ResolveTarget;return e._lastTextureView=m.createView(),ki.postEffectRenderTime=performance.now()-a,a=performance.now(),u.finish()};class oo{constructor(){}render(t,e){Wi=t;let r,n=Ei.resetData(e.viewList),i=0,o=e.viewList.length;qi={};let a=[],s=e.swapChain.getCurrentTexture(),u=s.createView(),l=[];const f=e.device.createCommandEncoder(),m=f.beginRenderPass({colorAttachments:[{attachment:u,loadValue:{r:0,g:0,b:0,a:0}}]});for(;i<o;i++)r=e.viewList[i],ki=n[i],oo.clearStateCache(),sn.needFlatListUpdate&&(r.scene._flatChildList=He.getFlatChildList(r.scene._children)),l.push(io(e,r)),a.push(r.mouseEventChecker.check(e)),r._finalRender||(r._finalRender=new $i(e)),r._finalRender.baseAttachment=s,r._finalRender.baseAttachmentView=u,r._finalRender.render(e,r,ro,r._lastTextureView,m);for(m.endPass(),l.push(f.finish()),e.device.defaultQueue.submit(l),a.includes("pointer")?e.canvas.style.cursor="pointer":e.canvas.style.cursor="default",i=Ki.length;i--;)e.device.defaultQueue.writeBuffer(Ki[i].GPUBuffer,0,Ki[i].meshFloat32Array);sn.needFlatListUpdate=!1,Ki.length=0,bi.animationLooper(t),Ei.update()}}Ve(oo,"clearStateCache",t=>{Zi=null,Qi=null,Hi=null}),Ve(oo,"DRAW_LAYER_INDEX0",0),Ve(oo,"DRAW_LAYER_INDEX1",1),Ve(oo,"DRAW_LAYER_INDEX2_Z_POINT_SORT",2);var ao=new WeakMap;class so extends ze{get color(){return Oe(this,ao)}set color(t){Ye(this,ao,t);let e=He.hexToRGB_ZeroToOne(t);this._colorRGBA[0]=e[0],this._colorRGBA[1]=e[1],this._colorRGBA[2]=e[2],this._colorRGBA[3]=1,this._debugMaterial.color=t}get colorRGBA(){return this._colorRGBA}get x(){return this._x}set x(t){this._x=this._debugMesh.x=t,this._debugMesh.targetTo(0,0,0)}get y(){return this._y}set y(t){this._y=this._debugMesh.y=t,this._debugMesh.targetTo(0,0,0)}get z(){return this._z}set z(t){this._z=this._debugMesh.z=t,this._debugMesh.targetTo(0,0,0)}get intensity(){return this._intensity}set intensity(t){this._intensity=t}constructor(t){super(),Ve(this,"_intensity",1),Ve(this,"_x",0),Ve(this,"_y",0),Ve(this,"_z",0),ao.set(this,{writable:!0,value:"#ff0000"}),Ve(this,"_colorRGBA",new Float32Array([1,0,0,1])),Ve(this,"_debugMesh",void 0),Ve(this,"_debugMaterial",void 0),Ve(this,"useDebugMesh",!1),this._debugMesh=new Yn(t),this._debugMaterial=new Gr(t),this._debugMaterial.colorAlpha=.5}}var uo=new WeakMap,lo=new WeakMap,fo=new WeakMap,mo=new WeakMap,co=new WeakMap,ho=new WeakMap,po=new WeakMap,vo=new WeakMap,_o=new WeakMap,go=new WeakMap,xo=new WeakMap,yo=new WeakMap,To=new WeakMap,So=new WeakMap,Uo=new WeakMap;class Mo extends so{constructor(t,e="#111",r=.1){super(t),this.color=e,this.intensity=r}}var bo=new WeakMap;class Po extends di{constructor(t,e=1,r=8,n=8,i=0,o=2*Math.PI,a=0,s=Math.PI,u=1){let l;if(super(),bo.set(this,{writable:!0,value:function(){let t,e,r,n,i,o,a,s,u=[],l=new Float32Array([0,0,0]),f=new Float32Array([0,0,0]);return function(m,c,h,d,p,v,_,g,x,y){t=g+x,n=0,u.length=0,l[0]=0,l[1]=0,l[2]=0,f[0]=0,f[1]=0,f[2]=0;let T=[],S=[];for(r=0;r<=p;r++){let t=[],i=r/p;for(e=0;e<=d;e++){let r=e/d;l.x=-h*Math.cos(v+r*_)*Math.sin(g+i*x),l.y=h*Math.cos(g+i*x),l.z=h*Math.sin(v+r*_)*Math.sin(g+i*x),T.push(l.x,l.y,l.z),f[0]=l.x,f[1]=l.y,f[2]=l.z,Ae.vec3.normalize(f,f),T.push(f[0],f[1],f[2]),T.push(r*y,i*y),t.push(n++)}u.push(t)}for(r=0;r<p;r++)for(e=0;e<d;e++)i=u[r][e+1],o=u[r][e],a=u[r+1][e],s=u[r+1][e+1],(0!==r||g>0)&&S.push(i,o,s),(r!==p-1||t<Math.PI)&&S.push(o,a,s);return new pi(m,new vi(m,c+"_interleaveBuffer",vi.TYPE_VERTEX,new Float32Array(T),[new hi("vertexPosition","float3"),new hi("vertexNormal","float3"),new hi("texcoord","float2")]),new vi(m,c+"_indexBuffer",vi.TYPE_INDEX,new Uint32Array(S)))}}()}),r=Math.max(3,Math.floor(r)),n=Math.max(2,Math.floor(n)),l=[this.constructor.name,e,r,n,i,o,a,s,u].join("_"),t.state.Geometry.has(l))return t.state.Geometry.get(l);let f=Oe(this,bo).call(this,t,l,e,r,n,i,o,a,s,u);this.interleaveBuffer=f.interleaveBuffer,this.indexBuffer=f.indexBuffer,this.vertexState=f.vertexState,t.state.Geometry.set(l,this)}}var wo=new WeakMap;class Go extends di{constructor(t,e=1,r=1,n=1,i=8,o=1,a=!1,s=0,u=2*Math.PI,l=1){let f;if(super(),wo.set(this,{writable:!0,value:function(){let t,e;return function(r,n,i,o,a,s,u,l,f,m,c){let h=[],d=[],p=0,v=[],_=a/2;return t=function(){let t,e,r=[],n=[],l=(o-i)/a;for(e=0;e<=u;e++){let d=[],g=e/u,x=g*(o-i)+i;for(t=0;t<=s;t++){let e=t/s,i=e*m+f,o=Math.sin(i),u=Math.cos(i);n[0]=x*o,n[1]=-g*a+_,n[2]=x*u,h.push(n[0],n[1],n[2]),r[0]=o,r[1]=l,r[2]=u,Ae.vec3.normalize(r,r),h.push(r[0],r[1],r[2]),h.push(e*c,g*c),d.push(p++)}v.push(d)}for(t=0;t<s;t++)for(e=0;e<u;e++){let r=v[e][t],n=v[e+1][t],i=v[e+1][t+1],o=v[e][t+1];d.push(r,n,o),d.push(n,i,o)}},e=function(t){let e,r,n,a=[],u=[],l=!0===t?i:o,v=!0===t?1:-1;for(r=p,e=1;e<=s;e++)h.push(0,_*v,0),h.push(0,v,0),h.push(.5*c,.5*c),p++;for(n=p,e=0;e<=s;e++){let t=e/s*m+f,r=Math.cos(t),n=Math.sin(t);u[0]=l*n,u[1]=_*v,u[2]=l*r,h.push(u[0],u[1],u[2]),h.push(0,v,0),a[0]=.5*r+.5,a[1]=.5*n*v+.5,h.push(a[0]*c,c-a[1]*c),p++}for(e=0;e<s;e++){let i=r+e,o=n+e;!0===t?d.push(o,o+1,i):d.push(o+1,o,i)}},t(),!1===l&&(i>0&&e(!0),o>0&&e(!1)),new pi(r,new vi(r,n+"_interleaveBuffer",vi.TYPE_VERTEX,new Float32Array(h),[new hi("vertexPosition","float3"),new hi("vertexNormal","float3"),new hi("texcoord","float2")]),new vi(r,n+"_indexBuffer",vi.TYPE_INDEX,new Uint32Array(d)))}}()}),f=[this.constructor.name,t,e,r,n,i,o,a,s,u,l].join("_"),t.state.Geometry.has(f))return t.state.Geometry.get(f);let m=Oe(this,wo).call(this,t,f,e,r,n,i,o,a,s,u,l);this.interleaveBuffer=m.interleaveBuffer,this.indexBuffer=m.indexBuffer,this.vertexState=m.vertexState,t.state.Geometry.set(f,this)}}var Bo=new WeakMap;class Eo extends so{constructor(t,e="#ffffff",r=1){super(t),Bo.set(this,{writable:!0,value:t=>{let e=new Yn(t,new Po(t,1,16,16,16),this._debugMaterial);e.primitiveTopology="line-strip",this._debugMesh.addChild(e),[-.7,0,.7].forEach((e,r)=>{let n,i;n=new Yn(t,new Go(t,.01,.01,1==r?1e5:2),this._debugMaterial),n.rotationX=90,n.x=e,n.z=-1,i=new Yn(t,new Go(t,0,.25,.5),this._debugMaterial),i.y=1,n.addChild(i),this._debugMesh.addChild(n)})}}),Oe(this,Bo).call(this,t),this.color=e,this.intensity=r}}var Co=new WeakMap;class Lo extends so{get radius(){return this._radius}set radius(t){this._radius=t,this._debugMesh.setScale(t,t,t)}constructor(t,e="#ffffff",r=1,n=1){super(t),Ve(this,"_radius",1),Co.set(this,{writable:!0,value:t=>{let e=new Yn(t,new Po(t,1,32,32,32),this._debugMaterial);e.primitiveTopology="line-strip",this._debugMesh.addChild(e)}}),this.color=e,this.intensity=r,this.radius=n,Oe(this,Co).call(this,t)}}var Ro=new WeakMap;class Do extends so{constructor(t,e="#ffffff",r=1,n=.1,i=80){super(t),Ro.set(this,{writable:!0,value:t=>{let e=new Yn(t,new Go(t,0,1,2),this._debugMaterial);e.rotationX=-90,e.primitiveTopology="line-strip",this._debugMesh.addChild(e)}}),this.color=e,this.intensity=r,this.cutoff=n,this.exponent=i,Oe(this,Ro).call(this,t)}}let Io=new Float32Array(1);var No=new WeakMap;class Fo extends(Mr.mix(mr,Mr.diffuseTexture,Mr.normalTexture,Mr.specularTexture,Mr.emissiveTexture,Mr.refractionTexture,Mr.displacementTexture,Mr.basicLightPropertys,Mr.alpha)){constructor(t,e,r,n,i,o,a){super(t),No.set(this,{writable:!0,value:void 0}),this.diffuseTexture=e,this.refractionTexture=r,this.normalTexture=n,this.emissiveTexture=o,this.specularTexture=i,this.displacementTexture=a,this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"diffuseTexture":this._diffuseTexture=t,r=e;break;case"normalTexture":this._normalTexture=t,r=e;break;case"specularTexture":this._specularTexture=t,r=e;break;case"emissiveTexture":this._emissiveTexture=t,r=e;break;case"refractionTexture":this._refractionTexture=t,r=e;break;case"displacementTexture":this._displacementTexture=t,r=e}r&&(Io[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],Io):this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],Io)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,Io[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],Io):this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],Io),this.needResetBindingInfo=!0)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:this._displacementTexture?this._displacementTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:2,resource:this._displacementTexture?this._displacementTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:3,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:4,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:5,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:6,resource:this._normalTexture?this._normalTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:7,resource:this._normalTexture?this._normalTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:8,resource:this._specularTexture?this._specularTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:9,resource:this._specularTexture?this._specularTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:10,resource:this._emissiveTexture?this._emissiveTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:11,resource:this._emissiveTexture?this._emissiveTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:12,resource:this._refractionTexture?this._refractionTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:13,resource:this._refractionTexture?this._refractionTexture._GPUTextureView:this.redGPUContext.state.emptyCubeTextureView}],this._afterResetBindingInfo()}}Ve(Fo,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n    ${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${Ke.GLSL_SystemUniforms_vertex.calcDisplacement}    \n    ${Ke.GLSL_SystemUniforms_vertex.meshUniforms}\n         \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out vec4 vVertexPosition;\t\n\tlayout( location = 3 ) out float vMouseColorID;\t\n\tlayout( location = 4 ) out float vSumOpacity;\n\tlayout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        float displacementFlowSpeedX;\n        float displacementFlowSpeedY;\n        float displacementPower;\n        float __displacementTextureRenderYn;\n    } vertexUniforms;\n\t\n\tlayout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 1 ) uniform sampler uDisplacementSampler;\n\tlayout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 2 ) uniform texture2D uDisplacementTexture;\n\tvoid main() {\t\t\n\t\tvVertexPosition = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position, 1.0);\n\t\tvNormal = (meshMatrixUniforms.normalMatrix[ int(meshUniforms.index) ] * vec4(normal,1.0)).xyz;\n\t\tvUV = uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tif(vertexUniforms.__displacementTextureRenderYn == TRUTHY) vVertexPosition.xyz += calcDisplacement(vNormal, vertexUniforms.displacementFlowSpeedX, vertexUniforms.displacementFlowSpeedY, vertexUniforms.displacementPower, uv, uDisplacementTexture, uDisplacementSampler);\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * vVertexPosition;\t\t\n\t}\n\t`),Ve(Fo,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_fragment.systemUniforms}\n\t${Ke.GLSL_SystemUniforms_fragment.cotangent_frame}\n\t${Ke.GLSL_SystemUniforms_fragment.perturb_normal}\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform FragmentUniforms {\n        float normalPower;\n        float shininess; \n        float specularPower;\n\t    vec4 specularColor;\n\t    float emissivePower;\n\t    float refractionPower;\n\t    float refractionRatio;\n\t    float alpha;\n\t    float useFlatMode;\n\t    //\n\t    float __diffuseTextureRenderYn;\n\t\tfloat __refractionTextureRenderYn;\n\t\tfloat __normalTextureRenderYn;\n\t\tfloat __specularTextureRenderYn;\n\t\tfloat __emissiveTextureRenderYn;\n    } fragmentUniforms;\n\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in vec4 vVertexPosition;\n\tlayout( location = 3 ) in float vMouseColorID;\n\tlayout( location = 4 ) in float vSumOpacity;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 4 ) uniform sampler uDiffuseSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 5 ) uniform texture2D uDiffuseTexture;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 6 ) uniform sampler uNormalSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 7 ) uniform texture2D uNormalTexture;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 8 ) uniform sampler uSpecularSampler;\t\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 9 ) uniform texture2D uSpecularTexture;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 10 ) uniform sampler uEmissiveSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 11 ) uniform texture2D uEmissiveTexture;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 12 ) uniform sampler uRefractionSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 13 ) uniform textureCube uRefractionTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tfloat testAlpha = 0.0;\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor = texture(sampler2D(uDiffuseTexture, uDiffuseSampler), vUV) ;\n\t\t\t\n\t    vec3 N = normalize(vNormal);\n\t\tvec4 normalColor = vec4(0.0);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) normalColor = texture(sampler2D(uNormalTexture, uNormalSampler), vUV) ;\n\t\tif(fragmentUniforms.useFlatMode == TRUTHY) N = getFlatNormal(vVertexPosition.xyz);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) N = perturb_normal(N, vVertexPosition.xyz, vUV, normalColor.rgb, fragmentUniforms.normalPower) ;\n\t\n\t\tif(fragmentUniforms.__refractionTextureRenderYn == TRUTHY) {\n\t\t\tvec3 I = normalize(vVertexPosition.xyz - systemUniforms.cameraPosition);\n\t\t\tvec3 R = refract(I, N, fragmentUniforms.refractionRatio);\n\t\t\tvec4 refractionColor = texture(samplerCube(uRefractionTexture,uRefractionSampler), R);\n\t\t\tdiffuseColor = mix(diffuseColor, refractionColor, fragmentUniforms.refractionPower);\n\t\t}\n\t\t\n\t\ttestAlpha = diffuseColor.a;\n\t\t\n\t\tfloat specularTextureValue = 1.0;\n\t\tif(fragmentUniforms.__specularTextureRenderYn == TRUTHY) specularTextureValue = texture(sampler2D(uSpecularTexture, uSpecularSampler), vUV).r ;\n\t\t\n\t\tvec4 finalColor = \n\t\tcalcDirectionalLight(\n\t\t\tdiffuseColor,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.directionalLightCount,\n\t\t\tsystemUniforms.directionalLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue\n\t\t)\n\t\t+\n\t\tcalcPointLight(\n\t\t\tdiffuseColor,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.pointLightCount,\n\t\t\tsystemUniforms.pointLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue,\n\t\t\tvVertexPosition.xyz\n\t\t)\n\t\t+ la;\n\t\t\n\t\tif(fragmentUniforms.__emissiveTextureRenderYn == TRUTHY) {\n\t\t\tvec4 emissiveColor = texture(sampler2D(uEmissiveTexture, uEmissiveSampler), vUV);\n\t\t\tfinalColor.rgb += emissiveColor.rgb * fragmentUniforms.emissivePower;\n\t\t}\n\t\t\n\t\tfinalColor.a = testAlpha;\n\t\toutColor = finalColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve(Fo,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Fo,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.VERTEX,type:"sampler"},{binding:2,visibility:GPUShaderStage.VERTEX,type:"sampled-texture"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:4,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:5,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:6,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:7,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:8,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:9,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:10,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:11,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:12,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:13,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture",viewDimension:"cube"}]}),Ve(Fo,"uniformBufferDescriptor_vertex",[{size:$e.float,valueName:"displacementFlowSpeedX"},{size:$e.float,valueName:"displacementFlowSpeedY"},{size:$e.float,valueName:"displacementPower"},{size:$e.float,valueName:"__displacementTextureRenderYn"}]),Ve(Fo,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"normalPower"},{size:$e.float,valueName:"shininess"},{size:$e.float,valueName:"specularPower"},{size:$e.float4,valueName:"specularColorRGBA"},{size:$e.float,valueName:"emissivePower"},{size:$e.float,valueName:"refractionPower"},{size:$e.float,valueName:"refractionRatio"},{size:$e.float,valueName:"alpha"},{size:$e.float,valueName:"useFlatMode"},{size:$e.float,valueName:"__diffuseTextureRenderYn"},{size:$e.float,valueName:"__refractionTextureRenderYn"},{size:$e.float,valueName:"__normalTextureRenderYn"},{size:$e.float,valueName:"__specularTextureRenderYn"},{size:$e.float,valueName:"__emissiveTextureRenderYn"}]);let Ao=new Float32Array(1);var Vo=new WeakMap;class Oo extends(Mr.mix(mr,Mr.diffuseTexture,Mr.alpha)){constructor(t,e){super(t),Vo.set(this,{writable:!0,value:!1}),this.diffuseTexture=e,this.needResetBindingInfo=!0}get useFixedScale(){return Oe(this,Vo)}set useFixedScale(t){Ye(this,Vo,t),Ao[0]=t?1:0,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap.useFixedScale,Ao),this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"diffuseTexture":this._diffuseTexture=t,r=e}r&&(Ao[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],Ao):this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],Ao)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,Ao[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],Ao):this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],Ao),this.needResetBindingInfo=!0)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:2,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:3,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}Ve(Oo,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${Ke.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out float vMouseColorID;\n\tlayout( location = 3 ) out float vSumOpacity;\t\n\tlayout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        float useFixedScale;\n    } vertexUniforms;\n    ${Ke.GLSL_SystemUniforms_vertex.getSprite3DMatrix}\n\tvoid main() {\n\t\tgl_Position = systemUniforms.perspectiveMTX * getSprite3DMatrix( systemUniforms.cameraMTX, meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] ) * vec4(position,1.0);\n\t\tif(vertexUniforms.useFixedScale == TRUTHY)  {\n\t\t\tgl_Position /= gl_Position.w;\n\t\t\tgl_Position.xy += position.xy * vec2((systemUniforms.perspectiveMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ])[0][0],(systemUniforms.perspectiveMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ])[1][1]);\n\t\t}\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t}\n\t`),Ve(Oo,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\tconst float TRUTHY = 1.0;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in float vMouseColorID;\t\n\tlayout( location = 3 ) in float vSumOpacity;\t\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform FragmentUniforms {\n        float alpha;\n        //\n        float __diffuseTextureRenderYn;\n    } fragmentUniforms;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform texture2D uDiffuseTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor = texture(sampler2D(uDiffuseTexture, uSampler), vUV) ;\n\t\toutColor = diffuseColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve(Oo,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Oo,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:2,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"}]}),Ve(Oo,"uniformBufferDescriptor_vertex",[{size:$e.float,valueName:"useFixedScale"}]),Ve(Oo,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"alpha"},{size:$e.float,valueName:"__diffuseTextureRenderYn"}]);var Yo=new WeakMap;class Xo extends di{constructor(t,e=1,r=1,n=1,i=1,o=1,a=1,s=1){let u;if(super(),Yo.set(this,{writable:!0,value:function(){let t,e;return e=function(e,r,n,i,o,a,s,u,l,f,m,c,h){let d,p,v=u/m,_=l/c,g=u/2,x=l/2,y=f/2,T=m+1,S=c+1,U=0,M=[];for(p=0;p<S;p++){let t=p*_-x;for(d=0;d<T;d++){let r=d*v-g;M[n]=r*a,M[i]=t*s,M[o]=y,e.push(M.x,M.y,M.z),M[n]=0,M[i]=0,M[o]=f>0?1:-1,e.push(M.x,M.y,M.z),e.push(d/m*h,p/c*h),U+=1}}for(p=0;p<c;p++)for(d=0;d<m;d++){let e=t+d+T*p,n=t+d+T*(p+1),i=t+(d+1)+T*(p+1),o=t+(d+1)+T*p;r.push(e,n,o,n,i,o)}t+=U},function(r,n,i,o,a,s,u,l,f){let m=[],c=[];return t=0,e(m,c,"z","y","x",-1,-1,a,o,i,l,u,f),e(m,c,"z","y","x",1,-1,a,o,-i,l,u,f),e(m,c,"x","z","y",1,1,i,a,o,s,l,f),e(m,c,"x","z","y",1,-1,i,a,-o,s,l,f),e(m,c,"x","y","z",1,-1,i,o,a,s,u,f),e(m,c,"x","y","z",-1,-1,i,o,-a,s,u,f),new pi(r,new vi(r,n+"_interleaveBuffer",vi.TYPE_VERTEX,new Float32Array(m),[new hi("vertexPosition","float3"),new hi("vertexNormal","float3"),new hi("texcoord","float2")]),new vi(r,n+"_indexBuffer",vi.TYPE_INDEX,new Uint32Array(c)))}}()}),u=[this.constructor.name,e,r,n,i,o,a,s].join("_"),t.state.Geometry.has(u))return t.state.Geometry.get(u);let l=Oe(this,Yo).call(this,t,u,e,r,n,i,o,a,s);this.interleaveBuffer=l.interleaveBuffer,this.indexBuffer=l.indexBuffer,this.vertexState=l.vertexState,t.state.Geometry.set(u,this)}}var zo=new WeakMap,$o=new WeakMap,ko=new WeakMap,Wo=new WeakMap;let Zo,Qo,Ho,qo,jo,Jo,Ko,ta,ea,ra,na=function(t){t._height=+t._height,t._svg.setAttribute("width",t._width),t._svg.setAttribute("height",t._height),t._svg.querySelector("foreignObject").setAttribute("height",t._height),t._svg.querySelector("table").style.height=t._height+"px",t._img.src="data:image/svg+xml;charset=utf-8,"+encodeURIComponent(t._svg.outerHTML)};Zo=function(t,e,r){let n;n=t._svg.querySelector("td").style,t["_"+e]=r,Object.defineProperty(t,e,{get:function(){return t["_"+e]},set:function(r){t["_"+e]=r,n[e]="number"==typeof r?r+="px":r,na(t)}}),t[e]=r};ra=function(t,e,r){let n=Ae.vec2.sqrDist(e,r);if(0===n)return Ae.vec2.sqrDist(t,e);let i=((t[0]-e[0])*(r[0]-e[0])+(t[1]-e[1])*(r[1]-e[1]))/n;return i=Math.max(0,Math.min(1,i)),Ae.vec2.sqrDist(t,Ae.vec2.lerp([0,0],e,r,i))},ea=function(t,e,r,n,i){let o=i||[],a=t[e],s=t[r-1],u=0,l=1,f=e+1;for(;f<r-1;++f){let e=ra(t[f],a,s);e>u&&(u=e,l=f)}return Math.sqrt(u)>n?(ea(t,e,l+1,n,o),ea(t,l,r,n,o)):o.push(a,s),o},qo=function(t,e){null==e&&(e=1);let r,n,i,o,a=t.length,s=a-2,u=0;for(;u<a-1;u++)r=u?t[u-1].point:t[u].point,n=t[u].point,i=t[u+1].point,o=u===s?i:t[u+2].point,t[u].outPoint[0]=n[0]+(i[0]-r[0])/6*e,t[u].outPoint[1]=n[1]+(i[1]-r[1])/6*e,t[u].outPoint[2]=n[2]+(i[2]-r[2])/6*e,t[u+1].inPoint[0]=i[0]-(o[0]-n[0])/6*e,t[u+1].inPoint[1]=i[1]-(o[1]-n[1])/6*e,t[u+1].inPoint[2]=i[2]-(o[2]-n[2])/6*e;return t},Jo=function(t){let e,r,n,i=[],o=0;for(e=0,r=t.length;e<r;e++)n=t[e],0===o?(i[o++]=n.point,i[o++]=n.outPoint):(i[o++]=n.inPoint,i[o++]=n.point,t[e+1]&&(i[o++]=n.outPoint));return i},jo=function(){let t,e;return t=function(t,e){let r=t[e+0],n=t[e+1],i=t[e+2],o=t[e+3],a=3*n[0]-2*r[0]-o[0],s=3*n[1]-2*r[1]-o[1],u=3*i[0]-2*o[0]-r[0],l=3*i[1]-2*o[1]-r[1];return a*=a,s*=s,u*=u,l*=l,a<u&&(a=u),s<l&&(s=l),a+s},e=function(r,n,i,o){let a=o||[];if(t(r,n)<i)a.push(r[n+0],r[n+3]);else{let t=.5,o=r[n+0],s=r[n+1],u=r[n+2],l=r[n+3],f=Ae.vec3.lerp([0,0],o,s,t),m=Ae.vec3.lerp([0,0],s,u,t),c=Ae.vec3.lerp([0,0],u,l,t),h=Ae.vec3.lerp([0,0],f,m,t),d=Ae.vec3.lerp([0,0],m,c,t),p=Ae.vec3.lerp([0,0],h,d,t);p.colorRGBA=o.colorRGBA,e([o,f,h,p],0,i,a),e([p,d,c,l],0,i,a)}return a},function(t,r){let n=[],i=(t.length-1)/3;i=Math.floor(i);let o,a=0;for(;a<i;++a)o=3*a,e(t,o,r,n);return n}}(),ta=function(t){},Ko=function(t,e,r,n,i){let o,a,s,u;switch(t._interleaveData.length=0,t.type){case fa.CATMULL_ROM:case fa.BEZIER:if(e.length>1)for(t._serializedPoints=Jo(fa.CATMULL_ROM===t.type?qo(e,r):e),o=jo(t._serializedPoints,n),o=ea(o,0,o.length,i),a=0,s=o.length;a<s;a++)u=o[a],t._interleaveData.push(u[0],u[1],u[2],...u.colorRGBA);else t._interleaveData.push(0,0,0,...He.hexToRGB_ZeroToOne(t.color));break;default:for(a=0,s=e.length;a<s;a++)u=e[a].point,t._interleaveData.push(u[0],u[1],u[2],...u.colorRGBA)}t.debug,t._upload()};class ia{constructor(t=0,e=0,r=0,n=0,i=0,o=0,a=0,s=0,u=0,l,f){let m=[...He.hexToRGB_ZeroToOne(l),f];this.inPoint=[n,i,o],this.inPoint.colorRGBA=m,this.point=[t,e,r],this.point.colorRGBA=m,this.outPoint=[a,s,u],this.outPoint.colorRGBA=m}}var oa=new WeakMap,aa=new WeakMap,sa=new WeakMap,ua=new WeakMap,la=new WeakMap;class fa extends On{get type(){return Oe(this,oa)}set type(t){t!==fa.LINEAR&&t!==fa.CATMULL_ROM&&t!==fa.BEZIER&&He.throwFunc("Line : 허용하지 않는 타입","입력값 : "+t),Ye(this,oa,t),Ko(this,Oe(this,la),Oe(this,aa),Oe(this,ua),Oe(this,sa))}get tension(){return Oe(this,aa)}set tension(t){Ye(this,aa,t),Ko(this,Oe(this,la),Oe(this,aa),Oe(this,ua),Oe(this,sa))}get distance(){return Oe(this,sa)}set distance(t){Ye(this,sa,t),Ko(this,Oe(this,la),Oe(this,aa),Oe(this,ua),Oe(this,sa))}get tolerance(){return Oe(this,ua)}set tolerance(t){Ye(this,ua,t),Ko(this,Oe(this,la),Oe(this,aa),Oe(this,ua),Oe(this,sa))}constructor(t,e="#ff0000",r=fa.LINEAR){super(t),oa.set(this,{writable:!0,value:void 0}),aa.set(this,{writable:!0,value:void 0}),sa.set(this,{writable:!0,value:void 0}),ua.set(this,{writable:!0,value:void 0}),la.set(this,{writable:!0,value:[]}),this.redGPUContext=t,this._interleaveData=[0,0,0],this.primitiveTopology="line-strip",this._serializedPoints=[],Ye(this,aa,1),Ye(this,ua,.01),Ye(this,sa,.1),this.color=e,Ye(this,oa,r),this._debug=!1,this.material=new Or(this.redGPUContext),this.dirtyPipeline=!1}addPoint(t=0,e=0,r=0,n,i=1,o=0,a=0,s=0,u=0,l=0,f=0){"number"==typeof t||He.throwFunc("Line : addPoint - x값은 숫자만 허용","입력값 : "+t),"number"==typeof e||He.throwFunc("Line : addPoint - y값은 숫자만 허용","입력값 : "+e),"number"==typeof r||He.throwFunc("Line : addPoint - z값은 숫자만 허용","입력값 : "+r),"number"==typeof o||He.throwFunc("Line : addPoint - inX값은 숫자만 허용","입력값 : "+o),"number"==typeof a||He.throwFunc("Line : addPoint - inY값은 숫자만 허용","입력값 : "+a),"number"==typeof s||He.throwFunc("Line : addPoint - inZ값은 숫자만 허용","입력값 : "+s),"number"==typeof u||He.throwFunc("Line : addPoint - outX값은 숫자만 허용","입력값 : "+u),"number"==typeof l||He.throwFunc("Line : addPoint - outY값은 숫자만 허용","입력값 : "+l),"number"==typeof f||He.throwFunc("Line : addPoint - outZ값은 숫자만 허용","입력값 : "+f),Oe(this,la).push(new ia(t,e,r,o,a,s,u,l,f,n||this.color,i)),Ko(this,Oe(this,la),Oe(this,aa),Oe(this,ua),Oe(this,sa))}addPointAt(t,e=0,r=0,n=0,i,o=1,a=0,s=0,u=0,l=0,f=0,m=0){"number"==typeof e||He.throwFunc("Line : addPoint - x값은 숫자만 허용","입력값 : "+e),"number"==typeof r||He.throwFunc("Line : addPoint - y값은 숫자만 허용","입력값 : "+r),"number"==typeof n||He.throwFunc("Line : addPoint - z값은 숫자만 허용","입력값 : "+n),"number"==typeof a||He.throwFunc("Line : addPoint - inX값은 숫자만 허용","입력값 : "+a),"number"==typeof s||He.throwFunc("Line : addPoint - inY값은 숫자만 허용","입력값 : "+s),"number"==typeof u||He.throwFunc("Line : addPoint - inZ값은 숫자만 허용","입력값 : "+u),"number"==typeof l||He.throwFunc("Line : addPoint - outX값은 숫자만 허용","입력값 : "+l),"number"==typeof f||He.throwFunc("Line : addPoint - outY값은 숫자만 허용","입력값 : "+f),"number"==typeof m||He.throwFunc("Line : addPoint - outZ값은 숫자만 허용","입력값 : "+m),"number"==typeof t||He.throwFunc("addPointAt","index는 숫자만 입력가능","입력값 : "+t),Oe(this,la).length<t&&(t=Oe(this,la).length),null!=t?Oe(this,la).splice(t,0,new ia(e,r,n,a,s,u,l,f,m,i||this.color,o)):Oe(this,la).push(new ia(e,r,n,a,s,u,l,f,m,i||this.color,o)),Ko(this,Oe(this,la),Oe(this,aa),Oe(this,ua),Oe(this,sa))}removePointAt(t){"number"!=typeof t&&He.throwFunc("removeChildAt","index가 Number형이 아님 ","입력값 : "+t),Oe(this,la)[t]?Oe(this,la).splice(t,1):He.throwFunc("removeChildAt","index 해당인덱스에 위치한 포인트가 없음.","입력값 : "+t),Ko(this,Oe(this,la),Oe(this,aa),Oe(this,ua),Oe(this,sa))}removeAllPoint(){Oe(this,la).length=0,Ko(this,Oe(this,la),Oe(this,aa),Oe(this,ua),Oe(this,sa)),this._upload()}_upload(){this._UUID=ze.getNextUUID(),Oe(this,la).length?(this._interleaveBuffer=new vi(this.redGPUContext,"Line_InterleaveBuffer_"+this._UUID,vi.TYPE_VERTEX,new Float32Array(this._interleaveData),[new hi("vertexPosition","float3"),new hi("vertexColor","float4")]),this.geometry=new pi(this.redGPUContext,this._interleaveBuffer)):(this._interleaveBuffer=null,this.geometry=null)}}Ve(fa,"LINEAR","linear"),Ve(fa,"CATMULL_ROM","catmullRom"),Ve(fa,"BEZIER","bezier");const ma=new Float32Array(1);class ca extends zi{get brightness(){return this._brightness}set brightness(t){this._brightness=t,ma[0]=this._brightness/255,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.brightness,ma)}get contrast(){return this._contrast}set contrast(t){this._contrast=t,ma[0]=this._contrast/255,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.contrast,ma)}constructor(t){super(t),Ve(this,"_brightness",0),Ve(this,"_contrast",0)}}Ve(ca,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve(ca,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float brightness;\n        float contrast;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 finalColor = vec4(0.0);\n\t\tfinalColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\t\tif ( fragmentUniforms.contrast > 0.0 ) finalColor.rgb = ( finalColor.rgb - 0.5 ) / ( 1.0 - fragmentUniforms.contrast ) + 0.5;\n\t\telse finalColor.rgb = ( finalColor.rgb - 0.5 ) * ( 1.0 + fragmentUniforms.contrast ) + 0.5;\n\t\tfinalColor.rgb += fragmentUniforms.brightness;\n\t\toutColor = finalColor;\n\t}\n`),Ve(ca,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(ca,"uniformsBindGroupLayoutDescriptor_material",zi.uniformsBindGroupLayoutDescriptor_material),Ve(ca,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(ca,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"brightness"},{size:$e.float,valueName:"contrast"}]);class ha extends zi{constructor(t){super(t)}}Ve(ha,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve(ha,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tdiffuseColor = texture( sampler2D( uSourceTexture, uSampler ), vUV ) ;\n\t    float gray = (diffuseColor.r  + diffuseColor.g + diffuseColor.b)/3.0;\n\t\toutColor = vec4( gray, gray, gray, 1.0);;\n\t}\n`),Ve(ha,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(ha,"uniformsBindGroupLayoutDescriptor_material",zi.uniformsBindGroupLayoutDescriptor_material),Ve(ha,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(ha,"uniformBufferDescriptor_fragment",mr.uniformBufferDescriptor_empty);const da=new Float32Array(1);class pa extends zi{get hue(){return this._hue}set hue(t){this._hue=t,da[0]=this._hue/180,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.hue,da)}get saturation(){return this._saturation}set saturation(t){this._saturation=t,da[0]=this._saturation/100,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.saturation,da)}constructor(t){super(t),Ve(this,"_hue",0),Ve(this,"_saturation",0)}}Ve(pa,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve(pa,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float hue;\n        float saturation;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 finalColor = vec4(0.0);\n\t\tfinalColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\t\t\n\t\tfloat hue_value = fragmentUniforms.hue;\n\t\tfloat angle = hue_value * 3.1415926535897932384626433832795;\n\t\tfloat s = sin(angle), c = cos(angle);\n\t\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\n\t\tfloat len = length(finalColor.rgb);\n\t\t\n\t\tfinalColor.rgb = vec3(\n\t\t\tdot(finalColor.rgb, weights.xyz),\n\t\t\tdot(finalColor.rgb, weights.zxy),\n\t\t\tdot(finalColor.rgb, weights.yzx)\n\t\t);\n\t\t\n\t\tfloat average = (finalColor.r + finalColor.g + finalColor.b) / 3.0;\n\t\tfloat saturation_value = fragmentUniforms.saturation;\n\t\tif (saturation_value > 0.0) finalColor.rgb += (average - finalColor.rgb) * (1.0 - 1.0 / (1.001 - saturation_value));\n\t\telse finalColor.rgb += (average - finalColor.rgb) * (-saturation_value);\n\t\t\n\t\toutColor = finalColor;\n\t}\n`),Ve(pa,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(pa,"uniformsBindGroupLayoutDescriptor_material",zi.uniformsBindGroupLayoutDescriptor_material),Ve(pa,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(pa,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"hue"},{size:$e.float,valueName:"saturation"}]);class va extends zi{constructor(t){super(t)}}Ve(va,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve(va,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tdiffuseColor = texture( sampler2D( uSourceTexture, uSampler ), vUV ) ;\n\t\tdiffuseColor.rgb = 1.0 - diffuseColor.rgb;\n\t\toutColor = diffuseColor;\n\t}\n`),Ve(va,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(va,"uniformsBindGroupLayoutDescriptor_material",zi.uniformsBindGroupLayoutDescriptor_material),Ve(va,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(va,"uniformBufferDescriptor_fragment",mr.uniformBufferDescriptor_empty);const _a=new Float32Array(1);class ga extends zi{get threshold(){return this._threshold}set threshold(t){this._threshold=t,_a[0]=this._threshold,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.threshold,_a)}constructor(t){super(t),Ve(this,"_threshold",128)}}Ve(ga,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve(ga,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float threshold;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 finalColor = vec4(0.0);\n\t\tfinalColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\t\tfloat v = 0.0;\n\t\tif( 0.2126 * finalColor.r + 0.7152 * finalColor.g + 0.0722 * finalColor.b >= fragmentUniforms.threshold/255.0 ) v = 1.0;\n\t\tfinalColor.r = finalColor.g = finalColor.b = v;\n\t\toutColor = finalColor;\n\t}\n`),Ve(ga,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(ga,"uniformsBindGroupLayoutDescriptor_material",zi.uniformsBindGroupLayoutDescriptor_material),Ve(ga,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(ga,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"threshold"}]);const xa=new Float32Array(1);class ya extends zi{get size(){return this._size}set size(t){this._size=t,xa[0]=this._size,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.size,xa)}constructor(t){super(t),Ve(this,"_size",50)}}Ve(ya,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve(ya,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float size;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tfloat random(vec3 scale, float seed) {\n\t\treturn fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n\t}\n\n\tvoid main() {\n\t\tvec4 finalColor = vec4(0.0);\n\t\tvec2 delta;\n\t\tfloat total = 0.0;\n\t\tfloat offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\t\tdelta = vec2( fragmentUniforms.size/systemUniforms.resolution.x, 0.0 );\n\t\tfor (float t = -10.0; t <= 10.0; t++) {\n\t\t\tfloat percent = (t + offset - 0.5) / 10.0;\n\t\t\tfloat weight = 1.0 - abs(percent);\n\t\t\tvec4 color = texture( sampler2D( uSourceTexture, uSampler ), vUV  + delta * percent );\n\t\t\tcolor.rgb *= color.a;\n\t\t\tfinalColor += color * weight;\n\t\t\ttotal += weight;\n\t\t}\n\t\tfinalColor = finalColor / total;\n\t\tfinalColor.rgb /= finalColor.a + 0.00001;\n\t\toutColor = finalColor;\n\t}\n`),Ve(ya,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(ya,"uniformsBindGroupLayoutDescriptor_material",zi.uniformsBindGroupLayoutDescriptor_material),Ve(ya,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(ya,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"size"}]);const Ta=new Float32Array(1);class Sa extends zi{get size(){return this._size}set size(t){this._size=t,Ta[0]=this._size,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.size,Ta)}constructor(t){super(t),Ve(this,"_size",50)}}Ve(Sa,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve(Sa,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float size;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tfloat random(vec3 scale, float seed) {\n\t\treturn fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n\t}\n\n\tvoid main() {\n\t\tvec4 finalColor = vec4(0.0);\n\t\tvec2 delta;\n\t\tfloat total = 0.0;\n\t\tfloat offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\t\tdelta = vec2( 0.0, fragmentUniforms.size/systemUniforms.resolution.y );\n\t\tfor (float t = -10.0; t <= 10.0; t++) {\n\t\t\tfloat percent = (t + offset - 0.5) / 10.0;\n\t\t\tfloat weight = 1.0 - abs(percent);\n\t\t\tvec4 color = texture( sampler2D( uSourceTexture, uSampler ), vUV  + delta * percent );\n\t\t\tcolor.rgb *= color.a;\n\t\t\tfinalColor += color * weight;\n\t\t\ttotal += weight;\n\t\t}\n\t\tfinalColor = finalColor / total;\n\t\tfinalColor.rgb /= finalColor.a + 0.00001;\n\t\toutColor = finalColor;\n\t}\n`),Ve(Sa,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Sa,"uniformsBindGroupLayoutDescriptor_material",zi.uniformsBindGroupLayoutDescriptor_material),Ve(Sa,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(Sa,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"size"}]);var Ua=new WeakMap,Ma=new WeakMap;class ba extends zi{get radius(){return this._radius}set radius(t){this._radius=t,Oe(this,Ua).size=t,Oe(this,Ma).size=t}constructor(t){super(t),Ua.set(this,{writable:!0,value:void 0}),Ma.set(this,{writable:!0,value:void 0}),Ve(this,"_radius",void 0),Ye(this,Ua,new ya(t)),Ye(this,Ma,new Sa(t)),this.radius=5}render(t,e,r,n){this.checkSize(t,e),Oe(this,Ua).render(t,e,r,n),Oe(this,Ma).render(t,e,r,Oe(this,Ua).baseAttachmentView),this.baseAttachment=Oe(this,Ma).baseAttachment,this.baseAttachmentView=Oe(this,Ma).baseAttachmentView}}Ve(ba,"vertexShaderGLSL",`\n\t\t${Ke.GLSL_VERSION}\n\t\tvoid main() {}\n\t`),Ve(ba,"fragmentShaderGLSL",`\n\t\t${Ke.GLSL_VERSION}\n\t\tvoid main() {}\n\t`),Ve(ba,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(ba,"uniformsBindGroupLayoutDescriptor_material",zi.uniformsBindGroupLayoutDescriptor_material),Ve(ba,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(ba,"uniformBufferDescriptor_fragment",mr.uniformBufferDescriptor_empty);const Pa=new Float32Array(1);class wa extends zi{get bloomStrength(){return this._bloomStrength}set bloomStrength(t){this._bloomStrength=t,Pa[0]=this._bloomStrength,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.bloomStrength,Pa)}get exposure(){return this._exposure}set exposure(t){this._exposure=t,Pa[0]=this._exposure,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.exposure,Pa)}constructor(t){super(t),Ve(this,"blurTexture",void 0),Ve(this,"_bloomStrength",15),Ve(this,"_exposure",15)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:1,resource:this.sampler.GPUSampler},{binding:2,resource:this.sourceTexture},{binding:3,resource:this.blurTexture}],this._afterResetBindingInfo()}}Ve(wa,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve(wa,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float bloomStrength;\n        float exposure;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform texture2D uBlurTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 diffuseColor;\n\t\tvec4 blurColor;\n\t\tvec4 finalColor;\n\t\tdiffuseColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\t\tblurColor = texture( sampler2D( uBlurTexture, uSampler ), vUV );\t\n\t\tfinalColor = diffuseColor;\n\t\tfinalColor.rgb = (finalColor.rgb  + blurColor.rgb * fragmentUniforms.bloomStrength ) * fragmentUniforms.exposure ;\n\t\toutColor = finalColor;\n\t}\n`),Ve(wa,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(wa,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:2,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"}]}),Ve(wa,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(wa,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"bloomStrength"},{size:$e.float,valueName:"exposure"}]);var Ga=new WeakMap,Ba=new WeakMap,Ea=new WeakMap,Ca=new WeakMap,La=new WeakMap,Ra=new WeakMap,Da=new WeakMap;class Ia extends zi{get blur(){return Oe(this,Ca)}set blur(t){Ye(this,Ca,t),Oe(this,Ga).radius=t}get threshold(){return Oe(this,La)}set threshold(t){Ye(this,La,t),Oe(this,Ea).threshold=t}get exposure(){return Oe(this,Ra)}set exposure(t){Ye(this,Ra,t),Oe(this,Ba).exposure=t}get bloomStrength(){return Oe(this,Da)}set bloomStrength(t){Ye(this,Da,t),Oe(this,Ba).bloomStrength=t}constructor(t){super(t),Ga.set(this,{writable:!0,value:void 0}),Ba.set(this,{writable:!0,value:void 0}),Ea.set(this,{writable:!0,value:void 0}),Ca.set(this,{writable:!0,value:void 0}),La.set(this,{writable:!0,value:void 0}),Ra.set(this,{writable:!0,value:void 0}),Da.set(this,{writable:!0,value:void 0}),Ye(this,Ea,new ga(t)),Ye(this,Ga,new ba(t)),Ye(this,Ba,new wa(t)),this.blur=20,this.threshold=75,this.exposure=1,this.bloomStrength=1.2}render(t,e,r,n){this.checkSize(t,e),Oe(this,Ea).render(t,e,r,n),Oe(this,Ga).render(t,e,r,Oe(this,Ea).baseAttachmentView),Oe(this,Ba).blurTexture=Oe(this,Ga).baseAttachmentView,Oe(this,Ba).render(t,e,r,n),this.baseAttachment=Oe(this,Ba).baseAttachment,this.baseAttachmentView=Oe(this,Ba).baseAttachmentView}}Ve(Ia,"vertexShaderGLSL",`\n\t\t${Ke.GLSL_VERSION}\n\t\tvoid main() {}\n\t`),Ve(Ia,"fragmentShaderGLSL",`\n\t\t${Ke.GLSL_VERSION}\n\t\tvoid main() {}\n\t`),Ve(Ia,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Ia,"uniformsBindGroupLayoutDescriptor_material",zi.uniformsBindGroupLayoutDescriptor_material),Ve(Ia,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(Ia,"uniformBufferDescriptor_fragment",mr.uniformBufferDescriptor_empty);class Na extends zi{constructor(t){super(t)}}Ve(Na,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve(Na,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec2 px = vec2(1.0/systemUniforms.resolution.x, 1.0/systemUniforms.resolution.y);\n\t\tvec4 finalColor = vec4(0.0);\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2(-7.0*px.x, -7.0*px.y) )*0.0044299121055113265;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2(-6.0*px.x, -6.0*px.y) )*0.00895781211794;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2(-5.0*px.x, -5.0*px.y) )*0.0215963866053;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2(-4.0*px.x, -4.0*px.y) )*0.0443683338718;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2(-3.0*px.x, -3.0*px.y) )*0.0776744219933;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2(-2.0*px.x, -2.0*px.y) )*0.115876621105;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2(-1.0*px.x, -1.0*px.y) )*0.147308056121;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV                             )*0.159576912161;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2( 1.0*px.x,  1.0*px.y) )*0.147308056121;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2( 2.0*px.x,  2.0*px.y) )*0.115876621105;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2( 3.0*px.x,  3.0*px.y) )*0.0776744219933;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2( 4.0*px.x,  4.0*px.y) )*0.0443683338718;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2( 5.0*px.x,  5.0*px.y) )*0.0215963866053;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2( 6.0*px.x,  6.0*px.y) )*0.00895781211794;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2( 7.0*px.x,  7.0*px.y) )*0.0044299121055113265;\n\t\toutColor = finalColor;\n\t}\n`),Ve(Na,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Na,"uniformsBindGroupLayoutDescriptor_material",zi.uniformsBindGroupLayoutDescriptor_material),Ve(Na,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(Na,"uniformBufferDescriptor_fragment",mr.uniformBufferDescriptor_empty);const Fa=new Float32Array(1);class Aa extends zi{constructor(t){super(t),Ve(this,"_centerX",0),Ve(this,"_centerY",0),Ve(this,"_amount",38)}get centerX(){return this._centerX}set centerX(t){this._centerX=t,Fa[0]=this._centerX,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.centerX,Fa)}get centerY(){return this._centerY}set centerY(t){this._centerY=t,Fa[0]=this._centerY,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.centerY,Fa)}get amount(){return this._amount}set amount(t){this._amount=t,Fa[0]=this._amount,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.amount,Fa)}get radius(){return this._radius}}Ve(Aa,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t}\n\t`),Ve(Aa,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float centerX;\n        float centerY;\n        float amount;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tfloat random(vec3 scale, float seed) {\n\t\treturn fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n\t}\n\n\tvoid main() {\n\t\tvec4 finalColor = vec4(0.0);\n\t\tvec2 center = vec2( fragmentUniforms.centerX + 0.5, -fragmentUniforms.centerY + 0.5 );\n\t\tvec2 toCenter = center - vUV ;\n\t\tfloat offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\t\tfloat total = 0.0;\n\t\t\n\t\tfor (float t = 0.0; t <= 30.0; t++) {\n\t\t\tfloat percent = (t + offset) / 30.0;\n\t\t\tfloat weight = 3.0 * (percent - percent * percent);\n\t\t\tvec4 color = texture( sampler2D( uSourceTexture, uSampler ), vUV + toCenter * percent * fragmentUniforms.amount / 100.0 );\n\t\t\tcolor.rgb *= color.a;\n\t\t\tfinalColor += color * weight;\n\t\t\ttotal += weight;\n\t\t}\n\t\tfinalColor = finalColor / total;\n\t\tfinalColor.rgb /= finalColor.a + 0.00001;\n\t\toutColor = finalColor;\n\t}\n`),Ve(Aa,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Aa,"uniformsBindGroupLayoutDescriptor_material",zi.uniformsBindGroupLayoutDescriptor_material),Ve(Aa,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(Aa,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"centerX"},{size:$e.float,valueName:"centerY"},{size:$e.float,valueName:"amount"}]);const Va=new Float32Array(1);class Oa extends zi{get focusLength(){return this._focusLength}set focusLength(t){this._focusLength=t,Va[0]=this._focusLength,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.focusLength,Va)}constructor(t){super(t),Ve(this,"blurTexture",void 0),Ve(this,"depthTexture",void 0),Ve(this,"_focusLength",15)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:1,resource:this.sampler.GPUSampler},{binding:2,resource:this.sourceTexture},{binding:3,resource:this.blurTexture},{binding:4,resource:this.depthTexture}],this._afterResetBindingInfo()}}Ve(Oa,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve(Oa,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float focusLength;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform texture2D uBlurTexture;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 4 ) uniform texture2D uDepthTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 diffuseColor;\n\t\tvec4 blurColor;\n\t\tvec4 depthColor;\n\t\tdiffuseColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\t\tblurColor = texture( sampler2D( uBlurTexture, uSampler ), vUV );\n\t\tdepthColor = texture( sampler2D( uDepthTexture, uSampler ), vUV );\n\t\tdepthColor = depthColor * fragmentUniforms.focusLength;\n\t\t\n\t\tdiffuseColor.rgb *= min(depthColor.g,1.0);\n\t\tblurColor.rgb *= max(1.0 - depthColor.g,0.0);\n\t\toutColor = diffuseColor + blurColor;\n\t}\n`),Ve(Oa,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Oa,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,type:"uniform-buffer"},{binding:1,visibility:GPUShaderStage.FRAGMENT,type:"sampler"},{binding:2,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:3,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"},{binding:4,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture"}]}),Ve(Oa,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(Oa,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"focusLength"}]);var Ya=new WeakMap,Xa=new WeakMap,za=new WeakMap,$a=new WeakMap;class ka extends zi{get blur(){return Oe(this,za)}set blur(t){Ye(this,za,t),Oe(this,Ya).radius=t}get focusLength(){return Oe(this,$a)}set focusLength(t){Ye(this,$a,t),Oe(this,Xa).focusLength=t}constructor(t){super(t),Ya.set(this,{writable:!0,value:void 0}),Xa.set(this,{writable:!0,value:void 0}),za.set(this,{writable:!0,value:void 0}),$a.set(this,{writable:!0,value:void 0}),Ye(this,Ya,new ba(t)),Ye(this,Xa,new Oa(t)),this.blur=5,this.focusLength=15}render(t,e,r,n){this.checkSize(t,e),Oe(this,Ya).render(t,e,r,n),Oe(this,Xa).blurTexture=Oe(this,Ya).baseAttachmentView,Oe(this,Xa).depthTexture=e.baseAttachment_mouseColorID_depth_ResolveTargetView,Oe(this,Xa).render(t,e,r,n),this.baseAttachment=Oe(this,Xa).baseAttachment,this.baseAttachmentView=Oe(this,Xa).baseAttachmentView}}Ve(ka,"vertexShaderGLSL",`\n\t\t${Ke.GLSL_VERSION}\n\t\tvoid main() {}\n\t`),Ve(ka,"fragmentShaderGLSL",`\n\t\t${Ke.GLSL_VERSION}\n\t\tvoid main() {}\n\t`),Ve(ka,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(ka,"uniformsBindGroupLayoutDescriptor_material",zi.uniformsBindGroupLayoutDescriptor_material),Ve(ka,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(ka,"uniformBufferDescriptor_fragment",mr.uniformBufferDescriptor_empty);const Wa=new Float32Array(1);class Za extends zi{get centerX(){return this._centerX}set centerX(t){this._centerX=t,Wa[0]=this._centerX,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.centerX,Wa)}get centerY(){return this._centerY}set centerY(t){this._centerY=t,Wa[0]=this._centerY,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.centerY,Wa)}get angle(){return this._angle}set angle(t){this._angle=t,Wa[0]=this._angle,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.angle,Wa)}get radius(){return this._radius}set radius(t){this._radius=t,Wa[0]=this._radius,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.radius,Wa)}get grayMode(){return this._grayMode}set grayMode(t){this._grayMode=t,Wa[0]=this._grayMode?1:0,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.grayMode,Wa)}constructor(t){super(t),Ve(this,"_centerX",0),Ve(this,"_centerY",0),Ve(this,"_angle",0),Ve(this,"_radius",2),Ve(this,"_grayMode",!1)}}Ve(Za,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t}\n\t`),Ve(Za,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float centerX;\n        float centerY;\n        float angle;\n        float radius;\n        float grayMode;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tfloat pattern(float angle) {\n\t\tangle = angle * 3.141592653589793/180.0;\n\t\tfloat s = sin(angle), c = cos(angle);\n\t\tvec2 tex = vUV;\n\t\ttex.x -= fragmentUniforms.centerX + 0.5;\n\t\ttex.y -= fragmentUniforms.centerY + 0.5;\n\t\tvec2 point = vec2(\n\t\t\tc * tex.x - s * tex.y,\n\t\t\ts * tex.x + c * tex.y\n\t\t) * systemUniforms.resolution /fragmentUniforms.radius;\n\t\treturn (sin(point.x) * sin(point.y)) * 4.0;\n\t}\n\n\tvoid main() {\n\t\tvec4 finalColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\t\tif(fragmentUniforms.grayMode == 1.0) {\n\t\t\tfloat average = (finalColor.r + finalColor.g + finalColor.b) / 3.0;\n\t\t\tfinalColor = vec4(vec3(average * 10.0 - 5.0 + pattern(fragmentUniforms.angle)), finalColor.a);\n\t\t}else{\n\t\t\tvec3 cmy = 1.0 - finalColor.rgb;\n\t\t\tfloat k = min(cmy.x, min(cmy.y, cmy.z));\n\t\t\tcmy = (cmy - k) / (1.0 - k);\n\t\t\tcmy = clamp(cmy * 10.0 - 3.0 + vec3(pattern(fragmentUniforms.angle + 0.26179), pattern(fragmentUniforms.angle + 1.30899), pattern(fragmentUniforms.angle)), 0.0, 1.0);\n\t\t\tk = clamp(k * 10.0 - 5.0 + pattern(fragmentUniforms.angle + 0.78539), 0.0, 1.0);\n\t\t\tfinalColor = vec4(1.0 - cmy - k, finalColor.a);\n\t\t}\n\t\toutColor = finalColor;\n\t}\n`),Ve(Za,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Za,"uniformsBindGroupLayoutDescriptor_material",zi.uniformsBindGroupLayoutDescriptor_material),Ve(Za,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(Za,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"centerX"},{size:$e.float,valueName:"centerY"},{size:$e.float,valueName:"angle"},{size:$e.float,valueName:"radius"},{size:$e.float,valueName:"grayMode"}]);const Qa=new Float32Array(1);class Ha extends zi{get width(){return this._width}set width(t){this._width=t,Qa[0]=this._width,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.width,Qa)}get height(){return this._height}set height(t){this._height=t,Qa[0]=this._height,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.height,Qa)}constructor(t){super(t),Ve(this,"_width",5),Ve(this,"_height",5)}}Ve(Ha,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t}\n\t`),Ve(Ha,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float width;\n        float height;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 finalColor;\n\t\tfloat dx = 1.0/systemUniforms.resolution.x * fragmentUniforms.width;\n\t\tfloat dy = 1.0/systemUniforms.resolution.y * fragmentUniforms.height;\n\t\tvec2 coord = vec2(\n\t\t\tdx * (floor(vUV.x / dx) + 0.5),\n\t\t\tdy * (floor(vUV.y / dy) + 0.5)\n\t\t);\n\t\tfinalColor = texture( sampler2D( uSourceTexture, uSampler ), coord );\n\t\toutColor = finalColor;\n\t}\n`),Ve(Ha,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Ha,"uniformsBindGroupLayoutDescriptor_material",zi.uniformsBindGroupLayoutDescriptor_material),Ve(Ha,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(Ha,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"width"},{size:$e.float,valueName:"height"}]);const qa=new Float32Array(1);class ja extends zi{get kernel(){return this._kernel}set kernel(t){this._kernel=t,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.kernel,this._kernel),this.kernelWeight=1}get kernelWeight(){return this._kernelWeight}set kernelWeight(t){let e=0,r=this._kernel.length;for(;r--;)e+=this._kernel[r];this._kernelWeight=e,qa[0]=e,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.kernelWeight,qa)}constructor(t,e=ja.NORMAL){super(t),Ve(this,"_kernel",void 0),Ve(this,"_kernelWeight",void 0),this.kernel=e}}Ve(ja,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out float vTime;\n\tvoid main() {\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tvTime = systemUniforms.time;\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t}\n\t`),Ve(ja,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float kernelWeight;\n        mat3 kernel;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in float vTime;\n\tlayout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_VertexUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tvoid main() {\n\n\t\tvec2 perPX = vec2(1.0/systemUniforms.resolution.x, 1.0/systemUniforms.resolution.y);\n\t\tvec4 finalColor = vec4(0.0);\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2(-1.0, -1.0)) * fragmentUniforms.kernel[0][0] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2( 0.0, -1.0)) * fragmentUniforms.kernel[0][1] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2( 1.0, -1.0)) * fragmentUniforms.kernel[0][2] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2(-1.0,  0.0)) * fragmentUniforms.kernel[1][0] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2( 0.0,  0.0)) * fragmentUniforms.kernel[1][1] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2( 1.0,  0.0)) * fragmentUniforms.kernel[1][2] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2(-1.0,  1.0)) * fragmentUniforms.kernel[2][0] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2( 0.0,  1.0)) * fragmentUniforms.kernel[2][1] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2( 1.0,  1.0)) * fragmentUniforms.kernel[2][2] ;\n\t\n\t\toutColor = vec4((finalColor / fragmentUniforms.kernelWeight).rgb, 1.0);\n\t}\n`),Ve(ja,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(ja,"uniformsBindGroupLayoutDescriptor_material",zi.uniformsBindGroupLayoutDescriptor_material),Ve(ja,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(ja,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"kernelWeight"},{size:$e.mat3,valueName:"kernel"}]),Ve(ja,"NORMAL",new Float32Array([0,0,0,0,0,1,0,0,0,0,0,0])),Ve(ja,"SHARPEN",new Float32Array([0,-1,0,0,-1,5,-1,0,0,-1,0,0])),Ve(ja,"BLUR",new Float32Array([1,1,1,0,1,1,1,0,1,1,1,0])),Ve(ja,"EDGE",new Float32Array([0,1,0,0,1,-4,1,0,0,1,0,0])),Ve(ja,"EMBOSS",new Float32Array([-2,-1,0,0,-1,1,1,0,0,1,2,0]));const Ja=new Float32Array(1);class Ka extends zi{get scanlineIntensity(){return this._scanlineIntensity}set scanlineIntensity(t){this._scanlineIntensity=t,Ja[0]=this._scanlineIntensity,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.scanlineIntensity,Ja)}get noiseIntensity(){return this._noiseIntensity}set noiseIntensity(t){this._noiseIntensity=t,Ja[0]=this._noiseIntensity,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.noiseIntensity,Ja)}get scanlineCount(){return this._scanlineCount}set scanlineCount(t){this._scanlineCount=t,Ja[0]=this._scanlineCount,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.scanlineCount,Ja)}get grayMode(){return this._grayMode}set grayMode(t){this._grayMode=t,Ja[0]=this._grayMode?1:0,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.grayMode,Ja)}constructor(t){super(t),Ve(this,"_scanlineIntensity",.5),Ve(this,"_noiseIntensity",.5),Ve(this,"_scanlineCount",2048),Ve(this,"_grayMode",!1)}}Ve(Ka,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out float vTime;\n\tvoid main() {\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tvTime = systemUniforms.time;\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t}\n\t`),Ve(Ka,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float scanlineIntensity;\n        float noiseIntensity;\n        float scanlineCount;\n        float grayMode;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in float vTime;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tfloat random(vec3 scale, float seed) {\n\t\treturn fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n\t}\n\n\tvoid main() {\n\n\t\tvec4 diffuseColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\n\t\t// make some noise\n\t\tfloat x = vUV.x * vUV.y * vTime;\n\t\tx = mod( x, 13.0 ) * mod( x, 123.0 );\n\t\tfloat dx = mod( x, 0.01 );\n\t\t\n\t\t// add noise\n\t\tvec3 finalColor = diffuseColor.rgb + diffuseColor.rgb * clamp( 0.1 + dx * 100.0, 0.0, 1.0 );\n\t\t\n\t\t// get us a sine and cosine\n\t\tvec2 sc = vec2( sin( vUV.y * fragmentUniforms.scanlineCount ), cos( vUV.y * fragmentUniforms.scanlineCount ) );\n\t\t\n\t\t// add scanlines\n\t\tfinalColor += diffuseColor.rgb * vec3( sc.x, sc.y, sc.x ) * fragmentUniforms.scanlineIntensity;\n\t\t\n\t\t// interpolate between source and result by intensity\n\t\tfinalColor = diffuseColor.rgb + clamp( fragmentUniforms.noiseIntensity, 0.0, 1.0 ) * ( finalColor - diffuseColor.rgb );\n\t\t\n\t\t// convert to grayscale if desired\n\t\tif(fragmentUniforms.grayMode == 1.0) finalColor = vec3( finalColor.r * 0.3 + finalColor.g * 0.59 + finalColor.b * 0.11 );\n\t\toutColor = vec4( finalColor, diffuseColor.a );\n\t}\n`),Ve(Ka,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Ka,"uniformsBindGroupLayoutDescriptor_material",zi.uniformsBindGroupLayoutDescriptor_material),Ve(Ka,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(Ka,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"scanlineIntensity"},{size:$e.float,valueName:"noiseIntensity"},{size:$e.float,valueName:"scanlineCount"},{size:$e.float,valueName:"grayMode"}]);const ts=new Float32Array(1);class es extends zi{get intensity(){return this._intensity}set intensity(t){this._intensity=t,ts[0]=this._intensity,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.intensity,ts)}get size(){return this._size}set size(t){this._size=t,ts[0]=this._size,this.redGPUContext.device.defaultQueue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.size,ts)}constructor(t){super(t),Ve(this,"_intensity",.85),Ve(this,"_size",.1)}}Ve(es,"vertexShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t}\n\t`),Ve(es,"fragmentShaderGLSL",`\n\t${Ke.GLSL_VERSION}\n\t${Ke.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float intensity;\n        float size;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${Ke.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\n\tvoid main() {\n\t\tvec4 finalColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\t\tfloat dist = distance(vUV, vec2(0.5, 0.5));\n\t\tfinalColor.rgb *= smoothstep(0.8, fragmentUniforms.size * 0.799, dist * ( fragmentUniforms.intensity + fragmentUniforms.size ));\n\t\toutColor = finalColor;\n\t}\n`),Ve(es,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(es,"uniformsBindGroupLayoutDescriptor_material",zi.uniformsBindGroupLayoutDescriptor_material),Ve(es,"uniformBufferDescriptor_vertex",mr.uniformBufferDescriptor_empty),Ve(es,"uniformBufferDescriptor_fragment",[{size:$e.float,valueName:"intensity"},{size:$e.float,valueName:"size"}]);var rs=new WeakMap,ns=new WeakMap,is=new WeakMap,os=new WeakMap,as=new WeakMap,ss=new WeakMap,us=new WeakMap,ls=new WeakMap,fs=new WeakMap,ms=new WeakMap;const RedGPU={glMatrix:Ae,DetectorGPU:Je,UUID:ze,Mix:Mr,baseGeometry:di,BaseLight:so,BaseMaterial:mr,DisplayContainer:sn,BaseObject3D:On,ShareGLSL:Ke,BasePostEffect:zi,BaseTexture:Wn,PipelineBasic:ln,BindGroup:ur,Buffer:vi,UniformBuffer:an,UniformBufferDescriptor:qe,Camera2D:Vi,Camera3D:oi,ObitController:class extends oi{get needUpdate(){return Oe(this,Uo)}set needUpdate(t){Ye(this,Uo,t)}get centerX(){return Oe(this,uo)}set centerX(t){Ye(this,uo,t)}get centerY(){return Oe(this,lo)}set centerY(t){Ye(this,lo,t)}get centerZ(){return Oe(this,fo)}set centerZ(t){Ye(this,fo,t)}get distance(){return Oe(this,mo)}set distance(t){Ye(this,mo,t)}get speedDistance(){return Oe(this,co)}set speedDistance(t){Ye(this,co,t)}get delayDistance(){return Oe(this,ho)}set delayDistance(t){Ye(this,ho,t)}get speedRotation(){return Oe(this,po)}set speedRotation(t){Ye(this,po,t)}get delayRotation(){return Oe(this,vo)}set delayRotation(t){Ye(this,vo,t)}get minTilt(){return Oe(this,go)}set minTilt(t){Ye(this,go,t)}get maxTilt(){return Oe(this,xo)}set maxTilt(t){Ye(this,xo,t)}get pan(){return Oe(this,yo)}set pan(t){Ye(this,yo,t)}get tilt(){return Oe(this,_o)}set tilt(t){Ye(this,_o,t)}constructor(t){super(t),uo.set(this,{writable:!0,value:0}),lo.set(this,{writable:!0,value:0}),fo.set(this,{writable:!0,value:0}),mo.set(this,{writable:!0,value:10}),co.set(this,{writable:!0,value:1}),ho.set(this,{writable:!0,value:.1}),po.set(this,{writable:!0,value:3}),vo.set(this,{writable:!0,value:.1}),_o.set(this,{writable:!0,value:-45}),go.set(this,{writable:!0,value:-90}),xo.set(this,{writable:!0,value:90}),yo.set(this,{writable:!0,value:0}),To.set(this,{writable:!0,value:0}),So.set(this,{writable:!0,value:0}),Ve(this,"currentDistance",0),Uo.set(this,{writable:!0,value:!0}),Ve(this,"targetView",void 0),(e=>{let r,n,i,o,a,s,u,l,f,m,c,h,d,p;p=t=>{let e=this.targetView;if(e){let r,n,i=e.viewRect;if(r=t[f],n=t[m],!(i[0]<r&&r<i[0]+i[2]))return;if(!(i[1]<n&&n<i[1]+i[3]))return}return!0},c=t.detector.move,h=t.detector.up,d=t.detector.down,a=0,s=0,u=0,l=0,f="layerX",m="layerY",r=e=>{p(e)&&Oe(this,Uo)&&(a=e[f],s=e[m],t.canvas.addEventListener(c,n),window.addEventListener(h,i))},n=t=>{p(t)&&Oe(this,Uo)&&(u=t[f]-a,l=t[m]-s,a=t[f],s=t[m],Ye(this,yo,Oe(this,yo)-u*Oe(this,po)*.1),Ye(this,_o,Oe(this,_o)-l*Oe(this,po)*.1))},i=e=>{t.canvas.removeEventListener(c,n),window.removeEventListener(h,i)},o=t=>{if(Oe(this,Uo)){if(!p(t))return;Ye(this,mo,Oe(this,mo)+t.deltaY/100*Oe(this,co))}},t.canvas.addEventListener(d,r),t.canvas.addEventListener("wheel",o)})()}update(t){let e,r,n;n=Math.PI/180,Oe(this,Uo)&&(Oe(this,_o)<Oe(this,go)&&Ye(this,_o,Oe(this,go)),Oe(this,_o)>Oe(this,xo)&&Ye(this,_o,Oe(this,xo)),e=Oe(this,vo),r=this.matrix,Ye(this,To,Oe(this,To)+(Oe(this,yo)-Oe(this,To))*e),Ye(this,So,Oe(this,So)+(Oe(this,_o)-Oe(this,So))*e),Oe(this,mo)<this.nearClipping&&Ye(this,mo,this.nearClipping),this.currentDistance+=(Oe(this,mo)-this.currentDistance)*Oe(this,ho),this.currentDistance<this.nearClipping&&(this.currentDistance=this.nearClipping),Ae.mat4.identity(r),Ae.mat4.translate(r,r,[Oe(this,uo),Oe(this,lo),Oe(this,fo)]),Ae.mat4.rotateY(r,r,Oe(this,To)*n),Ae.mat4.rotateX(r,r,Oe(this,So)*n),Ae.mat4.translate(r,r,[0,0,this.currentDistance]),this.x=r[12],this.y=r[13],this.z=r[14],this.lookAt(Oe(this,uo),Oe(this,lo),Oe(this,fo)))}},Geometry:pi,InterleaveInfo:hi,AmbientLight:Mo,DirectionalLight:Eo,PointLight:Lo,SpotLight:Do,GLTFLoader:bi,TextureLoader:Kn,GridMaterial:Ar,PBRMaterial_System:ci,SkyBoxMaterial:Vr,BitmapMaterial:Fr,ColorMaterial:Gr,ColorPhongMaterial:Br,ColorPhongTextureMaterial:Lr,SpriteSheetAction:class extends ze{constructor(t,e=60,r=1,n=1,i=1){super(),this.texture=t,this.frameRate=e,this.segmentW=r,this.segmentH=n,this.totalFrame=i}},SpriteSheetMaterial:Hr,Sprite3DMaterial:Oo,EnvironmentMaterial:Ir,RefractionMaterial:Fo,StandardMaterial:wr,Axis:class extends On{constructor(t){let e,r,n,i,o,a,s;super(t),n=new Xo(t),i=new Go(t,0,.5),o=new Gr(t,"#ff0000"),a=new Gr(t,"#00ff00"),s=new Gr(t,"#0000ff"),e=new Yn(t,i,o),r=new Yn(t,n,o),r.setScale(5,.1,.1),e.x=5,e.rotationZ=90,r.x=2.5,this.addChild(r,e),e=new Yn(t,i,a),r=new Yn(t,n,a),r.setScale(.1,5,.1),e.y=5,r.y=2.5,this.addChild(r,e),e=new Yn(t,i,s),r=new Yn(t,n,s),r.setScale(.1,.1,5),e.z=5,e.rotationX=-90,r.z=2.5,this.addChild(r,e),this.addChild(new Yn(t,new Po(t,.25,16,16,16),new Gr(t,"#ff00ff")))}},Grid:class extends On{get color(){return Oe(this,Wo)}set color(t){Ye(this,Wo,t),this.makeGridGeometry()}get centerColor(){return Oe(this,ko)}set centerColor(t){Ye(this,ko,t),this.makeGridGeometry()}get divisions(){return Oe(this,$o)}set divisions(t){Ye(this,$o,t),this.makeGridGeometry()}get size(){return Oe(this,zo)}set size(t){Ye(this,zo,t),this.makeGridGeometry()}constructor(t,e=100,r=100,n="#cccccc",i="#666666"){super(t),zo.set(this,{writable:!0,value:100}),$o.set(this,{writable:!0,value:100}),ko.set(this,{writable:!0,value:"#cccccc"}),Wo.set(this,{writable:!0,value:"#666666"}),Ve(this,"redGPUContext",void 0),this.redGPUContext=t,this.size=e,this.divisions=r,this.centerColor=n,this.color=i,this.makeGridGeometry(),this.material=new Ar(t),this.primitiveTopology="line-list"}makeGridGeometry(){let t,e,r,n,i,o,a=this.redGPUContext,s=[];for(t=this.divisions/2,e=this.size/this.divisions,r=this.size/2,n=0,i=-r;n<=this.divisions;n++,i+=e)o=n===t?He.hexToRGB_ZeroToOne(this.centerColor):He.hexToRGB_ZeroToOne(this.color),s.push(-r,0,i,o[0],o[1],o[2],1,r,0,i,o[0],o[1],o[2],1,i,0,-r,o[0],o[1],o[2],1,i,0,r,o[0],o[1],o[2],1);this.geometry=new pi(a,new vi(a,"gridInterleaveBuffer_"+this.size+"_"+this.divisions+"_"+this.centerColor+"_"+this.color,vi.TYPE_VERTEX,new Float32Array(s),[new hi("vertexPosition","float3"),new hi("vertexColor","float4")]))}},Mesh:Yn,SkyBox:class extends On{constructor(t,e){super(t),this.geometry=new Xo(t),this.material=new Vr(t,e),this.cullMode="front"}},Sprite3D:class extends On{set material(t){t instanceof Oo?(this._material=t,this.dirtyPipeline=!0):He.throwFunc(`addChild - only allow Sprite3DMaterial Instance. - inputValue : ${t} { type : ${typeof t} }`)}get material(){return this._material}get rotationX(){return this._rotationX}set rotationX(t){}get rotationY(){return this._rotationY}set rotationY(t){}get rotationZ(){return this._rotationZ}set rotationZ(t){}get useFixedScale(){return this.material.useFixedScale}set useFixedScale(t){this.material.useFixedScale=t}constructor(t,e,r){super(t),this.geometry=e,this.material=r,this.cullMode="none",this.renderDrawLayerIndex=oo.DRAW_LAYER_INDEX2_Z_POINT_SORT}addChild(t){}},Text:class extends On{get height(){return this._height}set height(t){this.material.height=this._height=t<2?2:t,na(this)}get width(){return this._width}set width(t){this.material.width=this._width=t<2?2:t,na(this)}get useFixedScale(){return this.material.useFixedScale}set useFixedScale(t){this.material.useFixedScale=t}get useSprite3DMode(){return this.material.useSprite3DMode}set useSprite3DMode(t){this.material.useSprite3DMode=t}constructor(t,e=256,r=128){super(t),Ve(this,"_cvs",void 0),Ve(this,"_ctx",void 0),Ve(this,"_svg",void 0),Ve(this,"_img",void 0),Ve(this,"_width",256),Ve(this,"_height",128),this.renderDrawLayerIndex=oo.DRAW_LAYER_INDEX2_Z_POINT_SORT,e>1920&&(e=1920),r>1920&&(r=1920),this._cvs=new OffscreenCanvas(e,r),this._ctx=this._cvs.getContext("2d"),this._svg=document.createElementNS("http://www.w3.org/2000/svg","svg"),this._svg.setAttribute("xmlns","http://www.w3.org/2000/svg"),this._svg.style="position:absolute;top:0px;left:0px;text-align:center;z-index:10",this._svg.innerHTML='<foreignObject  width="100%" style="position:absolute;top:0;left:0">   <table xmlns="http://www.w3.org/1999/xhtml" style="border-collapse: collapse;position:table;top:0;left:0;width:100%;table-layout:fixed">       <tr xmlns="http://www.w3.org/1999/xhtml">       <td xmlns="http://www.w3.org/1999/xhtml"  > </td>       </tr>   </table></foreignObject>',this.geometry=new Li(t),this.material=new $r(t),this.cullMode="none",this.depthWriteEnabled=!1,this._img=new Image,this.width=e,this.height=r,Zo(this,"padding",0),Zo(this,"background",""),Zo(this,"color","#000"),Zo(this,"fontFamily","Arial"),Zo(this,"fontSize",22),Zo(this,"fontWeight","normal"),Zo(this,"fontStyle","normal"),Zo(this,"lineHeight",33),Zo(this,"letterSpacing",0),Zo(this,"wordBreak","break-all"),Zo(this,"verticalAlign","middle"),Zo(this,"textAlign","center"),this._img.onload=e=>{let r,n;r=this._width,n=this._height,this._cvs.width=r,this._cvs.height=n,this._ctx.clearRect(0,0,r,n),this._ctx.drawImage(this._img,0,0,r,n),this.material.width=r,this.material.height=n,this._cvs.convertToBlob().then(e=>{new qn(t,URL.createObjectURL(e),{magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge",addressModeW:"repeat"},!0,t=>{this.material.diffuseTexture&&this.material.diffuseTexture.GPUTexture.destroy(),this.material.diffuseTexture=t})})}}addChild(t){}set material(t){t instanceof $r?(this._material=t,this.dirtyPipeline=!0):He.throwFunc(`addChild - only allow TextMaterial Instance. - inputValue : ${t} { type : ${typeof t} }`)}get material(){return this._material}get text(){return this._text}set text(t){Qo=this._svg,Ho=Qo.querySelector("foreignObject td"),t=t.toString(),this._text=t.replace(/\<br\>/gi,"<div/>");let e=this,r=this._text.match(/<img .*?>/g),n=[],i=this._text;r=r||[];let o=r.length,a=0;r.forEach((function(t){let r=t.match(/src\s*=\s*(\'|\").*?(\'|\")/g)[0];r=r.replace(/src\s*=\s*(\'|\")/g,"").replace(/(\'|\")/g,"");let s=document.createElement("div");s.innerHTML=t;let u=s.querySelector("img");u.onload=function(){let t=document.createElement("canvas");t.width=u.style.width?+u.style.width:u.width,t.height=u.style.height?+u.style.height:u.height;let r=t.getContext("2d");r.scale(t.width/u.naturalWidth,t.height/u.naturalHeight),r.drawImage(u,0,0),l.result='<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink= "http://www.w3.org/1999/xlink" width="'+u.width+'" height="'+u.height+'" display="inline" style="vertical-align: middle;display: inline-block"><image xlink:href="'+t.toDataURL("image/png")+'" height="'+u.height+'px" width="'+u.width+'px" /></svg>',a++,a==o&&(n.forEach((function(t){i=i.replace(t.source,t.result)})),Ho.innerHTML=i,na(e)),u.onload=null};let l={source:t,sourceSrc:r,result:""};n.push(l)})),0==r.length&&(Ho.innerHTML=i,na(this))}},Line:fa,Particle:Ai,PostEffect_BrightnessContrast:ca,PostEffect_Gray:ha,PostEffect_HueSaturation:pa,PostEffect_Invert:va,PostEffect_Threshold:ga,PostEffect_Bloom:Ia,PostEffect_Bloom_blend:wa,PostEffect_Blur:Na,PostEffect_BlurX:ya,PostEffect_BlurY:Sa,PostEffect_GaussianBlur:ba,PostEffect_ZoomBlur:Aa,PostEffect_DoF:ka,PostEffect_DoF_blend:Oa,PostEffect_HalfTone:Za,PostEffect_Pixelize:Ha,PostEffect:mn,PostEffect_Convolution:ja,PostEffect_Film:Ka,PostEffect_Vignetting:es,Box:Xo,Cylinder:Go,Plane:Li,Sphere:Po,Render:oo,Debugger:Ei,CopyBufferToTexture:$n,ImageLoader:zn,BitmapCubeTexture:Jn,BitmapTexture:qn,Sampler:jr,ShaderModule_GLSL:sr,TypeSize:$e,UTILColor:ke,UTILMath:Ze,UTIL:He,RedGPUContext:on,Scene:class extends sn{get grid(){return Oe(this,ls)}set grid(t){Ye(this,ls,t)}get axis(){return Oe(this,fs)}set axis(t){Ye(this,fs,t)}get skyBox(){return Oe(this,ms)}set skyBox(t){Ye(this,ms,t)}get backgroundColor(){return Oe(this,rs)}set backgroundColor(t){Ye(this,rs,t);let e=He.hexToRGB_ZeroToOne(t);Ye(this,is,[e[0]*Oe(this,ns),e[1]*Oe(this,ns),e[2]*Oe(this,ns),Oe(this,ns)])}get backgroundColorAlpha(){return Oe(this,ns)}set backgroundColorAlpha(t){Ye(this,ns,t);let e=He.hexToRGB_ZeroToOne(Oe(this,rs));Ye(this,is,[e[0]*Oe(this,ns),e[1]*Oe(this,ns),e[2]*Oe(this,ns),Oe(this,ns)])}get backgroundColorRGBA(){return Oe(this,is)}get directionalLightList(){return Oe(this,os)}get pointLightList(){return Oe(this,as)}get ambientLight(){return Oe(this,us)}get spotLightList(){return Oe(this,ss)}constructor(){super(),rs.set(this,{writable:!0,value:"#000"}),ns.set(this,{writable:!0,value:1}),is.set(this,{writable:!0,value:[0,0,0,Oe(this,ns)]}),os.set(this,{writable:!0,value:[]}),as.set(this,{writable:!0,value:[]}),ss.set(this,{writable:!0,value:[]}),us.set(this,{writable:!0,value:void 0}),ls.set(this,{writable:!0,value:void 0}),fs.set(this,{writable:!0,value:void 0}),ms.set(this,{writable:!0,value:void 0}),Ve(this,"_flatChildList",[])}addLight(t){switch(t.constructor){case Eo:Oe(this,os).length===Ke.MAX_DIRECTIONAL_LIGHT&&He.throwFunc(`addLight : DirectionalLight - Up to ${Ke.MAX_DIRECTIONAL_LIGHT} are allowed.`),Oe(this,os).push(t);break;case Lo:Oe(this,as).length===Ke.MAX_POINT_LIGHT&&He.throwFunc(`addLight : PointLight - Up to ${Ke.MAX_POINT_LIGHT} are allowed.`),Oe(this,as).push(t);break;case Do:He.throwFunc("addLight : spotLightList -아직사용할 수없는 유형의 라이트");break;case Mo:Ye(this,us,t);break;default:He.throwFunc(`addLight : only allow BaseLight Instance - inputValue : ${t} { type : ${typeof t} }`)}}removeLight(t){let e;switch(t.constructor){case Eo:e=Oe(this,os).indexOf(t),e>-1&&Oe(this,os).splice(e,1);break;case Lo:e=Oe(this,as).indexOf(t),e>-1&&Oe(this,as).splice(e,1);break;case Do:break;case Mo:Ye(this,us,null);break;default:He.throwFunc(`removeLight : only allow BaseLight Instance - inputValue : ${t} { type : ${typeof t} }`)}}removeLightAll(){Oe(this,os).length=0,Oe(this,as).length=0,Oe(this,ss).length=0,Ye(this,us,null)}},View:Cn};export default RedGPU;
