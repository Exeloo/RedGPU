var t=1e-6,e="undefined"!=typeof Float32Array?Float32Array:Array,r=Math.random,n=Math.PI/180;Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});var i=Object.freeze({EPSILON:t,get ARRAY_TYPE(){return e},RANDOM:r,setMatrixArrayType:function(t){e=t},toRadian:function(t){return t*n},equals:function(e,r){return Math.abs(e-r)<=t*Math.max(1,Math.abs(e),Math.abs(r))}});function o(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=r[0],u=r[1],l=r[2],f=r[3];return t[0]=n*s+o*u,t[1]=i*s+a*u,t[2]=n*l+o*f,t[3]=i*l+a*f,t}function a(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t}var s=o,u=a,l=Object.freeze({create:function(){var t=new e(4);return e!=Float32Array&&(t[1]=0,t[2]=0),t[0]=1,t[3]=1,t},clone:function(t){var r=new e(4);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},identity:function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t},fromValues:function(t,r,n,i){var o=new e(4);return o[0]=t,o[1]=r,o[2]=n,o[3]=i,o},set:function(t,e,r,n,i){return t[0]=e,t[1]=r,t[2]=n,t[3]=i,t},transpose:function(t,e){if(t===e){var r=e[1];t[1]=e[2],t[2]=r}else t[0]=e[0],t[1]=e[2],t[2]=e[1],t[3]=e[3];return t},invert:function(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=r*o-i*n;return a?(a=1/a,t[0]=o*a,t[1]=-n*a,t[2]=-i*a,t[3]=r*a,t):null},adjoint:function(t,e){var r=e[0];return t[0]=e[3],t[1]=-e[1],t[2]=-e[2],t[3]=r,t},determinant:function(t){return t[0]*t[3]-t[2]*t[1]},multiply:o,rotate:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=Math.sin(r),u=Math.cos(r);return t[0]=n*u+o*s,t[1]=i*u+a*s,t[2]=n*-s+o*u,t[3]=i*-s+a*u,t},scale:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=r[0],u=r[1];return t[0]=n*s,t[1]=i*s,t[2]=o*u,t[3]=a*u,t},fromRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=r,t[2]=-r,t[3]=n,t},fromScaling:function(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=e[1],t},str:function(t){return"mat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"},frob:function(t){return Math.hypot(t[0],t[1],t[2],t[3])},LDU:function(t,e,r,n){return t[2]=n[2]/n[0],r[0]=n[0],r[1]=n[1],r[3]=n[3]-t[2]*r[1],[t,e,r]},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t},subtract:a,exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]},equals:function(e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=r[0],u=r[1],l=r[2],f=r[3];return Math.abs(n-s)<=t*Math.max(1,Math.abs(n),Math.abs(s))&&Math.abs(i-u)<=t*Math.max(1,Math.abs(i),Math.abs(u))&&Math.abs(o-l)<=t*Math.max(1,Math.abs(o),Math.abs(l))&&Math.abs(a-f)<=t*Math.max(1,Math.abs(a),Math.abs(f))},multiplyScalar:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t},multiplyScalarAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t},mul:s,sub:u});function f(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=r[0],f=r[1],m=r[2],c=r[3],h=r[4],d=r[5];return t[0]=n*l+o*f,t[1]=i*l+a*f,t[2]=n*m+o*c,t[3]=i*m+a*c,t[4]=n*h+o*d+s,t[5]=i*h+a*d+u,t}function m(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t[4]=e[4]-r[4],t[5]=e[5]-r[5],t}var c=f,h=m,d=Object.freeze({create:function(){var t=new e(6);return e!=Float32Array&&(t[1]=0,t[2]=0,t[4]=0,t[5]=0),t[0]=1,t[3]=1,t},clone:function(t){var r=new e(6);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[4]=t[4],r[5]=t[5],r},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t},identity:function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t},fromValues:function(t,r,n,i,o,a){var s=new e(6);return s[0]=t,s[1]=r,s[2]=n,s[3]=i,s[4]=o,s[5]=a,s},set:function(t,e,r,n,i,o,a){return t[0]=e,t[1]=r,t[2]=n,t[3]=i,t[4]=o,t[5]=a,t},invert:function(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=r*o-n*i;return u?(u=1/u,t[0]=o*u,t[1]=-n*u,t[2]=-i*u,t[3]=r*u,t[4]=(i*s-o*a)*u,t[5]=(n*a-r*s)*u,t):null},determinant:function(t){return t[0]*t[3]-t[1]*t[2]},multiply:f,rotate:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=Math.sin(r),f=Math.cos(r);return t[0]=n*f+o*l,t[1]=i*f+a*l,t[2]=n*-l+o*f,t[3]=i*-l+a*f,t[4]=s,t[5]=u,t},scale:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=r[0],f=r[1];return t[0]=n*l,t[1]=i*l,t[2]=o*f,t[3]=a*f,t[4]=s,t[5]=u,t},translate:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=r[0],f=r[1];return t[0]=n,t[1]=i,t[2]=o,t[3]=a,t[4]=n*l+o*f+s,t[5]=i*l+a*f+u,t},fromRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=r,t[2]=-r,t[3]=n,t[4]=0,t[5]=0,t},fromScaling:function(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=e[1],t[4]=0,t[5]=0,t},fromTranslation:function(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=e[0],t[5]=e[1],t},str:function(t){return"mat2d("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+")"},frob:function(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],1)},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t},subtract:m,multiplyScalar:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t},multiplyScalarAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t[4]=e[4]+r[4]*n,t[5]=e[5]+r[5]*n,t},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]},equals:function(e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=r[0],f=r[1],m=r[2],c=r[3],h=r[4],d=r[5];return Math.abs(n-l)<=t*Math.max(1,Math.abs(n),Math.abs(l))&&Math.abs(i-f)<=t*Math.max(1,Math.abs(i),Math.abs(f))&&Math.abs(o-m)<=t*Math.max(1,Math.abs(o),Math.abs(m))&&Math.abs(a-c)<=t*Math.max(1,Math.abs(a),Math.abs(c))&&Math.abs(s-h)<=t*Math.max(1,Math.abs(s),Math.abs(h))&&Math.abs(u-d)<=t*Math.max(1,Math.abs(u),Math.abs(d))},mul:c,sub:h});function p(){var t=new e(9);return e!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[5]=0,t[6]=0,t[7]=0),t[0]=1,t[4]=1,t[8]=1,t}function v(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=e[8],c=r[0],h=r[1],d=r[2],p=r[3],v=r[4],g=r[5],_=r[6],x=r[7],y=r[8];return t[0]=c*n+h*a+d*l,t[1]=c*i+h*s+d*f,t[2]=c*o+h*u+d*m,t[3]=p*n+v*a+g*l,t[4]=p*i+v*s+g*f,t[5]=p*o+v*u+g*m,t[6]=_*n+x*a+y*l,t[7]=_*i+x*s+y*f,t[8]=_*o+x*u+y*m,t}function g(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t[4]=e[4]-r[4],t[5]=e[5]-r[5],t[6]=e[6]-r[6],t[7]=e[7]-r[7],t[8]=e[8]-r[8],t}var _=v,x=g,y=Object.freeze({create:p,fromMat4:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t},clone:function(t){var r=new e(9);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[4]=t[4],r[5]=t[5],r[6]=t[6],r[7]=t[7],r[8]=t[8],r},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t},fromValues:function(t,r,n,i,o,a,s,u,l){var f=new e(9);return f[0]=t,f[1]=r,f[2]=n,f[3]=i,f[4]=o,f[5]=a,f[6]=s,f[7]=u,f[8]=l,f},set:function(t,e,r,n,i,o,a,s,u,l){return t[0]=e,t[1]=r,t[2]=n,t[3]=i,t[4]=o,t[5]=a,t[6]=s,t[7]=u,t[8]=l,t},identity:function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},transpose:function(t,e){if(t===e){var r=e[1],n=e[2],i=e[5];t[1]=e[3],t[2]=e[6],t[3]=r,t[5]=e[7],t[6]=n,t[7]=i}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t},invert:function(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=e[6],l=e[7],f=e[8],m=f*a-s*l,c=-f*o+s*u,h=l*o-a*u,d=r*m+n*c+i*h;return d?(d=1/d,t[0]=m*d,t[1]=(-f*n+i*l)*d,t[2]=(s*n-i*a)*d,t[3]=c*d,t[4]=(f*r-i*u)*d,t[5]=(-s*r+i*o)*d,t[6]=h*d,t[7]=(-l*r+n*u)*d,t[8]=(a*r-n*o)*d,t):null},adjoint:function(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=e[6],l=e[7],f=e[8];return t[0]=a*f-s*l,t[1]=i*l-n*f,t[2]=n*s-i*a,t[3]=s*u-o*f,t[4]=r*f-i*u,t[5]=i*o-r*s,t[6]=o*l-a*u,t[7]=n*u-r*l,t[8]=r*a-n*o,t},determinant:function(t){var e=t[0],r=t[1],n=t[2],i=t[3],o=t[4],a=t[5],s=t[6],u=t[7],l=t[8];return e*(l*o-a*u)+r*(-l*i+a*s)+n*(u*i-o*s)},multiply:v,translate:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=e[8],c=r[0],h=r[1];return t[0]=n,t[1]=i,t[2]=o,t[3]=a,t[4]=s,t[5]=u,t[6]=c*n+h*a+l,t[7]=c*i+h*s+f,t[8]=c*o+h*u+m,t},rotate:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=e[8],c=Math.sin(r),h=Math.cos(r);return t[0]=h*n+c*a,t[1]=h*i+c*s,t[2]=h*o+c*u,t[3]=h*a-c*n,t[4]=h*s-c*i,t[5]=h*u-c*o,t[6]=l,t[7]=f,t[8]=m,t},scale:function(t,e,r){var n=r[0],i=r[1];return t[0]=n*e[0],t[1]=n*e[1],t[2]=n*e[2],t[3]=i*e[3],t[4]=i*e[4],t[5]=i*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t},fromTranslation:function(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=e[0],t[7]=e[1],t[8]=1,t},fromRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=r,t[2]=0,t[3]=-r,t[4]=n,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},fromScaling:function(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=e[1],t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},fromMat2d:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=0,t[3]=e[2],t[4]=e[3],t[5]=0,t[6]=e[4],t[7]=e[5],t[8]=1,t},fromQuat:function(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=r+r,s=n+n,u=i+i,l=r*a,f=n*a,m=n*s,c=i*a,h=i*s,d=i*u,p=o*a,v=o*s,g=o*u;return t[0]=1-m-d,t[3]=f-g,t[6]=c+v,t[1]=f+g,t[4]=1-l-d,t[7]=h-p,t[2]=c-v,t[5]=h+p,t[8]=1-l-m,t},normalFromMat4:function(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=e[6],l=e[7],f=e[8],m=e[9],c=e[10],h=e[11],d=e[12],p=e[13],v=e[14],g=e[15],_=r*s-n*a,x=r*u-i*a,y=r*l-o*a,T=n*u-i*s,U=n*l-o*s,S=i*l-o*u,M=f*p-m*d,b=f*v-c*d,P=f*g-h*d,w=m*v-c*p,G=m*g-h*p,E=c*g-h*v,B=_*E-x*G+y*w+T*P-U*b+S*M;return B?(B=1/B,t[0]=(s*E-u*G+l*w)*B,t[1]=(u*P-a*E-l*b)*B,t[2]=(a*G-s*P+l*M)*B,t[3]=(i*G-n*E-o*w)*B,t[4]=(r*E-i*P+o*b)*B,t[5]=(n*P-r*G-o*M)*B,t[6]=(p*S-v*U+g*T)*B,t[7]=(v*y-d*S-g*x)*B,t[8]=(d*U-p*y+g*_)*B,t):null},projection:function(t,e,r){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/r,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t},str:function(t){return"mat3("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+")"},frob:function(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t[6]=e[6]+r[6],t[7]=e[7]+r[7],t[8]=e[8]+r[8],t},subtract:g,multiplyScalar:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*r,t},multiplyScalarAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t[4]=e[4]+r[4]*n,t[5]=e[5]+r[5]*n,t[6]=e[6]+r[6]*n,t[7]=e[7]+r[7]*n,t[8]=e[8]+r[8]*n,t},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]},equals:function(e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=e[8],c=r[0],h=r[1],d=r[2],p=r[3],v=r[4],g=r[5],_=r[6],x=r[7],y=r[8];return Math.abs(n-c)<=t*Math.max(1,Math.abs(n),Math.abs(c))&&Math.abs(i-h)<=t*Math.max(1,Math.abs(i),Math.abs(h))&&Math.abs(o-d)<=t*Math.max(1,Math.abs(o),Math.abs(d))&&Math.abs(a-p)<=t*Math.max(1,Math.abs(a),Math.abs(p))&&Math.abs(s-v)<=t*Math.max(1,Math.abs(s),Math.abs(v))&&Math.abs(u-g)<=t*Math.max(1,Math.abs(u),Math.abs(g))&&Math.abs(l-_)<=t*Math.max(1,Math.abs(l),Math.abs(_))&&Math.abs(f-x)<=t*Math.max(1,Math.abs(f),Math.abs(x))&&Math.abs(m-y)<=t*Math.max(1,Math.abs(m),Math.abs(y))},mul:_,sub:x});function T(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function U(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=e[8],c=e[9],h=e[10],d=e[11],p=e[12],v=e[13],g=e[14],_=e[15],x=r[0],y=r[1],T=r[2],U=r[3];return t[0]=x*n+y*s+T*m+U*p,t[1]=x*i+y*u+T*c+U*v,t[2]=x*o+y*l+T*h+U*g,t[3]=x*a+y*f+T*d+U*_,x=r[4],y=r[5],T=r[6],U=r[7],t[4]=x*n+y*s+T*m+U*p,t[5]=x*i+y*u+T*c+U*v,t[6]=x*o+y*l+T*h+U*g,t[7]=x*a+y*f+T*d+U*_,x=r[8],y=r[9],T=r[10],U=r[11],t[8]=x*n+y*s+T*m+U*p,t[9]=x*i+y*u+T*c+U*v,t[10]=x*o+y*l+T*h+U*g,t[11]=x*a+y*f+T*d+U*_,x=r[12],y=r[13],T=r[14],U=r[15],t[12]=x*n+y*s+T*m+U*p,t[13]=x*i+y*u+T*c+U*v,t[14]=x*o+y*l+T*h+U*g,t[15]=x*a+y*f+T*d+U*_,t}function S(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=n+n,u=i+i,l=o+o,f=n*s,m=n*u,c=n*l,h=i*u,d=i*l,p=o*l,v=a*s,g=a*u,_=a*l;return t[0]=1-(h+p),t[1]=m+_,t[2]=c-g,t[3]=0,t[4]=m-_,t[5]=1-(f+p),t[6]=d+v,t[7]=0,t[8]=c+g,t[9]=d-v,t[10]=1-(f+h),t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function M(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function b(t,e){var r=e[0],n=e[1],i=e[2],o=e[4],a=e[5],s=e[6],u=e[8],l=e[9],f=e[10];return t[0]=Math.hypot(r,n,i),t[1]=Math.hypot(o,a,s),t[2]=Math.hypot(u,l,f),t}function P(t,r){var n=new e(3);b(n,r);var i=1/n[0],o=1/n[1],a=1/n[2],s=r[0]*i,u=r[1]*o,l=r[2]*a,f=r[4]*i,m=r[5]*o,c=r[6]*a,h=r[8]*i,d=r[9]*o,p=r[10]*a,v=s+m+p,g=0;return v>0?(g=2*Math.sqrt(v+1),t[3]=.25*g,t[0]=(c-d)/g,t[1]=(h-l)/g,t[2]=(u-f)/g):s>m&&s>p?(g=2*Math.sqrt(1+s-m-p),t[3]=(c-d)/g,t[0]=.25*g,t[1]=(u+f)/g,t[2]=(h+l)/g):m>p?(g=2*Math.sqrt(1+m-s-p),t[3]=(h-l)/g,t[0]=(u+f)/g,t[1]=.25*g,t[2]=(c+d)/g):(g=2*Math.sqrt(1+p-s-m),t[3]=(u-f)/g,t[0]=(h+l)/g,t[1]=(c+d)/g,t[2]=.25*g),t}function w(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t[4]=e[4]-r[4],t[5]=e[5]-r[5],t[6]=e[6]-r[6],t[7]=e[7]-r[7],t[8]=e[8]-r[8],t[9]=e[9]-r[9],t[10]=e[10]-r[10],t[11]=e[11]-r[11],t[12]=e[12]-r[12],t[13]=e[13]-r[13],t[14]=e[14]-r[14],t[15]=e[15]-r[15],t}var G=U,E=w,B=Object.freeze({create:function(){var t=new e(16);return e!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t},clone:function(t){var r=new e(16);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[4]=t[4],r[5]=t[5],r[6]=t[6],r[7]=t[7],r[8]=t[8],r[9]=t[9],r[10]=t[10],r[11]=t[11],r[12]=t[12],r[13]=t[13],r[14]=t[14],r[15]=t[15],r},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t},fromValues:function(t,r,n,i,o,a,s,u,l,f,m,c,h,d,p,v){var g=new e(16);return g[0]=t,g[1]=r,g[2]=n,g[3]=i,g[4]=o,g[5]=a,g[6]=s,g[7]=u,g[8]=l,g[9]=f,g[10]=m,g[11]=c,g[12]=h,g[13]=d,g[14]=p,g[15]=v,g},set:function(t,e,r,n,i,o,a,s,u,l,f,m,c,h,d,p,v){return t[0]=e,t[1]=r,t[2]=n,t[3]=i,t[4]=o,t[5]=a,t[6]=s,t[7]=u,t[8]=l,t[9]=f,t[10]=m,t[11]=c,t[12]=h,t[13]=d,t[14]=p,t[15]=v,t},identity:T,transpose:function(t,e){if(t===e){var r=e[1],n=e[2],i=e[3],o=e[6],a=e[7],s=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=r,t[6]=e[9],t[7]=e[13],t[8]=n,t[9]=o,t[11]=e[14],t[12]=i,t[13]=a,t[14]=s}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t},invert:function(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=e[6],l=e[7],f=e[8],m=e[9],c=e[10],h=e[11],d=e[12],p=e[13],v=e[14],g=e[15],_=r*s-n*a,x=r*u-i*a,y=r*l-o*a,T=n*u-i*s,U=n*l-o*s,S=i*l-o*u,M=f*p-m*d,b=f*v-c*d,P=f*g-h*d,w=m*v-c*p,G=m*g-h*p,E=c*g-h*v,B=_*E-x*G+y*w+T*P-U*b+S*M;return B?(B=1/B,t[0]=(s*E-u*G+l*w)*B,t[1]=(i*G-n*E-o*w)*B,t[2]=(p*S-v*U+g*T)*B,t[3]=(c*U-m*S-h*T)*B,t[4]=(u*P-a*E-l*b)*B,t[5]=(r*E-i*P+o*b)*B,t[6]=(v*y-d*S-g*x)*B,t[7]=(f*S-c*y+h*x)*B,t[8]=(a*G-s*P+l*M)*B,t[9]=(n*P-r*G-o*M)*B,t[10]=(d*U-p*y+g*_)*B,t[11]=(m*y-f*U-h*_)*B,t[12]=(s*b-a*w-u*M)*B,t[13]=(r*w-n*b+i*M)*B,t[14]=(p*x-d*T-v*_)*B,t[15]=(f*T-m*x+c*_)*B,t):null},adjoint:function(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=e[4],s=e[5],u=e[6],l=e[7],f=e[8],m=e[9],c=e[10],h=e[11],d=e[12],p=e[13],v=e[14],g=e[15];return t[0]=s*(c*g-h*v)-m*(u*g-l*v)+p*(u*h-l*c),t[1]=-(n*(c*g-h*v)-m*(i*g-o*v)+p*(i*h-o*c)),t[2]=n*(u*g-l*v)-s*(i*g-o*v)+p*(i*l-o*u),t[3]=-(n*(u*h-l*c)-s*(i*h-o*c)+m*(i*l-o*u)),t[4]=-(a*(c*g-h*v)-f*(u*g-l*v)+d*(u*h-l*c)),t[5]=r*(c*g-h*v)-f*(i*g-o*v)+d*(i*h-o*c),t[6]=-(r*(u*g-l*v)-a*(i*g-o*v)+d*(i*l-o*u)),t[7]=r*(u*h-l*c)-a*(i*h-o*c)+f*(i*l-o*u),t[8]=a*(m*g-h*p)-f*(s*g-l*p)+d*(s*h-l*m),t[9]=-(r*(m*g-h*p)-f*(n*g-o*p)+d*(n*h-o*m)),t[10]=r*(s*g-l*p)-a*(n*g-o*p)+d*(n*l-o*s),t[11]=-(r*(s*h-l*m)-a*(n*h-o*m)+f*(n*l-o*s)),t[12]=-(a*(m*v-c*p)-f*(s*v-u*p)+d*(s*c-u*m)),t[13]=r*(m*v-c*p)-f*(n*v-i*p)+d*(n*c-i*m),t[14]=-(r*(s*v-u*p)-a*(n*v-i*p)+d*(n*u-i*s)),t[15]=r*(s*c-u*m)-a*(n*c-i*m)+f*(n*u-i*s),t},determinant:function(t){var e=t[0],r=t[1],n=t[2],i=t[3],o=t[4],a=t[5],s=t[6],u=t[7],l=t[8],f=t[9],m=t[10],c=t[11],h=t[12],d=t[13],p=t[14],v=t[15];return(e*a-r*o)*(m*v-c*p)-(e*s-n*o)*(f*v-c*d)+(e*u-i*o)*(f*p-m*d)+(r*s-n*a)*(l*v-c*h)-(r*u-i*a)*(l*p-m*h)+(n*u-i*s)*(l*d-f*h)},multiply:U,translate:function(t,e,r){var n,i,o,a,s,u,l,f,m,c,h,d,p=r[0],v=r[1],g=r[2];return e===t?(t[12]=e[0]*p+e[4]*v+e[8]*g+e[12],t[13]=e[1]*p+e[5]*v+e[9]*g+e[13],t[14]=e[2]*p+e[6]*v+e[10]*g+e[14],t[15]=e[3]*p+e[7]*v+e[11]*g+e[15]):(n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=e[8],c=e[9],h=e[10],d=e[11],t[0]=n,t[1]=i,t[2]=o,t[3]=a,t[4]=s,t[5]=u,t[6]=l,t[7]=f,t[8]=m,t[9]=c,t[10]=h,t[11]=d,t[12]=n*p+s*v+m*g+e[12],t[13]=i*p+u*v+c*g+e[13],t[14]=o*p+l*v+h*g+e[14],t[15]=a*p+f*v+d*g+e[15]),t},scale:function(t,e,r){var n=r[0],i=r[1],o=r[2];return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*o,t[9]=e[9]*o,t[10]=e[10]*o,t[11]=e[11]*o,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t},rotate:function(e,r,n,i){var o,a,s,u,l,f,m,c,h,d,p,v,g,_,x,y,T,U,S,M,b,P,w,G,E=i[0],B=i[1],C=i[2],L=Math.hypot(E,B,C);return L<t?null:(E*=L=1/L,B*=L,C*=L,o=Math.sin(n),s=1-(a=Math.cos(n)),u=r[0],l=r[1],f=r[2],m=r[3],c=r[4],h=r[5],d=r[6],p=r[7],v=r[8],g=r[9],_=r[10],x=r[11],y=E*E*s+a,T=B*E*s+C*o,U=C*E*s-B*o,S=E*B*s-C*o,M=B*B*s+a,b=C*B*s+E*o,P=E*C*s+B*o,w=B*C*s-E*o,G=C*C*s+a,e[0]=u*y+c*T+v*U,e[1]=l*y+h*T+g*U,e[2]=f*y+d*T+_*U,e[3]=m*y+p*T+x*U,e[4]=u*S+c*M+v*b,e[5]=l*S+h*M+g*b,e[6]=f*S+d*M+_*b,e[7]=m*S+p*M+x*b,e[8]=u*P+c*w+v*G,e[9]=l*P+h*w+g*G,e[10]=f*P+d*w+_*G,e[11]=m*P+p*w+x*G,r!==e&&(e[12]=r[12],e[13]=r[13],e[14]=r[14],e[15]=r[15]),e)},rotateX:function(t,e,r){var n=Math.sin(r),i=Math.cos(r),o=e[4],a=e[5],s=e[6],u=e[7],l=e[8],f=e[9],m=e[10],c=e[11];return e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=o*i+l*n,t[5]=a*i+f*n,t[6]=s*i+m*n,t[7]=u*i+c*n,t[8]=l*i-o*n,t[9]=f*i-a*n,t[10]=m*i-s*n,t[11]=c*i-u*n,t},rotateY:function(t,e,r){var n=Math.sin(r),i=Math.cos(r),o=e[0],a=e[1],s=e[2],u=e[3],l=e[8],f=e[9],m=e[10],c=e[11];return e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=o*i-l*n,t[1]=a*i-f*n,t[2]=s*i-m*n,t[3]=u*i-c*n,t[8]=o*n+l*i,t[9]=a*n+f*i,t[10]=s*n+m*i,t[11]=u*n+c*i,t},rotateZ:function(t,e,r){var n=Math.sin(r),i=Math.cos(r),o=e[0],a=e[1],s=e[2],u=e[3],l=e[4],f=e[5],m=e[6],c=e[7];return e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=o*i+l*n,t[1]=a*i+f*n,t[2]=s*i+m*n,t[3]=u*i+c*n,t[4]=l*i-o*n,t[5]=f*i-a*n,t[6]=m*i-s*n,t[7]=c*i-u*n,t},fromTranslation:function(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t},fromScaling:function(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromRotation:function(e,r,n){var i,o,a,s=n[0],u=n[1],l=n[2],f=Math.hypot(s,u,l);return f<t?null:(s*=f=1/f,u*=f,l*=f,i=Math.sin(r),a=1-(o=Math.cos(r)),e[0]=s*s*a+o,e[1]=u*s*a+l*i,e[2]=l*s*a-u*i,e[3]=0,e[4]=s*u*a-l*i,e[5]=u*u*a+o,e[6]=l*u*a+s*i,e[7]=0,e[8]=s*l*a+u*i,e[9]=u*l*a-s*i,e[10]=l*l*a+o,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e)},fromXRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromYRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromZRotation:function(t,e){var r=Math.sin(e),n=Math.cos(e);return t[0]=n,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromRotationTranslation:S,fromQuat2:function(t,r){var n=new e(3),i=-r[0],o=-r[1],a=-r[2],s=r[3],u=r[4],l=r[5],f=r[6],m=r[7],c=i*i+o*o+a*a+s*s;return c>0?(n[0]=2*(u*s+m*i+l*a-f*o)/c,n[1]=2*(l*s+m*o+f*i-u*a)/c,n[2]=2*(f*s+m*a+u*o-l*i)/c):(n[0]=2*(u*s+m*i+l*a-f*o),n[1]=2*(l*s+m*o+f*i-u*a),n[2]=2*(f*s+m*a+u*o-l*i)),S(t,r,n),t},getTranslation:M,getScaling:b,getRotation:P,fromRotationTranslationScale:function(t,e,r,n){var i=e[0],o=e[1],a=e[2],s=e[3],u=i+i,l=o+o,f=a+a,m=i*u,c=i*l,h=i*f,d=o*l,p=o*f,v=a*f,g=s*u,_=s*l,x=s*f,y=n[0],T=n[1],U=n[2];return t[0]=(1-(d+v))*y,t[1]=(c+x)*y,t[2]=(h-_)*y,t[3]=0,t[4]=(c-x)*T,t[5]=(1-(m+v))*T,t[6]=(p+g)*T,t[7]=0,t[8]=(h+_)*U,t[9]=(p-g)*U,t[10]=(1-(m+d))*U,t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t},fromRotationTranslationScaleOrigin:function(t,e,r,n,i){var o=e[0],a=e[1],s=e[2],u=e[3],l=o+o,f=a+a,m=s+s,c=o*l,h=o*f,d=o*m,p=a*f,v=a*m,g=s*m,_=u*l,x=u*f,y=u*m,T=n[0],U=n[1],S=n[2],M=i[0],b=i[1],P=i[2],w=(1-(p+g))*T,G=(h+y)*T,E=(d-x)*T,B=(h-y)*U,C=(1-(c+g))*U,L=(v+_)*U,R=(d+x)*S,D=(v-_)*S,I=(1-(c+p))*S;return t[0]=w,t[1]=G,t[2]=E,t[3]=0,t[4]=B,t[5]=C,t[6]=L,t[7]=0,t[8]=R,t[9]=D,t[10]=I,t[11]=0,t[12]=r[0]+M-(w*M+B*b+R*P),t[13]=r[1]+b-(G*M+C*b+D*P),t[14]=r[2]+P-(E*M+L*b+I*P),t[15]=1,t},fromQuat:function(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=r+r,s=n+n,u=i+i,l=r*a,f=n*a,m=n*s,c=i*a,h=i*s,d=i*u,p=o*a,v=o*s,g=o*u;return t[0]=1-m-d,t[1]=f+g,t[2]=c-v,t[3]=0,t[4]=f-g,t[5]=1-l-d,t[6]=h+p,t[7]=0,t[8]=c+v,t[9]=h-p,t[10]=1-l-m,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},frustum:function(t,e,r,n,i,o,a){var s=1/(r-e),u=1/(i-n),l=1/(o-a);return t[0]=2*o*s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*o*u,t[6]=0,t[7]=0,t[8]=(r+e)*s,t[9]=(i+n)*u,t[10]=(a+o)*l,t[11]=-1,t[12]=0,t[13]=0,t[14]=a*o*2*l,t[15]=0,t},perspective:function(t,e,r,n,i){var o,a=1/Math.tan(e/2);return t[0]=a/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=a,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=i&&i!==1/0?(o=1/(n-i),t[10]=(i+n)*o,t[14]=2*i*n*o):(t[10]=-1,t[14]=-2*n),t},perspectiveFromFieldOfView:function(t,e,r,n){var i=Math.tan(e.upDegrees*Math.PI/180),o=Math.tan(e.downDegrees*Math.PI/180),a=Math.tan(e.leftDegrees*Math.PI/180),s=Math.tan(e.rightDegrees*Math.PI/180),u=2/(a+s),l=2/(i+o);return t[0]=u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=l,t[6]=0,t[7]=0,t[8]=-(a-s)*u*.5,t[9]=(i-o)*l*.5,t[10]=n/(r-n),t[11]=-1,t[12]=0,t[13]=0,t[14]=n*r/(r-n),t[15]=0,t},ortho:function(t,e,r,n,i,o,a){var s=1/(e-r),u=1/(n-i),l=1/(o-a);return t[0]=-2*s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*u,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*l,t[11]=0,t[12]=(e+r)*s,t[13]=(i+n)*u,t[14]=(a+o)*l,t[15]=1,t},lookAt:function(e,r,n,i){var o,a,s,u,l,f,m,c,h,d,p=r[0],v=r[1],g=r[2],_=i[0],x=i[1],y=i[2],U=n[0],S=n[1],M=n[2];return Math.abs(p-U)<t&&Math.abs(v-S)<t&&Math.abs(g-M)<t?T(e):(m=p-U,c=v-S,h=g-M,o=x*(h*=d=1/Math.hypot(m,c,h))-y*(c*=d),a=y*(m*=d)-_*h,s=_*c-x*m,(d=Math.hypot(o,a,s))?(o*=d=1/d,a*=d,s*=d):(o=0,a=0,s=0),u=c*s-h*a,l=h*o-m*s,f=m*a-c*o,(d=Math.hypot(u,l,f))?(u*=d=1/d,l*=d,f*=d):(u=0,l=0,f=0),e[0]=o,e[1]=u,e[2]=m,e[3]=0,e[4]=a,e[5]=l,e[6]=c,e[7]=0,e[8]=s,e[9]=f,e[10]=h,e[11]=0,e[12]=-(o*p+a*v+s*g),e[13]=-(u*p+l*v+f*g),e[14]=-(m*p+c*v+h*g),e[15]=1,e)},targetTo:function(t,e,r,n){var i=e[0],o=e[1],a=e[2],s=n[0],u=n[1],l=n[2],f=i-r[0],m=o-r[1],c=a-r[2],h=f*f+m*m+c*c;h>0&&(f*=h=1/Math.sqrt(h),m*=h,c*=h);var d=u*c-l*m,p=l*f-s*c,v=s*m-u*f;return(h=d*d+p*p+v*v)>0&&(d*=h=1/Math.sqrt(h),p*=h,v*=h),t[0]=d,t[1]=p,t[2]=v,t[3]=0,t[4]=m*v-c*p,t[5]=c*d-f*v,t[6]=f*p-m*d,t[7]=0,t[8]=f,t[9]=m,t[10]=c,t[11]=0,t[12]=i,t[13]=o,t[14]=a,t[15]=1,t},str:function(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"},frob:function(t){return Math.hypot(t[0],t[1],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t[6]=e[6]+r[6],t[7]=e[7]+r[7],t[8]=e[8]+r[8],t[9]=e[9]+r[9],t[10]=e[10]+r[10],t[11]=e[11]+r[11],t[12]=e[12]+r[12],t[13]=e[13]+r[13],t[14]=e[14]+r[14],t[15]=e[15]+r[15],t},subtract:w,multiplyScalar:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t[8]=e[8]*r,t[9]=e[9]*r,t[10]=e[10]*r,t[11]=e[11]*r,t[12]=e[12]*r,t[13]=e[13]*r,t[14]=e[14]*r,t[15]=e[15]*r,t},multiplyScalarAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t[4]=e[4]+r[4]*n,t[5]=e[5]+r[5]*n,t[6]=e[6]+r[6]*n,t[7]=e[7]+r[7]*n,t[8]=e[8]+r[8]*n,t[9]=e[9]+r[9]*n,t[10]=e[10]+r[10]*n,t[11]=e[11]+r[11]*n,t[12]=e[12]+r[12]*n,t[13]=e[13]+r[13]*n,t[14]=e[14]+r[14]*n,t[15]=e[15]+r[15]*n,t},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]},equals:function(e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=e[8],c=e[9],h=e[10],d=e[11],p=e[12],v=e[13],g=e[14],_=e[15],x=r[0],y=r[1],T=r[2],U=r[3],S=r[4],M=r[5],b=r[6],P=r[7],w=r[8],G=r[9],E=r[10],B=r[11],C=r[12],L=r[13],R=r[14],D=r[15];return Math.abs(n-x)<=t*Math.max(1,Math.abs(n),Math.abs(x))&&Math.abs(i-y)<=t*Math.max(1,Math.abs(i),Math.abs(y))&&Math.abs(o-T)<=t*Math.max(1,Math.abs(o),Math.abs(T))&&Math.abs(a-U)<=t*Math.max(1,Math.abs(a),Math.abs(U))&&Math.abs(s-S)<=t*Math.max(1,Math.abs(s),Math.abs(S))&&Math.abs(u-M)<=t*Math.max(1,Math.abs(u),Math.abs(M))&&Math.abs(l-b)<=t*Math.max(1,Math.abs(l),Math.abs(b))&&Math.abs(f-P)<=t*Math.max(1,Math.abs(f),Math.abs(P))&&Math.abs(m-w)<=t*Math.max(1,Math.abs(m),Math.abs(w))&&Math.abs(c-G)<=t*Math.max(1,Math.abs(c),Math.abs(G))&&Math.abs(h-E)<=t*Math.max(1,Math.abs(h),Math.abs(E))&&Math.abs(d-B)<=t*Math.max(1,Math.abs(d),Math.abs(B))&&Math.abs(p-C)<=t*Math.max(1,Math.abs(p),Math.abs(C))&&Math.abs(v-L)<=t*Math.max(1,Math.abs(v),Math.abs(L))&&Math.abs(g-R)<=t*Math.max(1,Math.abs(g),Math.abs(R))&&Math.abs(_-D)<=t*Math.max(1,Math.abs(_),Math.abs(D))},mul:G,sub:E});function C(){var t=new e(3);return e!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function L(t){var e=t[0],r=t[1],n=t[2];return Math.hypot(e,r,n)}function R(t,r,n){var i=new e(3);return i[0]=t,i[1]=r,i[2]=n,i}function D(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t}function I(t,e,r){return t[0]=e[0]*r[0],t[1]=e[1]*r[1],t[2]=e[2]*r[2],t}function N(t,e,r){return t[0]=e[0]/r[0],t[1]=e[1]/r[1],t[2]=e[2]/r[2],t}function A(t,e){var r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2];return Math.hypot(r,n,i)}function F(t,e){var r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2];return r*r+n*n+i*i}function V(t){var e=t[0],r=t[1],n=t[2];return e*e+r*r+n*n}function O(t,e){var r=e[0],n=e[1],i=e[2],o=r*r+n*n+i*i;return o>0&&(o=1/Math.sqrt(o)),t[0]=e[0]*o,t[1]=e[1]*o,t[2]=e[2]*o,t}function Y(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function X(t,e,r){var n=e[0],i=e[1],o=e[2],a=r[0],s=r[1],u=r[2];return t[0]=i*u-o*s,t[1]=o*a-n*u,t[2]=n*s-i*a,t}var z,$=D,k=I,q=N,W=A,Z=F,H=L,j=V,J=(z=C(),function(t,e,r,n,i,o){var a,s;for(e||(e=3),r||(r=0),s=n?Math.min(n*e+r,t.length):t.length,a=r;a<s;a+=e)z[0]=t[a],z[1]=t[a+1],z[2]=t[a+2],i(z,z,o),t[a]=z[0],t[a+1]=z[1],t[a+2]=z[2];return t}),Q=Object.freeze({create:C,clone:function(t){var r=new e(3);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r},length:L,fromValues:R,copy:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t},set:function(t,e,r,n){return t[0]=e,t[1]=r,t[2]=n,t},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t},subtract:D,multiply:I,divide:N,ceil:function(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t},floor:function(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t},min:function(t,e,r){return t[0]=Math.min(e[0],r[0]),t[1]=Math.min(e[1],r[1]),t[2]=Math.min(e[2],r[2]),t},max:function(t,e,r){return t[0]=Math.max(e[0],r[0]),t[1]=Math.max(e[1],r[1]),t[2]=Math.max(e[2],r[2]),t},round:function(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t},scale:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t},scaleAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t},distance:A,squaredDistance:F,squaredLength:V,negate:function(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t},inverse:function(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t},normalize:O,dot:Y,cross:X,lerp:function(t,e,r,n){var i=e[0],o=e[1],a=e[2];return t[0]=i+n*(r[0]-i),t[1]=o+n*(r[1]-o),t[2]=a+n*(r[2]-a),t},hermite:function(t,e,r,n,i,o){var a=o*o,s=a*(2*o-3)+1,u=a*(o-2)+o,l=a*(o-1),f=a*(3-2*o);return t[0]=e[0]*s+r[0]*u+n[0]*l+i[0]*f,t[1]=e[1]*s+r[1]*u+n[1]*l+i[1]*f,t[2]=e[2]*s+r[2]*u+n[2]*l+i[2]*f,t},bezier:function(t,e,r,n,i,o){var a=1-o,s=a*a,u=o*o,l=s*a,f=3*o*s,m=3*u*a,c=u*o;return t[0]=e[0]*l+r[0]*f+n[0]*m+i[0]*c,t[1]=e[1]*l+r[1]*f+n[1]*m+i[1]*c,t[2]=e[2]*l+r[2]*f+n[2]*m+i[2]*c,t},random:function(t,e){e=e||1;var n=2*r()*Math.PI,i=2*r()-1,o=Math.sqrt(1-i*i)*e;return t[0]=Math.cos(n)*o,t[1]=Math.sin(n)*o,t[2]=i*e,t},transformMat4:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=r[3]*n+r[7]*i+r[11]*o+r[15];return a=a||1,t[0]=(r[0]*n+r[4]*i+r[8]*o+r[12])/a,t[1]=(r[1]*n+r[5]*i+r[9]*o+r[13])/a,t[2]=(r[2]*n+r[6]*i+r[10]*o+r[14])/a,t},transformMat3:function(t,e,r){var n=e[0],i=e[1],o=e[2];return t[0]=n*r[0]+i*r[3]+o*r[6],t[1]=n*r[1]+i*r[4]+o*r[7],t[2]=n*r[2]+i*r[5]+o*r[8],t},transformQuat:function(t,e,r){var n=r[0],i=r[1],o=r[2],a=r[3],s=e[0],u=e[1],l=e[2],f=i*l-o*u,m=o*s-n*l,c=n*u-i*s,h=i*c-o*m,d=o*f-n*c,p=n*m-i*f,v=2*a;return f*=v,m*=v,c*=v,h*=2,d*=2,p*=2,t[0]=s+f+h,t[1]=u+m+d,t[2]=l+c+p,t},rotateX:function(t,e,r,n){var i=[],o=[];return i[0]=e[0]-r[0],i[1]=e[1]-r[1],i[2]=e[2]-r[2],o[0]=i[0],o[1]=i[1]*Math.cos(n)-i[2]*Math.sin(n),o[2]=i[1]*Math.sin(n)+i[2]*Math.cos(n),t[0]=o[0]+r[0],t[1]=o[1]+r[1],t[2]=o[2]+r[2],t},rotateY:function(t,e,r,n){var i=[],o=[];return i[0]=e[0]-r[0],i[1]=e[1]-r[1],i[2]=e[2]-r[2],o[0]=i[2]*Math.sin(n)+i[0]*Math.cos(n),o[1]=i[1],o[2]=i[2]*Math.cos(n)-i[0]*Math.sin(n),t[0]=o[0]+r[0],t[1]=o[1]+r[1],t[2]=o[2]+r[2],t},rotateZ:function(t,e,r,n){var i=[],o=[];return i[0]=e[0]-r[0],i[1]=e[1]-r[1],i[2]=e[2]-r[2],o[0]=i[0]*Math.cos(n)-i[1]*Math.sin(n),o[1]=i[0]*Math.sin(n)+i[1]*Math.cos(n),o[2]=i[2],t[0]=o[0]+r[0],t[1]=o[1]+r[1],t[2]=o[2]+r[2],t},angle:function(t,e){var r=R(t[0],t[1],t[2]),n=R(e[0],e[1],e[2]);O(r,r),O(n,n);var i=Y(r,n);return i>1?0:i<-1?Math.PI:Math.acos(i)},zero:function(t){return t[0]=0,t[1]=0,t[2]=0,t},str:function(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]},equals:function(e,r){var n=e[0],i=e[1],o=e[2],a=r[0],s=r[1],u=r[2];return Math.abs(n-a)<=t*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(i-s)<=t*Math.max(1,Math.abs(i),Math.abs(s))&&Math.abs(o-u)<=t*Math.max(1,Math.abs(o),Math.abs(u))},sub:$,mul:k,div:q,dist:W,sqrDist:Z,len:H,sqrLen:j,forEach:J});function K(){var t=new e(4);return e!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}function tt(t){var r=new e(4);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r}function et(t,r,n,i){var o=new e(4);return o[0]=t,o[1]=r,o[2]=n,o[3]=i,o}function rt(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function nt(t,e,r,n,i){return t[0]=e,t[1]=r,t[2]=n,t[3]=i,t}function it(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t}function ot(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t[2]=e[2]-r[2],t[3]=e[3]-r[3],t}function at(t,e,r){return t[0]=e[0]*r[0],t[1]=e[1]*r[1],t[2]=e[2]*r[2],t[3]=e[3]*r[3],t}function st(t,e,r){return t[0]=e[0]/r[0],t[1]=e[1]/r[1],t[2]=e[2]/r[2],t[3]=e[3]/r[3],t}function ut(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t}function lt(t,e){var r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2],o=e[3]-t[3];return Math.hypot(r,n,i,o)}function ft(t,e){var r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2],o=e[3]-t[3];return r*r+n*n+i*i+o*o}function mt(t){var e=t[0],r=t[1],n=t[2],i=t[3];return Math.hypot(e,r,n,i)}function ct(t){var e=t[0],r=t[1],n=t[2],i=t[3];return e*e+r*r+n*n+i*i}function ht(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=r*r+n*n+i*i+o*o;return a>0&&(a=1/Math.sqrt(a)),t[0]=r*a,t[1]=n*a,t[2]=i*a,t[3]=o*a,t}function dt(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function pt(t,e,r,n){var i=e[0],o=e[1],a=e[2],s=e[3];return t[0]=i+n*(r[0]-i),t[1]=o+n*(r[1]-o),t[2]=a+n*(r[2]-a),t[3]=s+n*(r[3]-s),t}function vt(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]}function gt(e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=r[0],u=r[1],l=r[2],f=r[3];return Math.abs(n-s)<=t*Math.max(1,Math.abs(n),Math.abs(s))&&Math.abs(i-u)<=t*Math.max(1,Math.abs(i),Math.abs(u))&&Math.abs(o-l)<=t*Math.max(1,Math.abs(o),Math.abs(l))&&Math.abs(a-f)<=t*Math.max(1,Math.abs(a),Math.abs(f))}var _t=ot,xt=at,yt=st,Tt=lt,Ut=ft,St=mt,Mt=ct,bt=function(){var t=K();return function(e,r,n,i,o,a){var s,u;for(r||(r=4),n||(n=0),u=i?Math.min(i*r+n,e.length):e.length,s=n;s<u;s+=r)t[0]=e[s],t[1]=e[s+1],t[2]=e[s+2],t[3]=e[s+3],o(t,t,a),e[s]=t[0],e[s+1]=t[1],e[s+2]=t[2],e[s+3]=t[3];return e}}(),Pt=Object.freeze({create:K,clone:tt,fromValues:et,copy:rt,set:nt,add:it,subtract:ot,multiply:at,divide:st,ceil:function(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t[3]=Math.ceil(e[3]),t},floor:function(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t[3]=Math.floor(e[3]),t},min:function(t,e,r){return t[0]=Math.min(e[0],r[0]),t[1]=Math.min(e[1],r[1]),t[2]=Math.min(e[2],r[2]),t[3]=Math.min(e[3],r[3]),t},max:function(t,e,r){return t[0]=Math.max(e[0],r[0]),t[1]=Math.max(e[1],r[1]),t[2]=Math.max(e[2],r[2]),t[3]=Math.max(e[3],r[3]),t},round:function(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t[3]=Math.round(e[3]),t},scale:ut,scaleAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t[2]=e[2]+r[2]*n,t[3]=e[3]+r[3]*n,t},distance:lt,squaredDistance:ft,length:mt,squaredLength:ct,negate:function(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t},inverse:function(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t[3]=1/e[3],t},normalize:ht,dot:dt,cross:function(t,e,r,n){var i=r[0]*n[1]-r[1]*n[0],o=r[0]*n[2]-r[2]*n[0],a=r[0]*n[3]-r[3]*n[0],s=r[1]*n[2]-r[2]*n[1],u=r[1]*n[3]-r[3]*n[1],l=r[2]*n[3]-r[3]*n[2],f=e[0],m=e[1],c=e[2],h=e[3];return t[0]=m*l-c*u+h*s,t[1]=-f*l+c*a-h*o,t[2]=f*u-m*a+h*i,t[3]=-f*s+m*o-c*i,t},lerp:pt,random:function(t,e){var n,i,o,a,s,u;e=e||1;do{s=(n=2*r()-1)*n+(i=2*r()-1)*i}while(s>=1);do{u=(o=2*r()-1)*o+(a=2*r()-1)*a}while(u>=1);var l=Math.sqrt((1-s)/u);return t[0]=e*n,t[1]=e*i,t[2]=e*o*l,t[3]=e*a*l,t},transformMat4:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3];return t[0]=r[0]*n+r[4]*i+r[8]*o+r[12]*a,t[1]=r[1]*n+r[5]*i+r[9]*o+r[13]*a,t[2]=r[2]*n+r[6]*i+r[10]*o+r[14]*a,t[3]=r[3]*n+r[7]*i+r[11]*o+r[15]*a,t},transformQuat:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=r[0],s=r[1],u=r[2],l=r[3],f=l*n+s*o-u*i,m=l*i+u*n-a*o,c=l*o+a*i-s*n,h=-a*n-s*i-u*o;return t[0]=f*l+h*-a+m*-u-c*-s,t[1]=m*l+h*-s+c*-a-f*-u,t[2]=c*l+h*-u+f*-s-m*-a,t[3]=e[3],t},zero:function(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=0,t},str:function(t){return"vec4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"},exactEquals:vt,equals:gt,sub:_t,mul:xt,div:yt,dist:Tt,sqrDist:Ut,len:St,sqrLen:Mt,forEach:bt});function wt(){var t=new e(4);return e!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function Gt(t,e,r){r*=.5;var n=Math.sin(r);return t[0]=n*e[0],t[1]=n*e[1],t[2]=n*e[2],t[3]=Math.cos(r),t}function Et(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=r[0],u=r[1],l=r[2],f=r[3];return t[0]=n*f+a*s+i*l-o*u,t[1]=i*f+a*u+o*s-n*l,t[2]=o*f+a*l+n*u-i*s,t[3]=a*f-n*s-i*u-o*l,t}function Bt(t,e,r){r*=.5;var n=e[0],i=e[1],o=e[2],a=e[3],s=Math.sin(r),u=Math.cos(r);return t[0]=n*u+a*s,t[1]=i*u+o*s,t[2]=o*u-i*s,t[3]=a*u-n*s,t}function Ct(t,e,r){r*=.5;var n=e[0],i=e[1],o=e[2],a=e[3],s=Math.sin(r),u=Math.cos(r);return t[0]=n*u-o*s,t[1]=i*u+a*s,t[2]=o*u+n*s,t[3]=a*u-i*s,t}function Lt(t,e,r){r*=.5;var n=e[0],i=e[1],o=e[2],a=e[3],s=Math.sin(r),u=Math.cos(r);return t[0]=n*u+i*s,t[1]=i*u-n*s,t[2]=o*u+a*s,t[3]=a*u-o*s,t}function Rt(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=Math.sqrt(r*r+n*n+i*i),s=Math.exp(o),u=a>0?s*Math.sin(a)/a:0;return t[0]=r*u,t[1]=n*u,t[2]=i*u,t[3]=s*Math.cos(a),t}function Dt(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=Math.sqrt(r*r+n*n+i*i),s=a>0?Math.atan2(a,o)/a:0;return t[0]=r*s,t[1]=n*s,t[2]=i*s,t[3]=.5*Math.log(r*r+n*n+i*i+o*o),t}function It(e,r,n,i){var o,a,s,u,l,f=r[0],m=r[1],c=r[2],h=r[3],d=n[0],p=n[1],v=n[2],g=n[3];return(a=f*d+m*p+c*v+h*g)<0&&(a=-a,d=-d,p=-p,v=-v,g=-g),1-a>t?(o=Math.acos(a),s=Math.sin(o),u=Math.sin((1-i)*o)/s,l=Math.sin(i*o)/s):(u=1-i,l=i),e[0]=u*f+l*d,e[1]=u*m+l*p,e[2]=u*c+l*v,e[3]=u*h+l*g,e}function Nt(t,e){var r,n=e[0]+e[4]+e[8];if(n>0)r=Math.sqrt(n+1),t[3]=.5*r,r=.5/r,t[0]=(e[5]-e[7])*r,t[1]=(e[6]-e[2])*r,t[2]=(e[1]-e[3])*r;else{var i=0;e[4]>e[0]&&(i=1),e[8]>e[3*i+i]&&(i=2);var o=(i+1)%3,a=(i+2)%3;r=Math.sqrt(e[3*i+i]-e[3*o+o]-e[3*a+a]+1),t[i]=.5*r,r=.5/r,t[3]=(e[3*o+a]-e[3*a+o])*r,t[o]=(e[3*o+i]+e[3*i+o])*r,t[a]=(e[3*a+i]+e[3*i+a])*r}return t}var At,Ft,Vt,Ot,Yt,Xt,zt=tt,$t=et,kt=rt,qt=nt,Wt=it,Zt=Et,Ht=ut,jt=dt,Jt=pt,Qt=mt,Kt=Qt,te=ct,ee=te,re=ht,ne=vt,ie=gt,oe=(At=C(),Ft=R(1,0,0),Vt=R(0,1,0),function(t,e,r){var n=Y(e,r);return n<-.999999?(X(At,Ft,e),H(At)<1e-6&&X(At,Vt,e),O(At,At),Gt(t,At,Math.PI),t):n>.999999?(t[0]=0,t[1]=0,t[2]=0,t[3]=1,t):(X(At,e,r),t[0]=At[0],t[1]=At[1],t[2]=At[2],t[3]=1+n,re(t,t))}),ae=(Ot=wt(),Yt=wt(),function(t,e,r,n,i,o){return It(Ot,e,i,o),It(Yt,r,n,o),It(t,Ot,Yt,2*o*(1-o)),t}),se=(Xt=p(),function(t,e,r,n){return Xt[0]=r[0],Xt[3]=r[1],Xt[6]=r[2],Xt[1]=n[0],Xt[4]=n[1],Xt[7]=n[2],Xt[2]=-e[0],Xt[5]=-e[1],Xt[8]=-e[2],re(t,Nt(t,Xt))}),ue=Object.freeze({create:wt,identity:function(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t},setAxisAngle:Gt,getAxisAngle:function(e,r){var n=2*Math.acos(r[3]),i=Math.sin(n/2);return i>t?(e[0]=r[0]/i,e[1]=r[1]/i,e[2]=r[2]/i):(e[0]=1,e[1]=0,e[2]=0),n},getAngle:function(t,e){var r=jt(t,e);return Math.acos(2*r*r-1)},multiply:Et,rotateX:Bt,rotateY:Ct,rotateZ:Lt,calculateW:function(t,e){var r=e[0],n=e[1],i=e[2];return t[0]=r,t[1]=n,t[2]=i,t[3]=Math.sqrt(Math.abs(1-r*r-n*n-i*i)),t},exp:Rt,ln:Dt,pow:function(t,e,r){return Dt(t,e),Ht(t,t,r),Rt(t,t),t},slerp:It,random:function(t){var e=r(),n=r(),i=r(),o=Math.sqrt(1-e),a=Math.sqrt(e);return t[0]=o*Math.sin(2*Math.PI*n),t[1]=o*Math.cos(2*Math.PI*n),t[2]=a*Math.sin(2*Math.PI*i),t[3]=a*Math.cos(2*Math.PI*i),t},invert:function(t,e){var r=e[0],n=e[1],i=e[2],o=e[3],a=r*r+n*n+i*i+o*o,s=a?1/a:0;return t[0]=-r*s,t[1]=-n*s,t[2]=-i*s,t[3]=o*s,t},conjugate:function(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t},fromMat3:Nt,fromEuler:function(t,e,r,n){var i=.5*Math.PI/180;e*=i,r*=i,n*=i;var o=Math.sin(e),a=Math.cos(e),s=Math.sin(r),u=Math.cos(r),l=Math.sin(n),f=Math.cos(n);return t[0]=o*u*f-a*s*l,t[1]=a*s*f+o*u*l,t[2]=a*u*l-o*s*f,t[3]=a*u*f+o*s*l,t},str:function(t){return"quat("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"},clone:zt,fromValues:$t,copy:kt,set:qt,add:Wt,mul:Zt,scale:Ht,dot:jt,lerp:Jt,length:Qt,len:Kt,squaredLength:te,sqrLen:ee,normalize:re,exactEquals:ne,equals:ie,rotationTo:oe,sqlerp:ae,setAxes:se});function le(t,e,r){var n=.5*r[0],i=.5*r[1],o=.5*r[2],a=e[0],s=e[1],u=e[2],l=e[3];return t[0]=a,t[1]=s,t[2]=u,t[3]=l,t[4]=n*l+i*u-o*s,t[5]=i*l+o*a-n*u,t[6]=o*l+n*s-i*a,t[7]=-n*a-i*s-o*u,t}function fe(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t}var me=kt,ce=kt;function he(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=r[4],u=r[5],l=r[6],f=r[7],m=e[4],c=e[5],h=e[6],d=e[7],p=r[0],v=r[1],g=r[2],_=r[3];return t[0]=n*_+a*p+i*g-o*v,t[1]=i*_+a*v+o*p-n*g,t[2]=o*_+a*g+n*v-i*p,t[3]=a*_-n*p-i*v-o*g,t[4]=n*f+a*s+i*l-o*u+m*_+d*p+c*g-h*v,t[5]=i*f+a*u+o*s-n*l+c*_+d*v+h*p-m*g,t[6]=o*f+a*l+n*u-i*s+h*_+d*g+m*v-c*p,t[7]=a*f-n*s-i*u-o*l+d*_-m*p-c*v-h*g,t}var de=he,pe=jt,ve=Qt,ge=ve,_e=te,xe=_e,ye=Object.freeze({create:function(){var t=new e(8);return e!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0),t[3]=1,t},clone:function(t){var r=new e(8);return r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=t[3],r[4]=t[4],r[5]=t[5],r[6]=t[6],r[7]=t[7],r},fromValues:function(t,r,n,i,o,a,s,u){var l=new e(8);return l[0]=t,l[1]=r,l[2]=n,l[3]=i,l[4]=o,l[5]=a,l[6]=s,l[7]=u,l},fromRotationTranslationValues:function(t,r,n,i,o,a,s){var u=new e(8);u[0]=t,u[1]=r,u[2]=n,u[3]=i;var l=.5*o,f=.5*a,m=.5*s;return u[4]=l*i+f*n-m*r,u[5]=f*i+m*t-l*n,u[6]=m*i+l*r-f*t,u[7]=-l*t-f*r-m*n,u},fromRotationTranslation:le,fromTranslation:function(t,e){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=.5*e[0],t[5]=.5*e[1],t[6]=.5*e[2],t[7]=0,t},fromRotation:function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=0,t[5]=0,t[6]=0,t[7]=0,t},fromMat4:function(t,r){var n=wt();P(n,r);var i=new e(3);return M(i,r),le(t,n,i),t},copy:fe,identity:function(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t},set:function(t,e,r,n,i,o,a,s,u){return t[0]=e,t[1]=r,t[2]=n,t[3]=i,t[4]=o,t[5]=a,t[6]=s,t[7]=u,t},getReal:me,getDual:function(t,e){return t[0]=e[4],t[1]=e[5],t[2]=e[6],t[3]=e[7],t},setReal:ce,setDual:function(t,e){return t[4]=e[0],t[5]=e[1],t[6]=e[2],t[7]=e[3],t},getTranslation:function(t,e){var r=e[4],n=e[5],i=e[6],o=e[7],a=-e[0],s=-e[1],u=-e[2],l=e[3];return t[0]=2*(r*l+o*a+n*u-i*s),t[1]=2*(n*l+o*s+i*a-r*u),t[2]=2*(i*l+o*u+r*s-n*a),t},translate:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=.5*r[0],u=.5*r[1],l=.5*r[2],f=e[4],m=e[5],c=e[6],h=e[7];return t[0]=n,t[1]=i,t[2]=o,t[3]=a,t[4]=a*s+i*l-o*u+f,t[5]=a*u+o*s-n*l+m,t[6]=a*l+n*u-i*s+c,t[7]=-n*s-i*u-o*l+h,t},rotateX:function(t,e,r){var n=-e[0],i=-e[1],o=-e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=s*a+f*n+u*o-l*i,c=u*a+f*i+l*n-s*o,h=l*a+f*o+s*i-u*n,d=f*a-s*n-u*i-l*o;return Bt(t,e,r),n=t[0],i=t[1],o=t[2],a=t[3],t[4]=m*a+d*n+c*o-h*i,t[5]=c*a+d*i+h*n-m*o,t[6]=h*a+d*o+m*i-c*n,t[7]=d*a-m*n-c*i-h*o,t},rotateY:function(t,e,r){var n=-e[0],i=-e[1],o=-e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=s*a+f*n+u*o-l*i,c=u*a+f*i+l*n-s*o,h=l*a+f*o+s*i-u*n,d=f*a-s*n-u*i-l*o;return Ct(t,e,r),n=t[0],i=t[1],o=t[2],a=t[3],t[4]=m*a+d*n+c*o-h*i,t[5]=c*a+d*i+h*n-m*o,t[6]=h*a+d*o+m*i-c*n,t[7]=d*a-m*n-c*i-h*o,t},rotateZ:function(t,e,r){var n=-e[0],i=-e[1],o=-e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=s*a+f*n+u*o-l*i,c=u*a+f*i+l*n-s*o,h=l*a+f*o+s*i-u*n,d=f*a-s*n-u*i-l*o;return Lt(t,e,r),n=t[0],i=t[1],o=t[2],a=t[3],t[4]=m*a+d*n+c*o-h*i,t[5]=c*a+d*i+h*n-m*o,t[6]=h*a+d*o+m*i-c*n,t[7]=d*a-m*n-c*i-h*o,t},rotateByQuatAppend:function(t,e,r){var n=r[0],i=r[1],o=r[2],a=r[3],s=e[0],u=e[1],l=e[2],f=e[3];return t[0]=s*a+f*n+u*o-l*i,t[1]=u*a+f*i+l*n-s*o,t[2]=l*a+f*o+s*i-u*n,t[3]=f*a-s*n-u*i-l*o,s=e[4],u=e[5],l=e[6],f=e[7],t[4]=s*a+f*n+u*o-l*i,t[5]=u*a+f*i+l*n-s*o,t[6]=l*a+f*o+s*i-u*n,t[7]=f*a-s*n-u*i-l*o,t},rotateByQuatPrepend:function(t,e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=r[0],u=r[1],l=r[2],f=r[3];return t[0]=n*f+a*s+i*l-o*u,t[1]=i*f+a*u+o*s-n*l,t[2]=o*f+a*l+n*u-i*s,t[3]=a*f-n*s-i*u-o*l,s=r[4],u=r[5],l=r[6],f=r[7],t[4]=n*f+a*s+i*l-o*u,t[5]=i*f+a*u+o*s-n*l,t[6]=o*f+a*l+n*u-i*s,t[7]=a*f-n*s-i*u-o*l,t},rotateAroundAxis:function(e,r,n,i){if(Math.abs(i)<t)return fe(e,r);var o=Math.hypot(n[0],n[1],n[2]);i*=.5;var a=Math.sin(i),s=a*n[0]/o,u=a*n[1]/o,l=a*n[2]/o,f=Math.cos(i),m=r[0],c=r[1],h=r[2],d=r[3];e[0]=m*f+d*s+c*l-h*u,e[1]=c*f+d*u+h*s-m*l,e[2]=h*f+d*l+m*u-c*s,e[3]=d*f-m*s-c*u-h*l;var p=r[4],v=r[5],g=r[6],_=r[7];return e[4]=p*f+_*s+v*l-g*u,e[5]=v*f+_*u+g*s-p*l,e[6]=g*f+_*l+p*u-v*s,e[7]=_*f-p*s-v*u-g*l,e},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t[2]=e[2]+r[2],t[3]=e[3]+r[3],t[4]=e[4]+r[4],t[5]=e[5]+r[5],t[6]=e[6]+r[6],t[7]=e[7]+r[7],t},multiply:he,mul:de,scale:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*r,t[5]=e[5]*r,t[6]=e[6]*r,t[7]=e[7]*r,t},dot:pe,lerp:function(t,e,r,n){var i=1-n;return pe(e,r)<0&&(n=-n),t[0]=e[0]*i+r[0]*n,t[1]=e[1]*i+r[1]*n,t[2]=e[2]*i+r[2]*n,t[3]=e[3]*i+r[3]*n,t[4]=e[4]*i+r[4]*n,t[5]=e[5]*i+r[5]*n,t[6]=e[6]*i+r[6]*n,t[7]=e[7]*i+r[7]*n,t},invert:function(t,e){var r=_e(e);return t[0]=-e[0]/r,t[1]=-e[1]/r,t[2]=-e[2]/r,t[3]=e[3]/r,t[4]=-e[4]/r,t[5]=-e[5]/r,t[6]=-e[6]/r,t[7]=e[7]/r,t},conjugate:function(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t[4]=-e[4],t[5]=-e[5],t[6]=-e[6],t[7]=e[7],t},length:ve,len:ge,squaredLength:_e,sqrLen:xe,normalize:function(t,e){var r=_e(e);if(r>0){r=Math.sqrt(r);var n=e[0]/r,i=e[1]/r,o=e[2]/r,a=e[3]/r,s=e[4],u=e[5],l=e[6],f=e[7],m=n*s+i*u+o*l+a*f;t[0]=n,t[1]=i,t[2]=o,t[3]=a,t[4]=(s-n*m)/r,t[5]=(u-i*m)/r,t[6]=(l-o*m)/r,t[7]=(f-a*m)/r}return t},str:function(t){return"quat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+")"},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]},equals:function(e,r){var n=e[0],i=e[1],o=e[2],a=e[3],s=e[4],u=e[5],l=e[6],f=e[7],m=r[0],c=r[1],h=r[2],d=r[3],p=r[4],v=r[5],g=r[6],_=r[7];return Math.abs(n-m)<=t*Math.max(1,Math.abs(n),Math.abs(m))&&Math.abs(i-c)<=t*Math.max(1,Math.abs(i),Math.abs(c))&&Math.abs(o-h)<=t*Math.max(1,Math.abs(o),Math.abs(h))&&Math.abs(a-d)<=t*Math.max(1,Math.abs(a),Math.abs(d))&&Math.abs(s-p)<=t*Math.max(1,Math.abs(s),Math.abs(p))&&Math.abs(u-v)<=t*Math.max(1,Math.abs(u),Math.abs(v))&&Math.abs(l-g)<=t*Math.max(1,Math.abs(l),Math.abs(g))&&Math.abs(f-_)<=t*Math.max(1,Math.abs(f),Math.abs(_))}});function Te(){var t=new e(2);return e!=Float32Array&&(t[0]=0,t[1]=0),t}function Ue(t,e,r){return t[0]=e[0]-r[0],t[1]=e[1]-r[1],t}function Se(t,e,r){return t[0]=e[0]*r[0],t[1]=e[1]*r[1],t}function Me(t,e,r){return t[0]=e[0]/r[0],t[1]=e[1]/r[1],t}function be(t,e){var r=e[0]-t[0],n=e[1]-t[1];return Math.hypot(r,n)}function Pe(t,e){var r=e[0]-t[0],n=e[1]-t[1];return r*r+n*n}function we(t){var e=t[0],r=t[1];return Math.hypot(e,r)}function Ge(t){var e=t[0],r=t[1];return e*e+r*r}var Ee=we,Be=Ue,Ce=Se,Le=Me,Re=be,De=Pe,Ie=Ge,Ne=function(){var t=Te();return function(e,r,n,i,o,a){var s,u;for(r||(r=2),n||(n=0),u=i?Math.min(i*r+n,e.length):e.length,s=n;s<u;s+=r)t[0]=e[s],t[1]=e[s+1],o(t,t,a),e[s]=t[0],e[s+1]=t[1];return e}}(),Ae=Object.freeze({create:Te,clone:function(t){var r=new e(2);return r[0]=t[0],r[1]=t[1],r},fromValues:function(t,r){var n=new e(2);return n[0]=t,n[1]=r,n},copy:function(t,e){return t[0]=e[0],t[1]=e[1],t},set:function(t,e,r){return t[0]=e,t[1]=r,t},add:function(t,e,r){return t[0]=e[0]+r[0],t[1]=e[1]+r[1],t},subtract:Ue,multiply:Se,divide:Me,ceil:function(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t},floor:function(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t},min:function(t,e,r){return t[0]=Math.min(e[0],r[0]),t[1]=Math.min(e[1],r[1]),t},max:function(t,e,r){return t[0]=Math.max(e[0],r[0]),t[1]=Math.max(e[1],r[1]),t},round:function(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t},scale:function(t,e,r){return t[0]=e[0]*r,t[1]=e[1]*r,t},scaleAndAdd:function(t,e,r,n){return t[0]=e[0]+r[0]*n,t[1]=e[1]+r[1]*n,t},distance:be,squaredDistance:Pe,length:we,squaredLength:Ge,negate:function(t,e){return t[0]=-e[0],t[1]=-e[1],t},inverse:function(t,e){return t[0]=1/e[0],t[1]=1/e[1],t},normalize:function(t,e){var r=e[0],n=e[1],i=r*r+n*n;return i>0&&(i=1/Math.sqrt(i)),t[0]=e[0]*i,t[1]=e[1]*i,t},dot:function(t,e){return t[0]*e[0]+t[1]*e[1]},cross:function(t,e,r){var n=e[0]*r[1]-e[1]*r[0];return t[0]=t[1]=0,t[2]=n,t},lerp:function(t,e,r,n){var i=e[0],o=e[1];return t[0]=i+n*(r[0]-i),t[1]=o+n*(r[1]-o),t},random:function(t,e){e=e||1;var n=2*r()*Math.PI;return t[0]=Math.cos(n)*e,t[1]=Math.sin(n)*e,t},transformMat2:function(t,e,r){var n=e[0],i=e[1];return t[0]=r[0]*n+r[2]*i,t[1]=r[1]*n+r[3]*i,t},transformMat2d:function(t,e,r){var n=e[0],i=e[1];return t[0]=r[0]*n+r[2]*i+r[4],t[1]=r[1]*n+r[3]*i+r[5],t},transformMat3:function(t,e,r){var n=e[0],i=e[1];return t[0]=r[0]*n+r[3]*i+r[6],t[1]=r[1]*n+r[4]*i+r[7],t},transformMat4:function(t,e,r){var n=e[0],i=e[1];return t[0]=r[0]*n+r[4]*i+r[12],t[1]=r[1]*n+r[5]*i+r[13],t},rotate:function(t,e,r,n){var i=e[0]-r[0],o=e[1]-r[1],a=Math.sin(n),s=Math.cos(n);return t[0]=i*s-o*a+r[0],t[1]=i*a+o*s+r[1],t},angle:function(t,e){var r=t[0],n=t[1],i=e[0],o=e[1],a=r*r+n*n;a>0&&(a=1/Math.sqrt(a));var s=i*i+o*o;s>0&&(s=1/Math.sqrt(s));var u=(r*i+n*o)*a*s;return u>1?0:u<-1?Math.PI:Math.acos(u)},zero:function(t){return t[0]=0,t[1]=0,t},str:function(t){return"vec2("+t[0]+", "+t[1]+")"},exactEquals:function(t,e){return t[0]===e[0]&&t[1]===e[1]},equals:function(e,r){var n=e[0],i=e[1],o=r[0],a=r[1];return Math.abs(n-o)<=t*Math.max(1,Math.abs(n),Math.abs(o))&&Math.abs(i-a)<=t*Math.max(1,Math.abs(i),Math.abs(a))},len:Ee,sub:Be,mul:Ce,div:Le,dist:Re,sqrDist:De,sqrLen:Ie,forEach:Ne});let Fe={};function Ve(t,e,r){return(e=function(t){var e=function(t,e){if("object"!=typeof t||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==typeof e?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Oe(t,e){return function(t,e){if(e.get)return e.get.call(t);return e.value}(t,Xe(t,e,"get"))}function Ye(t,e,r){return function(t,e,r){if(e.set)e.set.call(t,r);else{if(!e.writable)throw new TypeError("attempted to set read only private field");e.value=r}}(t,Xe(t,e,"set"),r),r}function Xe(t,e,r){if(!e.has(t))throw new TypeError("attempted to "+r+" private field on non-instance");return e.get(t)}function ze(t,e,r){!function(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")}(t,e),e.set(t,r)}Fe.glMatrix=i,Fe.mat2=l,Fe.mat2d=d,Fe.mat3=y,Fe.mat4=B,Fe.quat=ue,Fe.quat2=ye,Fe.vec2=Ae,Fe.vec3=Q,Fe.vec4=Pt,Object.defineProperty(Fe,"__esModule",{value:!0});let $e=1;class ke{constructor(){this._UUID=$e++}static getNextUUID(){return $e++}updateUUID(){this._UUID=$e++}}let qe={float32:1*Float32Array.BYTES_PER_ELEMENT,float32x2:2*Float32Array.BYTES_PER_ELEMENT,float32x3:3*Float32Array.BYTES_PER_ELEMENT,float32x4:4*Float32Array.BYTES_PER_ELEMENT,mat2:4*Float32Array.BYTES_PER_ELEMENT,mat3:12*Float32Array.BYTES_PER_ELEMENT,mat4:16*Float32Array.BYTES_PER_ELEMENT};var We={rgb2hex:(t,e,r)=>"#"+(16777216+(r|e<<8|t<<16)).toString(16).slice(1),regHex:function(){const t=/^#(?:[0-9a-fA-F]{3}){1,2}$/;return function(e){return t.test(e)}}(),hexToRGB_ZeroToOne:function(t){let e,r;if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(t))return r=[],e=t.substring(1).split(""),3===e.length&&(e=[e[0],e[0],e[1],e[1],e[2],e[2]]),e="0x"+e.join(""),r[0]=(e>>16&255)/255,r[1]=(e>>8&255)/255,r[2]=(255&e)/255,r;Je.throwFunc("RedGLUtil.hexToRGB_ZeroToOne : 잘못된 hex값입니다.",t)}};let Ze=function(t,e,r){return Math.max(e,Math.min(r,t))};var He={clamp:Ze,nextHighestPowerOfTwo:function(){let t;return function(e){for(--e,t=1;t<32;t<<=1)e|=e>>t;return e+1}}(),quaternionToRotationMat4:function(t,e){let r=t[0],n=t[1],i=t[2],o=t[3],a=r+r,s=n+n,u=i+i,l=r*a,f=r*s,m=r*u,c=n*s,h=n*u,d=i*u,p=o*a,v=o*s,g=o*u;return e[0]=1-(c+d),e[4]=f-g,e[8]=m+v,e[1]=f+g,e[5]=1-(l+d),e[9]=h-p,e[2]=m-v,e[6]=h+p,e[10]=1-(l+c),e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},mat4ToEuler:function(t,e,r){e=e||[0,0,0],r=r||"XYZ";let n=t[0],i=t[4],o=t[8],a=t[1],s=t[5],u=t[9],l=t[2],f=t[6],m=t[10];return"XYZ"===r?(e[1]=Math.asin(Ze(o,-1,1)),Math.abs(o)<.99999?(e[0]=Math.atan2(-u,m),e[2]=Math.atan2(-i,n)):(e[0]=Math.atan2(f,s),e[2]=0)):"YXZ"===r?(e[0]=Math.asin(-Ze(u,-1,1)),Math.abs(u)<.99999?(e[1]=Math.atan2(o,m),e[2]=Math.atan2(a,s)):(e[1]=Math.atan2(-l,n),e[2]=0)):"ZXY"===r?(e[0]=Math.asin(Ze(f,-1,1)),Math.abs(f)<.99999?(e[1]=Math.atan2(-l,m),e[2]=Math.atan2(-i,s)):(e[1]=0,e[2]=Math.atan2(a,n))):"ZYX"===r?(e[1]=Math.asin(-Ze(l,-1,1)),Math.abs(l)<.99999?(e[0]=Math.atan2(f,m),e[2]=Math.atan2(a,n)):(e[0]=0,e[2]=Math.atan2(-i,s))):"YZX"===r?(e[2]=Math.asin(Ze(a,-1,1)),Math.abs(a)<.99999?(e[0]=Math.atan2(-u,s),e[1]=Math.atan2(-l,n)):(e[0]=0,e[1]=Math.atan2(o,m))):"XZY"===r&&(e[2]=Math.asin(-Ze(i,-1,1)),Math.abs(i)<.99999?(e[0]=Math.atan2(f,s),e[1]=Math.atan2(o,n)):(e[0]=Math.atan2(-u,m),e[1]=0)),e},calculateNormals:function(t,e){let r,n,i=[];for(r=0;r<t.length;r+=3)i[r+0]=0,i[r+1]=0,i[r+2]=0;for(r=0;r<e.length;r+=3){let o,a,s,u,l=[],f=[],m=[];for(o=3*e[r],a=3*e[r+1],s=3*e[r+2],l[0]=t[s+0]-t[a+0],l[1]=t[s+1]-t[a+1],l[2]=t[s+2]-t[a+2],f[0]=t[o+0]-t[a+0],f[1]=t[o+1]-t[a+1],f[2]=t[o+2]-t[a+2],m[0]=l[1]*f[2]-l[2]*f[1],m[1]=l[2]*f[0]-l[0]*f[2],m[2]=l[0]*f[1]-l[1]*f[0],n=0;n<3;n++)u=3*e[r+n],i[u+0]=i[u+0]+m[0],i[u+1]=i[u+1]+m[1],i[u+2]=i[u+2]+m[2]}for(r=0;r<t.length;r+=3){let t=[];t[0]=i[r+0],t[1]=i[r+1],t[2]=i[r+2];let e=Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);0===e&&(e=1),t[0]=t[0]/e,t[1]=t[1]/e,t[2]=t[2]/e,i[r+0]=t[0],i[r+1]=t[1],i[r+2]=t[2]}return i}};const je=(t=>{let e,r,n,i,o,a=[0,0,0],s=Fe.mat4.create(),u=Fe.mat4.create();return(t,l,f)=>(t=2*t/f.viewRect[2]-1,l=-2*l/f.viewRect[3]+1,e=1,o=f.camera,Fe.mat4.multiply(u,f.projectionMatrix,o.matrix),i=Fe.mat4.clone(u),Fe.mat4.invert(i,i),a=[t,l,1],Fe.mat4.identity(s),Fe.mat4.translate(s,s,a),Fe.mat4.multiply(i,i,s),a[0]=i[12],a[1]=i[13],a[2]=i[14],r=u[12]*t+u[13]*l+u[15],0!==r&&(n=1/r,a[0]/=n,a[1]/=n,a[2]/=n,a[0]=a[0]+o.x,a[1]=a[1]+o.y,a[2]=a[2]+o.z),a)})();var Je={throwFunc:function(){throw"Error : "+Array.prototype.slice.call(arguments).join(" ")},...We,...He,getFlatChildList:t=>{let e=function(t){const e=[...t],r=[];for(;e.length;){const t=e.shift();r.push(t),e.push(...t._children)}return r}(t);return e=e.reverse(),e},screenToWorld:je};class Qe{constructor(t=[],e=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST){Array.isArray(t)||Je.throwFunc(`${this.constructor.name} - only allow Array Instance. / inputValue : ${t} { type : ${typeof t} }`),this.redStruct=JSON.parse(JSON.stringify(t)),this.redStructOffsetMap={};let r=0,n=qe.float32x4;this.redStruct.map(t=>{if(t.valueName||Je.throwFunc(`${this.constructor.name} - need valueName / inputValue : ${t.valueName} { type : ${typeof t.valueName} }`),t.hasOwnProperty("size")||Je.throwFunc(`${this.constructor.name} - need size / inputValue : ${t.size} { type : ${typeof t.size} }`),t.size<=n){Math.floor(r/n)!=Math.floor((r+t.size-1)/n)&&(r+=n-r%n),t.offset=r,r+=t.size}else r%n&&(r+=n-r%n),t.offset=r,r+=t.size;this.redStructOffsetMap[t.valueName]=t.offset,t._UUID=t.valueName+"_"+ke.getNextUUID()});let i=r%n;this.size=this.redStruct.length?r+(i?n-i:0):n,this.usage=e}}var Ke,tr=new WeakMap;class er{constructor(){Ve(this,"redGPUContext",void 0),Ve(this,"detectGPU",t=>{}),ze(this,tr,{writable:!0,value:t=>{let e,r,n,i,o,a,s=window.navigator,u=s.userAgent.toLowerCase(),l=s.platform.toLowerCase(),f=s.appVersion.toLowerCase(),m="pc",c=0,h=t=>u.includes("whale")?(r=parseFloat(/whale\/([\d]+)/.exec(u)[1]),e="whale"):0,d=t=>{if(u.includes(o="chrome")||u.includes(o="crios"))return e="chrome",r=parseFloat(("chrome"===o?/chrome\/([\d]+)/:/crios\/([\d]+)/).exec(u)[1])},p=t=>u.includes("firefox")?(e="firefox",r=parseFloat(/firefox\/([\d]+)/.exec(u)[1])):0,v=t=>u.includes("safari")?(e="safari",r=parseFloat(/safari\/([\d]+)/.exec(u)[1])):0,g=t=>{let n;return u.includes(n="opera")||u.includes(n="opr")?(e="opera",r="opera"===n?parseFloat(/version\/([\d]+)/.exec(u)[1]):parseFloat(/opr\/([\d]+)/.exec(u)[1])):0},_=t=>u.includes("naver")?e="naver":0;if(u.includes("android"))e=n="android",m=u.includes("mobile")?(e+="Tablet","tablet"):"mobile",i=(o=/android ([\d.]+)/.exec(u))?(o=o[1].split("."),parseFloat(o[0]+"."+o[1])):0,c=1,h()||_()||g()||d()||p()||(r=o=/safari\/([\d.]+)/.exec(u)?parseFloat(o[1]):0);else if(u.includes(o="ipad")||u.includes(o="iphone"))m="ipad"===o?"tablet":"mobile",e=n=o,i=(o=/os ([\d_]+)/.exec(u))?(o=o[1].split("_"),parseFloat(o[0]+"."+o[1])):0,c=1,h()||_()||g()||d()||p()||(r=(o=/mobile\/([\S]+)/.exec(u))?parseFloat(o[1]):0);else if(l.includes("win")){for(o in a={5.1:"xp","6.0":"vista",6.1:"7",6.2:"8",6.3:"8.1","10.0":"10"})if(u.includes("windows nt "+o)){i=a[o];break}n="win",(u.includes("edge")?(u.includes("iemobile")&&(n="winMobile"),e="edge",r=/edge\/([\d]+)/.exec(u)[1]):u.includes("msie")||u.includes("trident")?(u.includes("iemobile")&&(n="winMobile"),e="ie",r=u.includes("msie 7")&&u.includes("trident")?-1:u.includes("msie")?parseFloat(/msie ([\d]+)/.exec(u)[1]):11):void 0)||h()||g()||d()||p()||v()}else l.includes("mac")?(n="mac",o=/os x ([\d._]+)/.exec(u)[1].replace("_",".").split("."),i=parseFloat(o[0]+"."+o[1]),h()||g()||d()||p()||v()):(n=f.includes("x11")?"unix":f.includes("linux")?"linux":0,h()||d()||p());for(o in a={device:m,isMobile:c,browser:e,browserVer:r,os:n,osVer:i,down:c?"touchstart":"mousedown",move:c?"touchmove":"mousemove",up:c?"touchend":"mouseup",click:"click",over:"mouseover",out:"mouseout"})a.hasOwnProperty(o)&&(this[o]=a[o])}}),Oe(this,tr).call(this),"ie"===this.browser&&(console.table=console.log)}}class rr{}Ke=rr,Ve(rr,"MESH_UNIFORM_POOL_NUM",25),Ve(rr,"GLSL_VERSION","#version 460"),Ve(rr,"MAX_DIRECTIONAL_LIGHT",3),Ve(rr,"MAX_POINT_LIGHT",10),Ve(rr,"MAX_SPOT_LIGHT",1),Ve(rr,"SET_INDEX_ComputeUniforms",0),Ve(rr,"SET_INDEX_SystemUniforms_vertex",0),Ve(rr,"SET_INDEX_SystemUniforms_fragment",1),Ve(rr,"SET_INDEX_MeshUniforms",2),Ve(rr,"SET_INDEX_VertexUniforms",3),Ve(rr,"SET_INDEX_FragmentUniforms",3),Ve(rr,"GLSL_SystemUniforms_vertex",{systemUniforms:`\n\t\tconst float TRUTHY = 1.0;\n\t\tlayout( set =  ${Ke.SET_INDEX_SystemUniforms_vertex}, binding = 0 ) uniform SystemUniforms {\n\t        mat4 perspectiveMTX;\n\t        mat4 cameraMTX;\n\t        vec2 resolution;\n\t        float time;\n\t    } systemUniforms;\n\t    `,meshUniforms:`\n\t\tlayout( set = ${Ke.SET_INDEX_MeshUniforms}, binding = 0 ) uniform MeshMatrixUniforms {\n\t        mat4 modelMatrix[${Ke.MESH_UNIFORM_POOL_NUM}];\n\t        mat4 normalMatrix[${Ke.MESH_UNIFORM_POOL_NUM}];\n\t    } meshMatrixUniforms;\n\t    layout( set = ${Ke.SET_INDEX_MeshUniforms}, binding = 1 ) uniform MeshUniformIndex {\n\t        float index;\n\t        float mouseColorID;\n\t        float sumOpacity;\n\t    } meshUniforms;\n\t\t`,calcDisplacement:(t="vNormal",e="displacementFlowSpeedX",r="displacementFlowSpeedY",n="displacementPower",i="targetUV",o="targetDisplacementTexture",a="targetSampler")=>`\n        normalize(${t}) \n        * texture(\n            sampler2D(${o}, ${a}), \n            ${i} + vec2(\n                ${e} * (systemUniforms.time/1000.0),\n                ${r} * (systemUniforms.time/1000.0)\n            )\n        ).x * ${n};\n\t\t`,getSprite3DMatrix:"\n\t\tmat4 getSprite3DMatrix(mat4 cameraMTX, mat4 mvMatrix){\n\t\t\tmat4 tMTX = cameraMTX * mvMatrix;\n\t\t\ttMTX[0][0] = mvMatrix[0][0], tMTX[0][1] = 0.0, tMTX[0][2] = 0.0;\n\t\t\ttMTX[1][0] = 0.0, tMTX[1][1] = mvMatrix[1][1], tMTX[1][2] = 0.0;\n\t\t\ttMTX[2][0] = 0.0, tMTX[2][1] = 0.0, tMTX[2][2] = mvMatrix[2][2];\n\t\t\treturn tMTX;\n\t\t}\n\t\t"}),Ve(rr,"GLSL_SystemUniforms_fragment",{systemUniforms:`\n\t\tconst float TRUTHY = 1.0;\n\t\tconst int MAX_DIRECTIONAL_LIGHT = ${Ke.MAX_DIRECTIONAL_LIGHT};\n\t\tconst int MAX_POINT_LIGHT =  ${Ke.MAX_POINT_LIGHT};\n\t\tconst int MAX_SPOT_LIGHT =  ${Ke.MAX_SPOT_LIGHT};\n\t\tstruct DirectionalLight {\n\t        vec4 color;\n\t        vec3 position;\n\t        float intensity;\n\t\t};\n\t\tstruct PointLight {\n\t        vec4 color;\n\t        vec3 position;\n\t        float intensity;\n\t        float radius;\n\t\t};\n\t\tstruct AmbientLight {\n\t        vec4 color;\n\t        float intensity;\n\t\t};\n\t\tstruct SpotLight {\n\t        vec4 color;\n\t        vec3 position;\n\t        float intensity;\n\t        float cutoff;\n\t        float exponent;\n\t\t};\n\t\tlayout( set =  ${Ke.SET_INDEX_SystemUniforms_fragment}, binding = 0 ) uniform SystemUniforms {\n\t        float directionalLightCount;\n\t        float pointLightCount;\n\t        float spotLightCount;\n\t        DirectionalLight directionalLightList[MAX_DIRECTIONAL_LIGHT];\n\t        PointLight pointLightList[MAX_POINT_LIGHT];\n\t        AmbientLight ambientLight;\t        \n\t        SpotLight spotLightList[MAX_SPOT_LIGHT];\n\t        vec2 resolution;\n\t        vec3 cameraPosition;\n        } systemUniforms;\n        /////////////////////////////////////////////////////////////////////////////\n        vec4 la = systemUniforms.ambientLight.color * systemUniforms.ambientLight.intensity;\n        vec4 calcDirectionalLight(\n            vec4 diffuseColor,\n            vec3 N,\t\t\n\t\t\tfloat loopNum,\n\t\t\tDirectionalLight[MAX_DIRECTIONAL_LIGHT] lightList,\n\t\t\tfloat shininess,\n\t\t\tfloat specularPower,\n\t\t\tvec4 specularColor,\n\t\t\tfloat specularTextureValue\n\t\t){\n\t\t    vec4 ld = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t    vec4 ls = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t    \n\t\t    vec3 L;\t\n\t\t    vec4 lightColor;\n\t\t    \n\t\t    float lambertTerm;\n\t\t    float intensity;\n\t\t    float specular;\n\t\t    \t\t    \n\t\t    DirectionalLight lightInfo;\n\t\t    for(int i = 0; i< loopNum; i++){\n\t\t        lightInfo = lightList[i];\n\t\t\t    L = normalize(-lightInfo.position);\t\n\t\t\t    lightColor = lightInfo.color;\n\t\t\t    lambertTerm = dot(N,-L);\n\t\t\t    intensity = lightInfo.intensity;\n\t\t\t    if(lambertTerm > 0.0){\n\t\t\t\t\tld += lightColor * diffuseColor * lambertTerm * intensity;\n\t\t\t\t\tspecular = pow( max(dot(reflect(L, N), -L), 0.0), shininess) * specularPower * specularTextureValue;\n\t\t\t\t\tls +=  specularColor * specular * intensity ;\n\t\t\t    }\n\t\t    }\n\t\t    return ld + ls;\n\t\t}\n\t\t/////////////////////////////////////////////////////////////////////////////\n\t\tvec4 calcPointLight(\n            vec4 diffuseColor,\n            vec3 N,\t\t\n\t\t\tfloat loopNum,\n\t\t\tPointLight[MAX_POINT_LIGHT] lightList,\n\t\t\tfloat shininess,\n\t\t\tfloat specularPower,\n\t\t\tvec4 specularColor,\n\t\t\tfloat specularTextureValue,\n\t\t\tvec3 vVertexPosition\n\t\t){\n\t\t\tvec4 ld = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t    vec4 ls = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t    \n\t\t    vec3 L;\t\n\t\t    vec4 lightColor;\n\t\t    \n\t\t    float lambertTerm;\n\t\t    float intensity;\n\t\t    float specular;\n\t\t  \n\t\t    PointLight lightInfo;\n\t\t    float distanceLength ;\n\t\t    float attenuation;\n\t\t    for(int i = 0; i< loopNum; i++){\n\t\t        lightInfo = lightList[i];\n\t\t        L = -lightInfo.position + vVertexPosition;\n\t\t\t    distanceLength = abs(length(L));\n\t\t\t    if(lightInfo.radius> distanceLength){\n\t\t\t        L = normalize(L);\t\n              lightColor = lightInfo.color;\n              lambertTerm = dot(N,-L);\n              intensity = lightInfo.intensity;\n              if(lambertTerm > 0.0){\n                  attenuation = clamp(1.0 - distanceLength*distanceLength/(lightInfo.radius*lightInfo.radius), 0.0, 1.0); \n                  attenuation *= attenuation;\n            \t    ld += lightColor* diffuseColor * lambertTerm * intensity * attenuation;\n            \t \n                  specular = pow( max(dot(reflect(L, N), -L), 0.0), shininess) * specularPower * specularTextureValue;\n                  ls +=  specularColor * specular * intensity * attenuation;\n              }\n\t\t\t    }\n\t\t    }\n\t\t    return ld + ls;\n\t\t}\n\t\tvec4 calcSpotLight(\n            vec4 diffuseColor,\n            vec3 N,\t\t\n\t\t\tfloat loopNum,\n\t\t\tSpotLight[MAX_SPOT_LIGHT] lightList,\n\t\t\tfloat shininess,\n\t\t\tfloat specularPower,\n\t\t\tvec4 specularColor,\n\t\t\tfloat specularTextureValue,\n\t\t\tvec3 vVertexPosition\n\t\t){\n\t\t\tvec4 ld = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t    vec4 ls = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t    \n\t\t    vec3 L;\t\n\t\t    vec4 lightColor;\n\t\t    \n\t\t    float lambertTerm;\n\t\t    float intensity;\n\t\t    float specular;\n\t\t  \n\t\t    SpotLight lightInfo;\n\t        float distanceLength ;\n\t\t    float attenuation;\n\t\t    for(int i = 0; i< loopNum; i++){\n\t\t        lightInfo = lightList[i];\n\t\t        L = -lightInfo.position + vVertexPosition;\n\t\t\t    distanceLength = abs(length(L));\n\t\t\t    vec3 spotDirection = vec3(0.1,-1,0);\n\t\t\t    L = normalize(L);\t\n\t\t\t    lambertTerm = dot(N,-L);\n\t\t\t\tfloat spotEffect = dot(normalize(spotDirection),L);\n                lightColor = lightInfo.color;\n\t\t        float limit = 10;\n\t\t        float inLight = step(cos(limit * 3.141592653589793/180), spotEffect);\n                float light = inLight * spotEffect;\n\t\t\t    if(lambertTerm > 0 && spotEffect > lightInfo.cutoff ){\t\t\t     \n\t\t\t        if(spotEffect > cos(limit * 3.141592653589793/180) ){\n\t\t\t\t        spotEffect = pow(spotEffect, lightInfo.exponent);\n\t\t                attenuation = spotEffect * light ;\n\t\t\t\t\t    intensity = lightInfo.intensity;\t\t\t\t\t \n\t\t\t\t     \n\t\t\t\t\t\tld += lightColor * diffuseColor * intensity * attenuation;\n\t\t\t\t\t\tspecular = pow( max(dot(reflect(L, N), -L), 0.0), shininess) * specularPower * specularTextureValue;\n\t\t\t\t\t\tls +=  specularColor * specular * intensity * attenuation ;\n\t\t\t\t\t}\n\t\t\t    }\n\t\t    }\n\t\t    return ld + ls;\n\t\t}\n\t\t/////////////////////////////////////////////////////////////////////////////\n\t\tvec3 getFlatNormal(vec3 vertexPosition){\n\t\t\tvec3 dx = dFdx(vertexPosition.xyz);\n\t\t\tvec3 dy = dFdy(vertexPosition.xyz);\n\t\t\treturn normalize(cross(normalize(dy), normalize(dx)));\n\t\t}\n\t\t`,perturb_normal:"\n\t\tvec3 perturb_normal( vec3 N, vec3 V, vec2 texcoord, vec3 normalColor , float normalPower)\n\t\t{\t   \n\t\t\tvec3 map = normalColor;\n\t\t\tmap =  map * 255./127. - 128./127.;\n\t\t\tmap.xy *= -normalPower;\n\t\t\tmat3 TBN = cotangent_frame(N, V, texcoord);\n\t\t\treturn normalize(TBN * map);\n\t\t}\n\t\t",cotangent_frame:"\n\t\tmat3 cotangent_frame(vec3 N, vec3 p, vec2 uv)\n\t\t{\n\t\t\n\t\t\tvec3 dp1 = dFdx( p );\n\t\t\tvec3 dp2 = dFdy( p );\n\t\t\tvec2 duv1 = dFdx( uv );\n\t\t\tvec2 duv2 = dFdy( uv );\n\t\t\t\n\t\t\tvec3 dp2perp = cross( dp2, N );\n\t\t\tvec3 dp1perp = cross( N, dp1 );\n\t\t\tvec3 T = dp2perp * duv1.x + dp1perp * duv2.x;\n\t\t\tvec3 B = dp2perp * duv1.y + dp1perp * duv2.y;\n\t\t\t\n\t\t\tfloat invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );\n\t\t\treturn mat3( T * invmax, B * invmax, N );\n\t\t}\n\t\t"});const nr={};class ir{constructor(t,e={}){if(e={magFilter:e.magFilter||"linear",minFilter:e.minFilter||"linear",mipmapFilter:e.mipmapFilter||"linear",addressModeU:e.addressModeU||"repeat",addressModeV:e.addressModeV||"repeat",addressModeW:e.addressModeW||"repeat"},this.string=JSON.stringify(e),nr[this.string])return nr[this.string];this.GPUSampler=t.device.createSampler(e),nr[this.string]=this}}let or,ar,sr,ur=new Set,lr=function(t){const e={device:t.device,format:t.swapChainFormat,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC,alphaMode:"premultiplied"};return t.useDebugConsole,t.context.configure(e)};var fr=new WeakMap,mr=new WeakMap,cr=new WeakMap;class hr{constructor(t,e){ze(this,fr,{writable:!0,value:0}),ze(this,mr,{writable:!0,value:0}),ze(this,cr,{writable:!0,value:void 0}),Ve(this,"viewList",[]),new Promise(async t=>{ar?(ar.compileGLSL(` ${rr.GLSL_VERSION}\nvoid main(){} `,"vertex"),ar.compileGLSL(` ${rr.GLSL_VERSION}\nvoid main(){} `,"fragment"),t()):(or=await import("https://unpkg.com/@webgpu/glslang@0.0.15/dist/web-devel/glslang.js"),ar=await or.default(),ar.compileGLSL(` ${rr.GLSL_VERSION}\nvoid main(){} `,"vertex"),ar.compileGLSL(` ${rr.GLSL_VERSION}\nvoid main(){} `,"fragment"),t())}).then(t=>new Promise(async t=>{sr||(await import("https://preview.babylonjs.com/twgsl/twgsl.js"),sr=twgsl),t()})).then(t=>sr("https://preview.babylonjs.com/twgsl/twgsl.wasm")).then(r=>{Ye(this,cr,new er(this));let n=!0;navigator.gpu?navigator.gpu.requestAdapter({powerPreference:"high-performance"}).then(n=>{n.requestDevice({}).then(i=>{this.adapter=n,this.twgsl=r,this.glslang=ar,this.canvas=t,this.context=t.getContext("webgpu"),this.device=i,this.swapChainFormat=navigator.gpu.getPreferredCanvasFormat(this.adapter),this.state={Geometry:new Map,Buffer:{vertexBuffer:new Map,indexBuffer:new Map},emptySampler:new ir(this),emptyTextureView:i.createTexture({size:{width:1,height:1,depthOrArrayLayers:1},format:"r8unorm",usage:GPUTextureUsage.TEXTURE_BINDING}).createView(),emptyCubeTextureView:i.createTexture({size:{width:1,height:1,depthOrArrayLayers:6},dimension:"2d",mipLevelCount:1,sampleCount:1,format:"r8unorm",usage:GPUTextureUsage.TEXTURE_BINDING}).createView({format:"r8unorm",dimension:"cube",aspect:"all",baseMipLevel:0,mipLevelCount:1,baseArrayLayer:0,arrayLayerCount:6})},[Oe(this,cr).click,Oe(this,cr).move,Oe(this,cr).down,Oe(this,cr).up].forEach(t=>{let e,r,n,i;e="offsetX",r="offsetY",this.canvas.addEventListener(t,t=>{let e,r,o;for(t.preventDefault(),Oe(this,cr).isMobile?t.changedTouches[0]&&(e={type:t.type,x:t.changedTouches[0].clientX,y:t.changedTouches[0].clientY,nativeEvent:t},n=t.changedTouches[0].clientX,i=t.changedTouches[0].clientY):(e={type:t.type,x:t.offsetX,y:t.offsetY,nativeEvent:t},n=t.offsetX,i=t.offsetY),r=this.viewList.length;r--;)o=this.viewList[r],o.mouseEventChecker.mouseEventInfo.push(e),o.mouseX=n-o.viewRect[0],o.mouseY=i-o.viewRect[1]},!1)}),Oe(this,cr).detectGPU(),this.setSize("100%","100%"),ur.size||function(){const t=t=>{for(const t of ur)t.setSize(),lr(t)};window.addEventListener("resize",t),requestAnimationFrame(e=>{t()})}(),ur.add(this),e.call(this,!0)})}).catch(t=>{n=!1,e(!1,t)}):e(n=!1,"navigate.gpu is null")})}get detector(){return Oe(this,cr)}addView(t){this.viewList.push(t),t.resetTexture(this)}removeView(t){this.viewList.includes(t)&&this.viewList.splice(t,1)}setSize(t=Oe(this,fr),e=Oe(this,mr)){let r,n;Ye(this,fr,t),Ye(this,mr,e);let i=document.body.getBoundingClientRect();i.height=window.innerHeight,r="number"!=typeof t&&t.includes("%")?parseInt(+i.width*t.replace("%","")/100):t,n="number"!=typeof e&&e.includes("%")?parseInt(+i.height*e.replace("%","")/100):e,r<1&&(r=1),n<1&&(n=1);const o=window.devicePixelRatio||1;this.canvas.width=r*o,this.canvas.height=n*o,this.canvas.style.width=r+"px",this.canvas.style.height=n+"px",this.viewList.forEach(t=>{t.setSize(),t.setLocation()})}}Ve(hr,"useDebugConsole",!1);class dr extends ke{constructor(t){super(),Ve(this,"redGPUContext",void 0),Ve(this,"GPUBuffer",void 0),Ve(this,"uniformBufferDescriptor",void 0),t instanceof hr||Je.throwFunc(`${this.constructor.name} - only allow redGPUContext Instance.- inputValue : ${t} { type : ${typeof t} }`),this.redGPUContext=t}setBuffer(t){t instanceof Qe||Je.throwFunc(`${this.constructor.name} - only allow UniformBufferDescriptor Instance.- inputValue : ${t} { type : ${typeof t} }`),this.GPUBuffer&&this.GPUBuffer.destroy(),this.GPUBuffer=this.redGPUContext.device.createBuffer(t),this.float32Array=new Float32Array(t.size/Float32Array.BYTES_PER_ELEMENT),this.uniformBufferDescriptor=t}}class pr extends ke{constructor(){super(),Ve(this,"_parent",void 0),Ve(this,"_children",[])}get children(){return this._children}set children(t){this._children=t}addChild(...t){t.forEach(t=>{t instanceof Hr||Je.throwFunc(`addChild - only allow BaseObject3D Instance. - inputValue : ${t} { type : ${typeof t} }`),this._children.includes(t)?Je.throwFunc(`${t} : Already registered object. - inputValue : ${t} { type : ${typeof t} }`):(t._parent=this.directionalLightList?null:this,this._children.push(t))}),pr.needFlatListUpdate=!0}addChildAt(t,e){t instanceof Hr||Je.throwFunc(`addChildAt - only allow BaseObject3D Instance. - inputValue : ${t}, ${e} { type : ${typeof t}, ${typeof e} }`),this._children.includes(t)&&this.removeChild(t),this._children.length<e&&(e=this._children.length),null!=e?this._children.splice(e,0,t):(t._parent=this.directionalLightList?null:this,this._children.push(t)),pr.needFlatListUpdate=!0}removeChild(t){this._children.includes(t)?(t._parent=null,this._children.splice(this._children.indexOf(t),1)):Je.throwFunc(`removeChild - Attempt to delete an object that does not exist. - inputValue : ${t} { type : ${typeof t} }`),pr.needFlatListUpdate=!0}removeChildAt(t){this._children[t]?(this._children[t]._parent=null,this._children.splice(t,1)):Je.throwFunc(`removeChildAt - No object at index. - inputValue : ${t} { type : ${typeof t} }`),pr.needFlatListUpdate=!0}removeChildAll(){let t=this._children.length;for(;t--;)this._children[t]._parent=null;this._children.length=0,pr.needFlatListUpdate=!0}getChildAt(t){return this._children[t]}getChildIndex(t){this._children.indexOf(t)}numChildren(){return this._children.length}}var vr=new WeakMap;class gr extends ke{constructor(t,e){super(),Ve(this,"redGPUContext",void 0),ze(this,vr,{writable:!0,value:void 0}),Ve(this,"GPURenderPipeline",void 0),this.redGPUContext=t,Ye(this,vr,e),this.GPURenderPipeline=null}update(t,e){let r=Oe(this,vr);const n=t.device,i={layout:n.createPipelineLayout({bindGroupLayouts:[e.systemUniformInfo_vertex.GPUBindGroupLayout,e.systemUniformInfo_fragment.GPUBindGroupLayout,r.GPUBindGroupLayout,r._material.GPUBindGroupLayout]}),vertex:{module:r._material.vShaderModule.GPUShaderModule,entryPoint:"main",buffers:r._geometry.vertexState.vertexBuffers},fragment:{module:r._material.fShaderModule.GPUShaderModule,entryPoint:"main",targets:[{format:navigator.gpu.getPreferredCanvasFormat(t.adapter),blend:{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},alpha:{srcFactor:"src-alpha",dstFactor:"one",operation:"add"}}},{format:"rgba16float"}]},primitive:{topology:r._primitiveTopology,cullMode:r._cullMode,frontFace:"ccw"},depthStencil:{format:"depth24plus-stencil8",depthWriteEnabled:r._depthWriteEnabled,depthCompare:r._depthCompare},multisample:{count:4}};"line-strip"!==r._primitiveTopology&&"triangle-strip"!==r._primitiveTopology||(i.primitive.stripIndexFormat="uint32"),this.GPURenderPipeline=n.createRenderPipeline(i)}}var _r=new WeakMap;class xr{constructor(t){ze(this,_r,{writable:!0,value:[]})}get effectList(){return Oe(this,_r)}addEffect(t){Oe(this,_r).push(t)}removeEffect(t){Oe(this,_r).includes(t)?Oe(this,_r).splice(Oe(this,_r).indexOf(t),1):Je.throwFunc(`removeEffect - Attempt to delete an object that does not exist. - inputValue : ${t} { type : ${typeof t} }`)}}let yr=function(t){if(t.length){let e=t.shift();e.info[e.type].call(e.info.target,{target:e.info.target,type:"out"})}};var Tr=new WeakMap,Ur=new WeakMap,Sr=new WeakMap,Mr=new WeakMap,br=new WeakMap,Pr=new WeakMap;class wr extends ke{constructor(t){super(),ze(this,Tr,{writable:!0,value:void 0}),ze(this,Ur,{writable:!0,value:void 0}),ze(this,Sr,{writable:!0,value:[]}),ze(this,Mr,{writable:!0,value:void 0}),ze(this,br,{writable:!0,value:void 0}),ze(this,Pr,{writable:!0,value:[]}),Ve(this,"checkMouseEvent",(function(t,e){let r,n;for(r=0,n=Oe(this,Pr).length;r<n;r++){let n,i,o=Oe(this,Pr)[r];e&&(n=wr.mouseMAP[e]),n?(o.type==t.detector.down&&(i="down",i&&n[i]&&n[i].call(n.target,{target:n.target,type:i,nativeEvent:o.nativeEvent})),o.type==t.detector.up&&(i="up",i&&n[i]&&n[i].call(n.target,{target:n.target,type:i,nativeEvent:o.nativeEvent})),Oe(this,br)&&Oe(this,br)!=n&&(i="out",i&&Oe(this,br)[i]&&Oe(this,br)[i].call(Oe(this,br).target,{target:Oe(this,br).target,type:i})),Oe(this,br)!=n&&(i="over",i&&n[i]&&n[i].call(n.target,{target:n.target,type:i,nativeEvent:o.nativeEvent})),Ye(this,br,n)):(i="out",Oe(this,br)&&Oe(this,br)[i]&&Oe(this,Sr).push({info:Oe(this,br),type:i,nativeEvent:o.nativeEvent}),Ye(this,br,null)),yr(Oe(this,Sr))}Oe(this,br)?this.cursorState="pointer":this.cursorState="default",Oe(this,Pr).length=0})),Ve(this,"check",t=>(Oe(this,Tr)||(Ye(this,Tr,Oe(this,Mr).readPixelArrayBuffer(t,Oe(this,Mr),Oe(this,Mr).baseAttachment_mouseColorID_depth_ResolveTarget,Oe(this,Mr).mouseX,Oe(this,Mr).mouseY)),Oe(this,Tr).then(e=>{const{Float16Array:r}=Gr;Ye(this,Tr,null),Ye(this,Ur,Math.round(new r(e||new ArrayBuffer(256))[0])),this.checkMouseEvent(t,Oe(this,Ur))})),this.cursorState)),Ye(this,Mr,t)}get mouseEventInfo(){return Oe(this,Pr)}}
/*! @petamoriken/float16 v3.6.3 | MIT License - https://git.io/float16 */Ve(wr,"mouseMAP",{});const Gr=function(t){const e="This constructor is not a subclass of Float16Array",r="The constructor property value is not an object",n="Attempting to access detached ArrayBuffer",i="Cannot convert undefined or null to object",o="Cannot convert a BigInt value to a number",a="Cannot mix BigInt and other types, use explicit conversions",s="@@iterator property is not callable",u="Reduce of empty array with no initial value",l="Offset is out of bounds";function f(t){return(e,...r)=>c(t,e,r)}function m(t,e){return f(v(t,e).get)}const{apply:c,construct:h,defineProperty:d,get:p,getOwnPropertyDescriptor:v,getPrototypeOf:g,has:_,ownKeys:x,set:y,setPrototypeOf:T}=Reflect,U=Proxy,S=Number,{isFinite:M,isNaN:b}=S,{iterator:P,species:w,toStringTag:G,for:E}=Symbol,B=Object,{create:C,defineProperty:L,freeze:R,is:D}=B,I=B.prototype,N=I.__lookupGetter__?f(I.__lookupGetter__):(t,e)=>{if(null==t)throw Et(i);let r=B(t);do{const t=v(r,e);if(void 0!==t)return A(t,"get")?t.get:void 0}while(null!==(r=g(r)))},A=B.hasOwn||f(I.hasOwnProperty),F=Array,V=F.isArray,O=F.prototype,Y=f(O.join),X=f(O.push),z=f(O.toLocaleString),$=O[P],k=f($),q=Math.trunc,W=ArrayBuffer,Z=W.isView,H=W.prototype,j=f(H.slice),J=m(H,"byteLength"),Q="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:null,K=Q&&m(Q.prototype,"byteLength"),tt=g(Uint8Array),et=tt.from,rt=tt.prototype,nt=rt[P],it=f(rt.keys),ot=f(rt.values),at=f(rt.entries),st=f(rt.set),ut=f(rt.reverse),lt=f(rt.fill),ft=f(rt.copyWithin),mt=f(rt.sort),ct=f(rt.slice),ht=f(rt.subarray),dt=m(rt,"buffer"),pt=m(rt,"byteOffset"),vt=m(rt,"length"),gt=m(rt,G),_t=Uint16Array,xt=(...t)=>c(et,_t,t),yt=Uint32Array,Tt=Float32Array,Ut=g([][P]()),St=f(Ut.next),Mt=f(function*(){}().next),bt=g(Ut),Pt=DataView.prototype,wt=f(Pt.getUint16),Gt=f(Pt.setUint16),Et=TypeError,Bt=RangeError,Ct=WeakSet,Lt=Ct.prototype,Rt=f(Lt.add),Dt=f(Lt.has),It=WeakMap,Nt=It.prototype,At=f(Nt.get),Ft=f(Nt.has),Vt=f(Nt.set),Ot=new It,Yt=C(null,{next:{value:function(){const t=At(Ot,this);return St(t)}},[P]:{value:function(){return this}}});function Xt(t){if(t[P]===$)return t;const e=C(Yt);return Vt(Ot,e,k(t)),e}const zt=new It,$t=C(bt,{next:{value:function(){const t=At(zt,this);return Mt(t)},writable:!0,configurable:!0}});for(const t of x(Ut))"next"!==t&&L($t,t,v(Ut,t));function kt(t){const e=C($t);return Vt(zt,e,t),e}function qt(t){return null!==t&&"object"==typeof t||"function"==typeof t}function Wt(t){return null!==t&&"object"==typeof t}function Zt(t){return void 0!==gt(t)}function Ht(t){const e=gt(t);return"BigInt64Array"===e||"BigUint64Array"===e}function jt(t){if(null===Q)return!1;try{return K(t),!0}catch(t){return!1}}function Jt(t){return!!V(t)&&(t[P]===$||"Array Iterator"===t[P]()[G])}function Qt(t){if("string"!=typeof t)return!1;const e=S(t);return t===e+""&&!!M(e)&&e===q(e)}const Kt=E("__Float16Array__"),te=new W(4),ee=new Tt(te),re=new yt(te),ne=new yt(512),ie=new yt(512);for(let t=0;t<256;++t){const e=t-127;e<-27?(ne[t]=0,ne[256|t]=32768,ie[t]=24,ie[256|t]=24):e<-14?(ne[t]=1024>>-e-14,ne[256|t]=1024>>-e-14|32768,ie[t]=-e-1,ie[256|t]=-e-1):e<=15?(ne[t]=e+15<<10,ne[256|t]=e+15<<10|32768,ie[t]=13,ie[256|t]=13):e<128?(ne[t]=31744,ne[256|t]=64512,ie[t]=24,ie[256|t]=24):(ne[t]=31744,ne[256|t]=64512,ie[t]=13,ie[256|t]=13)}function oe(t){ee[0]=t;const e=re[0],r=e>>23&511;return ne[r]+((8388607&e)>>ie[r])}const ae=new yt(2048),se=new yt(64),ue=new yt(64);for(let t=1;t<1024;++t){let e=t<<13,r=0;for(;0==(8388608&e);)e<<=1,r-=8388608;e&=-8388609,r+=947912704,ae[t]=e|r}for(let t=1024;t<2048;++t)ae[t]=939524096+(t-1024<<13);for(let t=1;t<31;++t)se[t]=t<<23;se[31]=1199570944,se[32]=2147483648;for(let t=33;t<63;++t)se[t]=2147483648+(t-32<<23);se[63]=3347054592;for(let t=1;t<64;++t)32!==t&&(ue[t]=1024);function le(t){const e=t>>10;return re[0]=ae[ue[e]+(1023&t)]+se[e],ee[0]}const fe=S.MAX_SAFE_INTEGER;function me(t){if("bigint"==typeof t)throw Et(o);const e=S(t);return b(e)||0===e?0:q(e)}function ce(t){const e=me(t);return e<0?0:e<fe?e:fe}function he(t,e){if(!qt(t))throw Et("This is not an object");const n=t.constructor;if(void 0===n)return e;if(!qt(n))throw Et(r);const i=n[w];return null==i?e:i}function de(t){if(jt(t))return!1;try{return j(t,0,0),!1}catch(t){}return!0}function pe(t,e){const r=b(t),n=b(e);if(r&&n)return 0;if(r)return 1;if(n)return-1;if(t<e)return-1;if(t>e)return 1;if(0===t&&0===e){const r=D(t,0),n=D(e,0);if(!r&&n)return-1;if(r&&!n)return 1}return 0}const ve=new It;function ge(t){return Ft(ve,t)||!Z(t)&&function(t){if(!Wt(t))return!1;const e=g(t);if(!Wt(e))return!1;const n=e.constructor;if(void 0===n)return!1;if(!qt(n))throw Et(r);return _(n,Kt)}(t)}function _e(t){if(!ge(t))throw Et("This is not a Float16Array object")}function xe(t,e){const r=ge(t),n=Zt(t);if(!r&&!n)throw Et("Species constructor didn't return TypedArray object");if("number"==typeof e){let n;if(r){const e=ye(t);n=vt(e)}else n=vt(t);if(n<e)throw Et("Derived constructor created TypedArray object which was too small length")}if(Ht(t))throw Et(a)}function ye(t){const e=At(ve,t);if(void 0!==e){if(de(dt(e)))throw Et(n);return e}const r=t.buffer;if(de(r))throw Et(n);const i=h(Me,[r,t.byteOffset,t.length],t.constructor);return At(ve,i)}function Te(t){const e=vt(t),r=[];for(let n=0;n<e;++n)r[n]=le(t[n]);return r}const Ue=new Ct;for(const t of x(rt)){if(t===G)continue;const e=v(rt,t);A(e,"get")&&"function"==typeof e.get&&Rt(Ue,e.get)}const Se=R({get:(t,e,r)=>Qt(e)&&A(t,e)?le(p(t,e)):Dt(Ue,N(t,e))?p(t,e):p(t,e,r),set:(t,e,r,n)=>Qt(e)&&A(t,e)?y(t,e,oe(r)):y(t,e,r,n),getOwnPropertyDescriptor(t,e){if(Qt(e)&&A(t,e)){const r=v(t,e);return r.value=le(r.value),r}return v(t,e)},defineProperty:(t,e,r)=>Qt(e)&&A(t,e)&&A(r,"value")?(r.value=oe(r.value),d(t,e,r)):d(t,e,r)});class Me{constructor(t,e,r){let i;if(ge(t))i=h(_t,[ye(t)],new.target);else if(qt(t)&&!function(t){try{return J(t),!0}catch(t){return!1}}(t)){let e,r;if(Zt(t)){e=t,r=vt(t);const o=dt(t),s=jt(o)?W:he(o,W);if(de(o))throw Et(n);if(Ht(t))throw Et(a);const u=new s(2*r);i=h(_t,[u],new.target)}else{const n=t[P];if(null!=n&&"function"!=typeof n)throw Et(s);null!=n?Jt(t)?(e=t,r=t.length):(e=[...t],r=e.length):(e=t,r=ce(e.length)),i=h(_t,[r],new.target)}for(let t=0;t<r;++t)i[t]=oe(e[t])}else i=h(_t,arguments,new.target);const o=new U(i,Se);return Vt(ve,o,i),o}static from(t,...r){const n=this;if(!_(n,Kt))throw Et(e);if(n===Me){if(ge(t)&&0===r.length){const e=ye(t),r=new _t(dt(e),pt(e),vt(e));return new Me(dt(ct(r)))}if(0===r.length)return new Me(dt(xt(t,oe)));const e=r[0],n=r[1];return new Me(dt(xt(t,(function(t,...r){return oe(c(e,this,[t,...Xt(r)]))}),n)))}let o,a;const u=t[P];if(null!=u&&"function"!=typeof u)throw Et(s);if(null!=u)Jt(t)?(o=t,a=t.length):!Zt(l=t)||l[P]!==nt&&"Array Iterator"!==l[P]()[G]?(o=[...t],a=o.length):(o=t,a=vt(t));else{if(null==t)throw Et(i);o=B(t),a=ce(o.length)}var l;const f=new n(a);if(0===r.length)for(let t=0;t<a;++t)f[t]=o[t];else{const t=r[0],e=r[1];for(let r=0;r<a;++r)f[r]=c(t,e,[o[r],r])}return f}static of(...t){const r=this;if(!_(r,Kt))throw Et(e);const n=t.length;if(r===Me){const e=new Me(n),r=ye(e);for(let e=0;e<n;++e)r[e]=oe(t[e]);return e}const i=new r(n);for(let e=0;e<n;++e)i[e]=t[e];return i}keys(){_e(this);const t=ye(this);return it(t)}values(){_e(this);const t=ye(this);return kt(function*(){for(const e of ot(t))yield le(e)}())}entries(){_e(this);const t=ye(this);return kt(function*(){for(const[e,r]of at(t))yield[e,le(r)]}())}at(t){_e(this);const e=ye(this),r=vt(e),n=me(t),i=n>=0?n:r+n;if(!(i<0||i>=r))return le(e[i])}map(t,...e){_e(this);const r=ye(this),n=vt(r),i=e[0],o=he(r,Me);if(o===Me){const e=new Me(n),o=ye(e);for(let e=0;e<n;++e){const n=le(r[e]);o[e]=oe(c(t,i,[n,e,this]))}return e}const a=new o(n);xe(a,n);for(let e=0;e<n;++e){const n=le(r[e]);a[e]=c(t,i,[n,e,this])}return a}filter(t,...e){_e(this);const r=ye(this),n=vt(r),i=e[0],o=[];for(let e=0;e<n;++e){const n=le(r[e]);c(t,i,[n,e,this])&&X(o,n)}const a=new(he(r,Me))(o);return xe(a),a}reduce(t,...e){_e(this);const r=ye(this),n=vt(r);if(0===n&&0===e.length)throw Et(u);let i,o;0===e.length?(i=le(r[0]),o=1):(i=e[0],o=0);for(let e=o;e<n;++e)i=t(i,le(r[e]),e,this);return i}reduceRight(t,...e){_e(this);const r=ye(this),n=vt(r);if(0===n&&0===e.length)throw Et(u);let i,o;0===e.length?(i=le(r[n-1]),o=n-2):(i=e[0],o=n-1);for(let e=o;e>=0;--e)i=t(i,le(r[e]),e,this);return i}forEach(t,...e){_e(this);const r=ye(this),n=vt(r),i=e[0];for(let e=0;e<n;++e)c(t,i,[le(r[e]),e,this])}find(t,...e){_e(this);const r=ye(this),n=vt(r),i=e[0];for(let e=0;e<n;++e){const n=le(r[e]);if(c(t,i,[n,e,this]))return n}}findIndex(t,...e){_e(this);const r=ye(this),n=vt(r),i=e[0];for(let e=0;e<n;++e){const n=le(r[e]);if(c(t,i,[n,e,this]))return e}return-1}findLast(t,...e){_e(this);const r=ye(this),n=vt(r),i=e[0];for(let e=n-1;e>=0;--e){const n=le(r[e]);if(c(t,i,[n,e,this]))return n}}findLastIndex(t,...e){_e(this);const r=ye(this),n=vt(r),i=e[0];for(let e=n-1;e>=0;--e){const n=le(r[e]);if(c(t,i,[n,e,this]))return e}return-1}every(t,...e){_e(this);const r=ye(this),n=vt(r),i=e[0];for(let e=0;e<n;++e)if(!c(t,i,[le(r[e]),e,this]))return!1;return!0}some(t,...e){_e(this);const r=ye(this),n=vt(r),i=e[0];for(let e=0;e<n;++e)if(c(t,i,[le(r[e]),e,this]))return!0;return!1}set(t,...e){_e(this);const r=ye(this),o=me(e[0]);if(o<0)throw Bt(l);if(null==t)throw Et(i);if(Ht(t))throw Et(a);if(ge(t))return st(ye(this),ye(t),o);if(Zt(t)&&de(dt(t)))throw Et(n);const s=vt(r),u=B(t),f=ce(u.length);if(o===1/0||f+o>s)throw Bt(l);for(let t=0;t<f;++t)r[t+o]=oe(u[t])}reverse(){_e(this);const t=ye(this);return ut(t),this}fill(t,...e){_e(this);const r=ye(this);return lt(r,oe(t),...Xt(e)),this}copyWithin(t,e,...r){_e(this);const n=ye(this);return ft(n,t,e,...Xt(r)),this}sort(...t){_e(this);const e=ye(this),r=void 0!==t[0]?t[0]:pe;return mt(e,(t,e)=>r(le(t),le(e))),this}slice(...t){_e(this);const e=ye(this),r=he(e,Me);if(r===Me){const r=new _t(dt(e),pt(e),vt(e));return new Me(dt(ct(r,...Xt(t))))}const i=vt(e),o=me(t[0]),a=void 0===t[1]?i:me(t[1]);let s,u;s=o===-1/0?0:o<0?i+o>0?i+o:0:i<o?i:o,u=a===-1/0?0:a<0?i+a>0?i+a:0:i<a?i:a;const l=u-s>0?u-s:0,f=new r(l);if(xe(f,l),0===l)return f;if(de(dt(e)))throw Et(n);let m=0;for(;s<u;)f[m]=le(e[s]),++s,++m;return f}subarray(...t){_e(this);const e=ye(this),r=he(e,Me),n=new _t(dt(e),pt(e),vt(e)),i=ht(n,...Xt(t)),o=new r(dt(i),pt(i),vt(i));return xe(o),o}indexOf(t,...e){_e(this);const r=ye(this),n=vt(r);let i=me(e[0]);if(i===1/0)return-1;i<0&&(i+=n,i<0&&(i=0));for(let e=i;e<n;++e)if(A(r,e)&&le(r[e])===t)return e;return-1}lastIndexOf(t,...e){_e(this);const r=ye(this),n=vt(r);let i=e.length>=1?me(e[0]):n-1;if(i===-1/0)return-1;i>=0?i=i<n-1?i:n-1:i+=n;for(let e=i;e>=0;--e)if(A(r,e)&&le(r[e])===t)return e;return-1}includes(t,...e){_e(this);const r=ye(this),n=vt(r);let i=me(e[0]);if(i===1/0)return!1;i<0&&(i+=n,i<0&&(i=0));const o=b(t);for(let e=i;e<n;++e){const n=le(r[e]);if(o&&b(n))return!0;if(n===t)return!0}return!1}join(...t){_e(this);const e=Te(ye(this));return Y(e,...Xt(t))}toLocaleString(...t){_e(this);const e=Te(ye(this));return z(e,...Xt(t))}get[G](){if(ge(this))return"Float16Array"}}L(Me,"BYTES_PER_ELEMENT",{value:2}),L(Me,Kt,{}),T(Me,tt);const be=Me.prototype;return L(be,"BYTES_PER_ELEMENT",{value:2}),L(be,P,{value:be.values,writable:!0,configurable:!0}),T(be,rt),t.Float16Array=Me,t.getFloat16=function(t,e,...r){return le(wt(t,e,...Xt(r)))},t.hfround=function(t){if("bigint"==typeof t)throw Et(o);return t=S(t),M(t)&&0!==t?le(oe(t)):t},t.isFloat16Array=ge,t.isTypedArray=function(t){return Zt(t)||ge(t)},t.setFloat16=function(t,e,r,...n){return Gt(t,e,oe(r),...Xt(n))},Object.defineProperties(t,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}}),t}({});var Er=new WeakMap,Br=new WeakMap,Cr=new WeakMap,Lr=new WeakMap,Rr=new WeakMap,Dr=new WeakMap,Ir=new WeakMap,Nr=new WeakMap,Ar=new WeakMap,Fr=new WeakMap,Vr=new WeakMap;class Or extends ke{constructor(t,e,r){super(),Ve(this,"redGPUContext",void 0),ze(this,Er,{writable:!0,value:void 0}),ze(this,Br,{writable:!0,value:void 0}),Ve(this,"projectionMatrix",void 0),ze(this,Cr,{writable:!0,value:"100%"}),ze(this,Lr,{writable:!0,value:"100%"}),ze(this,Rr,{writable:!0,value:[]}),Ve(this,"systemUniformInfo_vertex",void 0),Ve(this,"systemUniformInfo_fragment",void 0),ze(this,Dr,{writable:!0,value:void 0}),ze(this,Ir,{writable:!0,value:void 0}),Ve(this,"baseAttachment",void 0),Ve(this,"baseAttachmentView",void 0),Ve(this,"baseAttachment_ResolveTarget",void 0),Ve(this,"baseAttachment_ResolveTargetView",void 0),Ve(this,"baseAttachment_mouseColorID_depth",void 0),Ve(this,"baseAttachment_mouseColorID_depthView",void 0),Ve(this,"baseAttachment_mouseColorID_depth_ResolveTarget",void 0),Ve(this,"baseAttachment_mouseColorID_depth_ResolveTargetView",void 0),Ve(this,"baseDepthStencilAttachment",void 0),Ve(this,"baseDepthStencilAttachmentView",void 0),ze(this,Nr,{writable:!0,value:void 0}),Ve(this,"debugLightList",[]),Ve(this,"mouseX",0),Ve(this,"mouseY",0),ze(this,Ar,{writable:!0,value:void 0}),Ve(this,"_x",0),Ve(this,"_y",0),Ve(this,"_useFrustumCulling",!0),ze(this,Fr,{writable:!0,value:function(t){let e=qe.mat4+qe.mat4+qe.float32x2+qe.float32x2;const r={size:e,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST},n={entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}}]};let i,o,a,s;return Ye(this,Dr,new Float32Array(e/Float32Array.BYTES_PER_ELEMENT)),s={layout:o=t.createBindGroupLayout(n),entries:[{binding:0,resource:{buffer:i=t.createBuffer(r),offset:0,size:e}}]},a=t.createBindGroup(s),{GPUBuffer:i,GPUBindGroupLayout:o,GPUBindGroup:a}}}),ze(this,Vr,{writable:!0,value:function(t){let e=qe.float32x4+2*qe.float32x4*rr.MAX_DIRECTIONAL_LIGHT+3*qe.float32x4*rr.MAX_POINT_LIGHT+qe.float32x4*qe.float32x4+3*qe.float32x4*rr.MAX_SPOT_LIGHT+qe.float32x2+qe.float32x4;const r={size:e,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST},n={entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}]};let i,o,a,s;return Ye(this,Ir,new Float32Array(e/Float32Array.BYTES_PER_ELEMENT)),s={layout:o=t.createBindGroupLayout(n),entries:[{binding:0,resource:{buffer:i=t.createBuffer(r),offset:0,size:e}}]},a=t.createBindGroup(s),{GPUBuffer:i,GPUBindGroupLayout:o,GPUBindGroup:a}}}),Ve(this,"readPixelArrayBuffer",async(t,e,r,n=0,i=0,o=1,a=1)=>{let s=e.viewRect;if(n>0&&n<s[2]&&i>0&&i<s[3]){let e,s,u,l,f;return e=t.device.createCommandEncoder(),s=t.device.createBuffer({size:16*o*a,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),u={texture:r,origin:{x:n,y:i,z:0}},l={buffer:s,bytesPerRow:Math.max(256,4*o*a),rowsPerImage:1},f={width:o,height:a,depthOrArrayLayers:1},e.copyTextureToBuffer(u,l,f),t.device.queue.submit([e.finish()]),s=t.device.createBuffer({mappedAtCreation:!0,size:16*o*a,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),new Promise(t=>{l.buffer.mapAsync(GPUMapMode.READ).then(e=>{const r=l.buffer.getMappedRange();s.unmap(),s.destroy(),s=null,t(r)})})}}),this.redGPUContext=t,this.camera=r,this.scene=e,this.systemUniformInfo_vertex=Oe(this,Fr).call(this,t.device),this.systemUniformInfo_fragment=Oe(this,Vr).call(this,t.device),this.projectionMatrix=Fe.mat4.create(),Ye(this,Nr,new xr(t)),Ye(this,Ar,new wr(this))}get x(){return this._x}get y(){return this._y}get useFrustumCulling(){return this._useFrustumCulling}set useFrustumCulling(t){this._useFrustumCulling=t}get mouseEventChecker(){return Oe(this,Ar)}get postEffect(){return Oe(this,Nr)}get scene(){return Oe(this,Er)}set scene(t){Ye(this,Er,t)}get camera(){return Oe(this,Br)}set camera(t){Ye(this,Br,t)}get width(){return Oe(this,Cr)}get height(){return Oe(this,Lr)}get viewRect(){return Oe(this,Rr)}resetTexture(t){Ye(this,Rr,this.getViewRect(t));let e={colorAttachments:[{key:"baseAttachment",format:t.swapChainFormat,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING,resolveUsage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING},{key:"baseAttachment_mouseColorID_depth",format:"rgba16float",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING,resolveUsage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING}],depthStencilAttachment:{key:"baseDepthStencilAttachment",format:"depth24plus-stencil8",usage:GPUTextureUsage.RENDER_ATTACHMENT}},r={width:Oe(this,Rr)[2],height:Oe(this,Rr)[3],depthOrArrayLayers:1};[...e.colorAttachments,e.depthStencilAttachment].forEach(e=>{let n=e.key,i=e.format,o=e.usage,a=e.resolveUsage;this[n]&&(this[n].destroy(),a&&this[n+"_ResolveTarget"].destroy()),this[n]=t.device.createTexture({size:r,sampleCount:4,format:i,usage:o}),this[n+"View"]=this[n].createView(),a&&(this[n+"_ResolveTarget"]=t.device.createTexture({size:r,sampleCount:1,format:i,usage:a}),this[n+"_ResolveTargetView"]=this[n+"_ResolveTarget"].createView())})}updateSystemUniform(t,e){let r,n,i,o,a,s;for(r=this.systemUniformInfo_vertex,n=this.systemUniformInfo_fragment,Ye(this,Rr,this.getViewRect(e)),o=0,i=Math.abs(Oe(this,Rr)[2]/Oe(this,Rr)[3]),this.camera.hasOwnProperty("farClipping")?Fe.mat4.perspective(this.projectionMatrix,Math.PI/180*this.camera.fov,i,this.camera.nearClipping,this.camera.farClipping):(Fe.mat4.ortho(this.projectionMatrix,0,1,0,1,-1e3,1e3),Fe.mat4.scale(this.projectionMatrix,this.projectionMatrix,[1/Oe(this,Rr)[2],1/Oe(this,Rr)[3],1]),Fe.mat4.translate(this.projectionMatrix,this.projectionMatrix,[0,Oe(this,Rr)[3],0])),Oe(this,Dr).set(this.projectionMatrix,o),o+=qe.mat4/Float32Array.BYTES_PER_ELEMENT,Oe(this,Dr).set(this.camera.matrix,o),o+=qe.mat4/Float32Array.BYTES_PER_ELEMENT,Oe(this,Dr).set([Oe(this,Rr)[2],Oe(this,Rr)[3],performance.now()],o),o+=qe.float32x2/Float32Array.BYTES_PER_ELEMENT,o=0,Oe(this,Ir).set([this.scene.directionalLightList.length,this.scene.pointLightList.length,this.scene.spotLightList.length],o),this.debugLightList.length=0,a=0,o=qe.float32x4/Float32Array.BYTES_PER_ELEMENT,s=this.scene.directionalLightList.length;a<s;a++){let t=this.scene.directionalLightList[a];t&&(Oe(this,Ir).set(t._colorRGBA,o),o+=qe.float32x4/Float32Array.BYTES_PER_ELEMENT,Oe(this,Ir).set([t._x,t._y,t._z,t._intensity],o),o+=qe.float32x4/Float32Array.BYTES_PER_ELEMENT,t.useDebugMesh&&this.debugLightList.push(t._debugMesh))}for(o=(qe.float32x4+2*qe.float32x4*rr.MAX_DIRECTIONAL_LIGHT)/Float32Array.BYTES_PER_ELEMENT,a=0,s=this.scene.pointLightList.length;a<s;a++){let t=this.scene.pointLightList[a];t&&(Oe(this,Ir).set(t._colorRGBA,o),o+=qe.float32x4/Float32Array.BYTES_PER_ELEMENT,Oe(this,Ir).set([t._x,t._y,t._z,t._intensity],o),o+=qe.float32x4/Float32Array.BYTES_PER_ELEMENT,Oe(this,Ir).set([t._radius],o),o+=qe.float32x4/Float32Array.BYTES_PER_ELEMENT,t.useDebugMesh&&this.debugLightList.push(t._debugMesh))}o=(qe.float32x4+2*qe.float32x4*rr.MAX_DIRECTIONAL_LIGHT+3*qe.float32x4*rr.MAX_POINT_LIGHT)/Float32Array.BYTES_PER_ELEMENT;let u=this.scene.ambientLight;for(Oe(this,Ir).set(u?u._colorRGBA:[0,0,0,0],o),o+=qe.float32x4/Float32Array.BYTES_PER_ELEMENT,Oe(this,Ir).set([u?u._intensity:1],o),o+=qe.float32x4/Float32Array.BYTES_PER_ELEMENT,a=0,s=this.scene.spotLightList.length;a<s;a++){let t=this.scene.spotLightList[a];t&&(Oe(this,Ir).set(t._colorRGBA,o),o+=qe.float32x4/Float32Array.BYTES_PER_ELEMENT,Oe(this,Ir).set([t._x,t._y,t._z,t._intensity],o),o+=qe.float32x4/Float32Array.BYTES_PER_ELEMENT,Oe(this,Ir).set([t.cutoff,t.exponent],o),o+=qe.float32x4/Float32Array.BYTES_PER_ELEMENT,t.useDebugMesh&&this.debugLightList.push(t._debugMesh.children))}o=(qe.float32x4+2*qe.float32x4*rr.MAX_DIRECTIONAL_LIGHT+3*qe.float32x4*rr.MAX_POINT_LIGHT+2*qe.float32x4+3*qe.float32x4*rr.MAX_SPOT_LIGHT)/Float32Array.BYTES_PER_ELEMENT,Oe(this,Ir).set([+Oe(this,Rr)[2],+Oe(this,Rr)[3]],o),o+=qe.float32x4/Float32Array.BYTES_PER_ELEMENT,Oe(this,Ir).set([this.camera.x,this.camera.y,this.camera.z],o),t.setBindGroup(0,r.GPUBindGroup),t.setBindGroup(1,n.GPUBindGroup),e.device.queue.writeBuffer(r.GPUBuffer,0,Oe(this,Dr)),e.device.queue.writeBuffer(n.GPUBuffer,0,Oe(this,Ir))}getViewRect(t){return["number"==typeof this.x?this.x:parseInt(this.x)/100*t.canvas.width/devicePixelRatio,"number"==typeof this.y?this.y:parseInt(this.y)/100*t.canvas.height/devicePixelRatio,"number"==typeof this.width?this.width:parseInt(parseInt(this.width)/100*t.canvas.width/devicePixelRatio),"number"==typeof this.height?this.height:parseInt(parseInt(this.height)/100*t.canvas.height/devicePixelRatio)]}setSize(t=Oe(this,Cr),e=Oe(this,Lr)){let r=Oe(this,Rr).toString();"number"==typeof t?Ye(this,Cr,t<1?1:parseInt(t)):t.includes("%")&&+t.replace("%","")>=0?Ye(this,Cr,t):Je.throwFunc("View setSize : width는 0이상의 숫자나 %만 허용.",t),"number"==typeof e?Ye(this,Lr,e<1?1:parseInt(e)):e.includes("%")&&+e.replace("%","")>=0?Ye(this,Lr,e):Je.throwFunc("View setSize : height는 0이상의 숫자나 %만 허용.",e),this.getViewRect(this.redGPUContext).toString()!=r&&this.resetTexture(this.redGPUContext)}setLocation(t=this._x,e=this._y){"number"==typeof t?this._x=parseInt(t):t.includes("%")&&+t.replace("%","")>=0?this._x=t:Je.throwFunc("View setLocation : x는 0이상의 숫자나 %만 허용.",t),"number"==typeof e?this._y=parseInt(e):e.includes("%")&&+e.replace("%","")>=0?this._y=e:Je.throwFunc("View setLocation : y는 0이상의 숫자나 %만 허용.",e),this.getViewRect(this.redGPUContext)}computeViewFrustumPlanes(){let t=Fe.mat4.create();Fe.mat4.multiply(t,this.projectionMatrix,this.camera.matrix);let e=[];e[0]=[t[3]-t[0],t[7]-t[4],t[11]-t[8],t[15]-t[12]],e[1]=[t[3]+t[0],t[7]+t[4],t[11]+t[8],t[15]+t[12]],e[2]=[t[3]+t[1],t[7]+t[5],t[11]+t[9],t[15]+t[13]],e[3]=[t[3]-t[1],t[7]-t[5],t[11]-t[9],t[15]-t[13]],e[4]=[t[3]-t[2],t[7]-t[6],t[11]-t[10],t[15]-t[14]],e[5]=[t[3]+t[2],t[7]+t[6],t[11]+t[10],t[15]+t[14]];for(let t=0;t<e.length;t++){let r=e[t],n=Math.sqrt(r[0]*r[0]+r[1]*r[1]+r[2]*r[2]);r[0]/=n,r[1]/=n,r[2]/=n,r[3]/=n}return e}}const Yr=[];let Xr=0,zr=0,$r=new Float32Array(1);const kr=new Qe([{size:qe.mat4*rr.MESH_UNIFORM_POOL_NUM,valueName:"matrix"},{size:qe.mat4*rr.MESH_UNIFORM_POOL_NUM,valueName:"normalMatrix"}]);let qr=0;var Wr=new WeakMap,Zr=new WeakMap;class Hr extends pr{constructor(t){super(),Ve(this,"dirtyTransform",!0),Ve(this,"dirtyPipeline",!0),Ve(this,"_redGPUContext",void 0),Ve(this,"pipeline",void 0),ze(this,Wr,{writable:!0,value:void 0}),ze(this,Zr,{writable:!0,value:0}),Ve(this,"localToWorld",(t=>{let e;return e=Fe.mat4.create(),function(t=0,r=0,n=0){return"number"==typeof t||Je.throwFunc("BaseObject3D - localToWorld : x - number만 허용함","입력값 : ",t),"number"==typeof r||Je.throwFunc("BaseObject3D - localToWorld : y - number만 허용함","입력값 : ",r),"number"==typeof n||Je.throwFunc("BaseObject3D - localToWorld : z - number만 허용함","입력값 : ",n),e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t,e[13]=r,e[14]=n,e[15]=1,Fe.mat4.multiply(e,this.matrix,e),[e[12],e[13],e[14]]}})()),Ve(this,"worldToLocal",(t=>{let e,r;return e=Fe.mat4.create(),r=Fe.mat4.create(),function(t=0,n=0,i=0){return"number"==typeof t||Je.throwFunc("BaseObject3D - worldToLocal : x - number만 허용함","입력값 : ",t),"number"==typeof n||Je.throwFunc("BaseObject3D - worldToLocal : y - number만 허용함","입력값 : ",n),"number"==typeof i||Je.throwFunc("BaseObject3D - worldToLocal : z - number만 허용함","입력값 : ",i),Fe.mat4.invert(e,this.matrix),Fe.mat4.transpose(e,e),Fe.mat4.multiply(r,e,this.matrix),[r[0]*t+r[1]*n+r[2]*i+r[3],r[4]*t+r[5]*n+r[6]*i+r[7],r[8]*t+r[9]*n+r[10]*i+r[11]]}})()),Ve(this,"getScreenPoint",(t=>{let e,r,n,i=Fe.mat4.create(),o=Fe.mat4.create();return n={x:0,y:0,z:0,w:0},function(t,a=0,s=0,u=0){let l=this.localToWorld(a,s,u);return o[0]=1,o[1]=0,o[2]=0,o[3]=0,o[4]=0,o[5]=1,o[6]=0,o[7]=0,o[8]=0,o[9]=0,o[10]=1,o[11]=0,o[12]=l[0],o[13]=l[1],o[14]=l[2],o[15]=1,t instanceof Or||Je.throwFunc("BaseObject3D - getScreenPoint : redView - RedView Instance 만 허용함","입력값 : ",t),e=t.camera,r=t.viewRect,Fe.mat4.multiply(i,t.projectionMatrix,e.matrix),Fe.mat4.multiply(i,i,o),n.x=i[12],n.y=i[13],n.z=i[14],n.w=i[15],n.x=.5*n.x/n.w+.5,n.y=.5*n.y/n.w+.5,[(r[0]+n.x*r[2])/window.devicePixelRatio,(r[1]+(1-n.y)*r[3])/window.devicePixelRatio]}})()),Ve(this,"_x",0),Ve(this,"_y",0),Ve(this,"_z",0),Ve(this,"_pivotX",0),Ve(this,"_pivotY",0),Ve(this,"_pivotZ",0),Ve(this,"_rotationX",0),Ve(this,"_rotationY",0),Ve(this,"_rotationZ",0),Ve(this,"targetTo",(t=>{let e=new Float32Array([0,1,0]),r=[],n=[],i=Fe.mat4.create();return function(t,o,a){r[0]=t,r[1]=o,r[2]=a,Fe.mat4.identity(i),Fe.mat4.targetTo(i,[this._x,this._y,this._z],r,e),n=Je.mat4ToEuler(i,[]),this._rotationX=180*-n[0]/Math.PI,this._rotationY=180*-n[1]/Math.PI,this._rotationZ=180*-n[2]/Math.PI,this.dirtyTransform=!0}})()),Ve(this,"_scaleX",1),Ve(this,"_scaleY",1),Ve(this,"_scaleZ",1),Ve(this,"_material",void 0),Ve(this,"_geometry",void 0),Ve(this,"_depthWriteEnabled",!0),Ve(this,"_depthCompare","less-equal"),Ve(this,"_cullMode","back"),Ve(this,"_primitiveTopology","triangle-list"),Ve(this,"_blendColorSrc","src-alpha"),Ve(this,"_blendColorDst","one-minus-src-alpha"),Ve(this,"_blendAlphaSrc","one"),Ve(this,"_blendAlphaDst","one-minus-src-alpha"),Ve(this,"_renderDrawLayerIndex",Wi.DRAW_LAYER_INDEX0),Ve(this,"_sumOpacity",1),Ve(this,"_opacity",1),this._redGPUContext=t;let e=function(t,e){let r;Yr[zr]||(r=new dr(t),r.setBuffer(kr),Yr[zr]=r),r=Yr[zr];let n={float32Array:r.float32Array,uniformBuffer_meshMatrix:r,offsetMatrix:qe.mat4*Xr,offsetNormalMatrix:qe.mat4*rr.MESH_UNIFORM_POOL_NUM+qe.mat4*Xr,uniformIndex:Xr};return Xr++,Xr==rr.MESH_UNIFORM_POOL_NUM&&(zr++,Xr=0),n}(t);this.uniformBuffer_meshMatrix=e.uniformBuffer_meshMatrix,this.uniformBuffer_meshMatrix.meshFloat32Array=e.float32Array,this.offsetMatrix=e.offsetMatrix,this.offsetNormalMatrix=e.offsetNormalMatrix,qr++,Ye(this,Zr,qr),this.uniformBuffer_mesh=new dr(t),this.uniformBuffer_mesh.setBuffer(Hr.uniformBufferDescriptor_meshIndex),t.device.queue.writeBuffer(this.uniformBuffer_mesh.GPUBuffer,0,new Float32Array([e.uniformIndex])),t.device.queue.writeBuffer(this.uniformBuffer_mesh.GPUBuffer,qe.float32,new Float32Array([Oe(this,Zr)])),this.sumOpacity=1,Ye(this,Wr,[{binding:0,resource:{buffer:this.uniformBuffer_meshMatrix.GPUBuffer,offset:0,size:this.uniformBuffer_meshMatrix.uniformBufferDescriptor.size}},{binding:1,resource:{buffer:this.uniformBuffer_mesh.GPUBuffer,offset:0,size:this.uniformBuffer_mesh.uniformBufferDescriptor.size}}]),this.GPUBindGroupLayout=t.device.createBindGroupLayout(Hr.uniformsBindGroupLayoutDescriptor_mesh),this.GPUBindGroup=this._redGPUContext.device.createBindGroup({layout:this.GPUBindGroupLayout,entries:Oe(this,Wr)}),this.pipeline=new gr(t,this),this.normalMatrix=Fe.mat4.create(),this.matrix=Fe.mat4.create(),this.localMatrix=Fe.mat4.create()}get x(){return this._x}set x(t){this._x=t,this.dirtyTransform=!0}get y(){return this._y}set y(t){this._y=t,this.dirtyTransform=!0}get z(){return this._z}set z(t){this._z=t,this.dirtyTransform=!0}get pivotX(){return this._pivotX}set pivotX(t){this._pivotX=t,this.dirtyTransform=!0}get pivotY(){return this._pivotY}set pivotY(t){this._pivotY=t,this.dirtyTransform=!0}get pivotZ(){return this._pivotZ}set pivotZ(t){this._pivotZ=t,this.dirtyTransform=!0}get rotationX(){return this._rotationX}set rotationX(t){this._rotationX=t,this.dirtyTransform=!0}get rotationY(){return this._rotationY}set rotationY(t){this._rotationY=t,this.dirtyTransform=!0}get rotationZ(){return this._rotationZ}set rotationZ(t){this._rotationZ=t,this.dirtyTransform=!0}get scaleX(){return this._scaleX}set scaleX(t){this._scaleX=t,this.dirtyTransform=!0}get scaleY(){return this._scaleY}set scaleY(t){this._scaleY=t,this.dirtyTransform=!0}get scaleZ(){return this._scaleZ}set scaleZ(t){this._scaleZ=t,this.dirtyTransform=!0}get material(){return this._material}set material(t){this._material=t,this.dirtyPipeline=!0}get geometry(){return this._geometry}set geometry(t){this._geometry=t,this.dirtyPipeline=!0}get depthWriteEnabled(){return this._depthWriteEnabled}set depthWriteEnabled(t){this.dirtyPipeline=!0,this._depthWriteEnabled=t}get depthCompare(){return this._depthCompare}set depthCompare(t){this.dirtyPipeline=!0,this._depthCompare=t}get cullMode(){return this._cullMode}set cullMode(t){this.dirtyPipeline=!0,this._cullMode=t}get primitiveTopology(){return this._primitiveTopology}set primitiveTopology(t){this.dirtyPipeline=!0,this._primitiveTopology=t}get blendColorSrc(){return this._blendColorSrc}set blendColorSrc(t){this._blendColorSrc=t,this.dirtyPipeline=!0}get blendColorDst(){return this._blendColorDst}set blendColorDst(t){this._blendColorDst=t,this.dirtyPipeline=!0}get blendAlphaSrc(){return this._blendAlphaSrc}set blendAlphaSrc(t){this._blendAlphaSrc=t,this.dirtyPipeline=!0}get blendAlphaDst(){return this._blendAlphaDst}set blendAlphaDst(t){this._blendAlphaDst=t,this.dirtyPipeline=!0}get renderDrawLayerIndex(){return this._renderDrawLayerIndex}set renderDrawLayerIndex(t){this._renderDrawLayerIndex=t}get sumOpacity(){return this._sumOpacity}set sumOpacity(t){this._sumOpacity=t,$r[0]=this._sumOpacity,this._redGPUContext.device.queue.writeBuffer(this.uniformBuffer_mesh.GPUBuffer,qe.float32x2,$r)}get opacity(){return this._opacity}set opacity(t){this._opacity=t}getPosition(){return[this._x,this._y,this._z]}setPosition(t,e,r){this._x=t,this._y=e,this._z=r,this.dirtyTransform=!0}getPivotPosition(){return[this._pivotX,this._pivotY,this._pivotZ]}setPivotPosition(t,e,r){this._pivotX=t,this._pivotY=e,this._pivotZ=r,this.dirtyTransform=!0}getRotation(){return[this._rotationX,this._rotationY,this._rotationZ]}setRotation(t,e,r){this._rotationX=t,this._rotationY=e,this._rotationZ=r,this.dirtyTransform=!0}getScale(){return[this._scaleX,this._scaleY,this._scaleZ]}setScale(t,e,r){this._scaleX=t,this._scaleY=e,this._scaleZ=r,this.dirtyTransform=!0}addEventListener(t,e){wr.mouseMAP[Oe(this,Zr)]||(wr.mouseMAP[Oe(this,Zr)]={target:this}),wr.mouseMAP[Oe(this,Zr)][t]=e}removeEventListener(t){wr.mouseMAP[Oe(this,Zr)]&&(wr.mouseMAP[Oe(this,Zr)][t]=null)}}Ve(Hr,"uniformsBindGroupLayoutDescriptor_mesh",{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}}]}),Ve(Hr,"uniformBufferDescriptor_meshIndex",new Qe([{size:qe.float32,valueName:"meshUniformIndex"},{size:qe.float32,valueName:"mouseColorID"},{size:qe.float32,valueName:"sumOpacity"}]));class jr extends Hr{constructor(t,e,r){super(t),this.geometry=e,this.material=r}}var Jr=new WeakMap;class Qr extends ke{constructor(){super(),ze(this,Jr,{writable:!0,value:[]}),Ve(this,"_GPUTexture",void 0),Ve(this,"_GPUTextureView",void 0)}get GPUTexture(){return this._GPUTexture}get GPUTextureView(){return this._GPUTextureView}resolve(t){this._GPUTexture=t,this instanceof en?this._GPUTextureView=t?t.createView():null:(this._GPUTexture=t,t._GPUTextureView?this._GPUTextureView=t._GPUTextureView:t._GPUTextureView=this._GPUTextureView=t?t.createView({format:"rgba8unorm",dimension:"cube",aspect:"all",baseMipLevel:0,mipLevelCount:this.mipMaps+1,baseArrayLayer:0,arrayLayerCount:6}):null);let e=Oe(this,Jr).length;for(;e--;){let t=Oe(this,Jr)[e];t[0][t[1]]=this}Oe(this,Jr).length=0}addUpdateTarget(t,e){Oe(this,Jr).push([t,e])}}let Kr;const tn=new Map;class en extends Qr{constructor(t,e,r,n=!0,i,o){if(super(),Kr||(Kr=new ir(t)),this.sampler=r||Kr,this.onload=i,this.onerror=o,this.mapKey=e+n+this.sampler.string,this.useMipmap=n,e){let r=this;if(tn.get(r.mapKey))r.resolve(tn.get(r.mapKey)),r.onload&&r.onload(r);else{const{device:i}=t;fetch(e).then(t=>t.blob().then(t=>createImageBitmap(t,{premultiplyAlpha:"none"}))).then(async t=>{n&&(r.mipMaps=Math.floor(Math.log2(Math.max(t.width,t.height)))+1);const o=await function(t,e,r=!0,n){const i={size:{width:e.width,height:e.height},format:"rgba8unorm",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:n};r&&(i.mipLevelCount=Math.floor(Math.log2(Math.max(e.width,e.height)))+1,i.usage|=GPUTextureUsage.RENDER_ATTACHMENT);const o=t.createTexture(i);t.queue.copyExternalImageToTexture({source:e},{texture:o},i.size),r&&((t,e,r)=>{const n=t.createShaderModule({code:"\nvar<private> pos:array<vec2<f32>,4> = array<vec2<f32>,4>(\n    vec2<f32>(-1.0, 1.0), vec2<f32>(1.0, 1.0),\n    vec2<f32>(-1.0, -1.0), vec2<f32>(1.0, -1.0)\n);\n\nstruct VertexOutput {\n    @builtin(position) position : vec4<f32>,\n    @location(0) texCoord : vec2<f32>,\n};\n\n@vertex\nfn main(@builtin(vertex_index) vertexIndex : u32) -> VertexOutput {\n    var output : VertexOutput;\n    output.texCoord = pos[vertexIndex] * vec2<f32>(0.5, -0.5) + vec2<f32>(0.5);\n    output.position = vec4<f32>(pos[vertexIndex], 0.0, 1.0);\n    return output;\n}\n\n",label:"vertex_generateWebGPUTextureMipmap"}),i=t.createShaderModule({code:"\n@binding(0) @group(0) var imgSampler : sampler;\n@binding(1) @group(0) var img : texture_2d<f32>;\n@fragment\nfn main(@location(0) texCoord : vec2<f32>) -> @location(0) vec4<f32> {\n    return textureSample(img, imgSampler, texCoord);\n}\n",label:"fragment_generateWebGPUTextureMipmap"}),o={layout:t.createPipelineLayout({bindGroupLayouts:[t.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{}}]})]}),vertex:{module:n,entryPoint:"main"},fragment:{module:i,entryPoint:"main",targets:[{format:r.format}]},primitive:{topology:"triangle-strip",stripIndexFormat:"uint32"}},a=t.createRenderPipeline(o),s=t.createSampler({minFilter:"linear"});let u=e.createView({baseMipLevel:0,mipLevelCount:1});const l=t.createCommandEncoder({});for(let n=1;n<r.mipLevelCount;++n){const r=e.createView({baseMipLevel:n,mipLevelCount:1}),i=l.beginRenderPass({colorAttachments:[{view:r,clearValue:{r:0,g:0,b:0,a:0},loadOp:"clear",storeOp:"store"}]}),o=t.createBindGroup({layout:a.getBindGroupLayout(0),entries:[{binding:0,resource:s},{binding:1,resource:u}]});i.setPipeline(a),i.setBindGroup(0,o),i.draw(4),i.end(),u=r}t.queue.submit([l.finish()])})(t,o,i);return o}(i,t,n,e);tn.set(r.mapKey,o),r.resolve(o),r.onload&&r.onload(r)}).catch(t=>{r.resolve(null),r.onerror&&r.onerror(r)})}}else;}}function rn(t){return new Worker(URL.createObjectURL(new Blob([`(${t})()`],{type:"application/javascript"})))}const nn=rn(async()=>{let t=(t=>{let e=function(){let t;return function(e){for(--e,t=1;t<32;t<<=1)e|=e>>t;return e+1}}();return t=>{const r=t.src;let n;fetch(r,{mode:"cors"}).then(t=>{if(n={url:t.url,ok:t.ok,status:t.status,statusText:t.statusText,type:t.type},!t.ok)throw Error("error");t.blob().then(t=>self.createImageBitmap(t)).then(t=>{let n=e(t.width),i=e(t.height);n>1920&&(n=1920),i>1920&&(i=1920);let o=[],a=0,s=Math.round(Math.log2(Math.max(n,i))),u=t=>{const e=new OffscreenCanvas(n,i),l=e.getContext("2d");l.fillStyle="rgba(0,0,0,0)",l.fillRect(0,0,n,i),l.drawImage(t,0,0,n,i);let f,m=l.getImageData(0,0,n,i).data;const c=256*Math.ceil(4*n/256);if(c==4*n)f=m;else{f=new Uint8ClampedArray(c*i);let t=0;for(let e=0;e<i;++e)for(let r=0;r<n;++r){let n=4*r+e*c;f[n]=m[t],f[n+1]=m[t+1],f[n+2]=m[t+2],f[n+3]=m[t+3],t+=4}}o.push({data:f.buffer,width:n,height:i,bytesPerRow:c}),n=Math.max(Math.floor(n/2),1),i=Math.max(Math.floor(i/2),1),a++,a==s+1?self.postMessage({src:r,imageDatas:o,ok:!0}):u(e)};u(t)})}).catch(t=>{self.postMessage({error:n,src:r})})}})();self.addEventListener("message",e=>{t(e.data)})}),on=rn(async()=>{let t,e=await import("https://unpkg.com/@webgpu/glslang@0.0.15/dist/web-devel/glslang.js"),r=await e.default();await async function(){return new Promise(async e=>{t||(await import("https://preview.babylonjs.com/twgsl/twgsl.js"),t=twgsl),e()})}().then(e=>t("https://preview.babylonjs.com/twgsl/twgsl.wasm")).then(t=>{let e=(t=>{let e=(t,r)=>{let n,i,o,a,s;if(r>t.length||r<=0)return[];if(r===t.length)return[t];if(1===r){for(o=[],n=0;n<t.length;n++)o.push([t[n]]);return o}for(o=[],n=0;n<t.length-r+1;n++)for(a=t.slice(n,n+1),s=e(t.slice(n+1),r-1),i=0;i<s.length;i++)o.push(a.concat(s[i]));return o};return t=>{let r,n,i,o;for(i=[],r=1;r<=t.length;r++)for(o=e(t,r),n=0;n<o.length;n++)i.push(o[n]);return i}})(),n=async n=>{const i=n.src,o=i.shaderType,a=i.shaderName;let s=i.originSource,u={},l=0;const f=e(i.optionList.sort());let m=e=>{let n=a+"_"+e.join("_");if(!u[n]){u[n]=1;let i=function(t,e){t=JSON.parse(JSON.stringify(t));let r=e.length;for(;r--;){let n=new RegExp(`//#RedGPU#${e[r]}#`,"gi");t=t.replace(n,"")}return t}(s,e),f=t.convertSpirV2WGSL(r.compileGLSL(i,o)).replace(/@stride\([0-9]*\)/g,"");l++,self.postMessage({endCompile:!0,shaderName:a,searchKey:n,compileGLSL:f,shaderType:o})}};f.forEach(t=>{m(t)}),self.postMessage({end:!0,shaderName:a,shaderType:o,totalNum:l})};self.addEventListener("message",t=>{n(t.data)})})}),an=t=>new Promise((e,r)=>{nn.addEventListener("message",(function n(i){i.data.src===t&&(nn.removeEventListener("message",n),i.data.error&&r(i.data.error),e(i.data))})),nn.postMessage({src:t,workerType:"image"})}),sn=(t,e,r,n,i,o)=>new Promise((a,s)=>{on.addEventListener("message",(function n(o){if(o.data.shaderName===r&&o.data.shaderType===i){if(o.data.endCompile){let r=o.data.searchKey;if(!e.sourceMap.has(r)){e.sourceMap.set(r,o.data.compileGLSL);let n={key:r,code:o.data.compileGLSL};e.shaderModuleMap[r]=t.device.createShaderModule(n)}o.data.error&&s(o.data.error)}o.data.end&&(on.removeEventListener("message",n),a(o))}})),on.postMessage({src:{originSource:n,shaderName:r,shaderType:i,optionList:o},workerType:"compileGLSL"})}),un={};class ln extends ke{constructor(t,e,r,n=ln.TYPE_2D){if(super(),this.callback=r,n===ln.TYPE_2D){let t=location.pathname.split("/");t.length>1&&t.pop();let n=location.origin+t.join("/")+"/"+e;(e.includes(";base64,")||e.includes("://"))&&(n=e),un[n]?un[n].loaded?(this.imageDatas=un[n].imageDatas,r&&r.call(this,{ok:!0})):un[n].tempList.push(this):(un[n]={loaded:!1,tempList:[]},un[n].tempList.push(this),an(n).then(t=>{un[n].loaded=!0,un[n].imageDatas=t.imageDatas,un[n].tempList.forEach(e=>{e.imageDatas=un[n].imageDatas,e.callback&&e.callback.call(e,t)}),un[n].tempList.length=0}).catch(t=>{un[n].tempList.forEach(e=>{e.callback&&e.callback.call(e,t)}),un[n].tempList.length=0}))}else{let t=0,n=0,i=0,o=[];e.forEach((e,a)=>{if(e){let s=location.pathname.split("/");s.length>1&&s.pop();let u=location.origin+s.join("/")+"/"+e;(e.includes(";base64,")||e.includes("://"))&&(u=e),un[u]?un[u].loaded?(this.imageDatas=un[u].imageDatas,r&&r.call(this,{ok:!0})):un[u].tempList.push(this):(un[u]={loaded:!1,imgList:o,tempList:[]},un[u].tempList.push(this),an(u).then(e=>{o[a]=e,i++,t=Math.max(t,e.imageDatas[0].width),n=Math.max(n,e.imageDatas[0].height),t>1920&&(t=1920),n>1920&&(n=1920),6==i&&(un[u].loaded=!0,un[u].imgList=o,un[u].maxW=t,un[u].maxH=n,un[u].tempList.forEach(t=>{t.imgList=un[u].imgList,t.maxW=un[u].maxW,t.maxH=un[u].maxH,t.callback&&t.callback.call(t,e)}),un[u].tempList.length=0)}).catch(t=>{un[u].tempList.forEach(e=>{e.callback&&e.callback.call(e,t)}),un[u].tempList.length=0}))}else;})}}}function fn(t,e,r,n,i,o=-1){return new Promise((a,s)=>{r.forEach((r,a)=>{if(!i.useMipmap&&a)return;if(a>i.mipMaps)return;let s=new Uint8ClampedArray(r.data),u=r.width,l=r.height,f=r.bytesPerRow;const m=e.createBuffer({size:s.byteLength+s.byteLength%4,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC});e.queue.writeBuffer(m,0,s);const c={buffer:m,bytesPerRow:f,rowsPerImage:l},h={texture:n,mipLevel:a,origin:{z:Math.max(o,0)}},d={width:u,height:l,depthOrArrayLayers:1};t.copyBufferToTexture(c,h,d)}),a()})}let mn;Ve(ln,"TYPE_2D","TYPE_2D"),Ve(ln,"TYPE_CUBE","TYPE_CUBE");const cn=new Map;class hn extends Qr{constructor(t,e,r,n=!0,i,o){if(super(),mn||(mn=new ir(t)),this.sampler=r||mn,this.onload=i,this.onerror=o,this.mapKey=e+n+this.sampler.string,this.useMipmap=n,e){let r=this;new ln(t,e,(function(e){cn.get(r.mapKey)?(r.resolve(cn.get(r.mapKey)),r.onload&&r.onload(r)):e.ok?function(t,e,r){let n,i,o,a,s;n=e[0].imageDatas[0].width,i=e[0].imageDatas[0].height,r.useMipmap&&(r.mipMaps=Math.round(Math.log2(Math.max(n,i))),r.mipMaps>10&&(r.mipMaps=10)),o={size:{width:n,height:i,depthOrArrayLayers:r instanceof en?1:6},dimension:"2d",format:"rgba8unorm",mipLevelCount:r.useMipmap?r.mipMaps+1:1,usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING},a=t.device.createTexture(o),cn.set(r.mapKey,a);let u=[];s=t.device.createCommandEncoder({}),e.forEach((e,n)=>{u.push(fn(s,t.device,e.imageDatas,a,r,n))}),Promise.all(u).then(e=>{t.device.queue.submit([s.finish()]),r.resolve(a),r.onload&&r.onload.call(r)})}(t,this.imgList,r):(r.resolve(null),r.onerror&&r.onerror(r))}),ln.TYPE_CUBE)}else;}}class dn extends ke{constructor(t,e,r,n){let i,o;super(),Ve(this,"textures",[]),i=0,o=t=>{i++,n&&n.call(this,{totalNum:e.length,loaded:i}),i==e.length&&requestAnimationFrame(t=>{r&&r.call(this,this)})},(e=e||[]).length?e.forEach((e,r)=>{let n,i,a,s=en;e.hasOwnProperty("src")?(i=e.src,a=e.sampler):i=e,i instanceof Array&&(s=hn),n={src:i,texture:null,loadEnd:!1,loadSuccess:!1,userInfo:e},n.texture=new s(t,i,a,!0,(function(t){n.loadSuccess=!0,n.loadEnd=!0,o()}),(function(t){n.loadSuccess=!1,n.loadEnd=!0,o()})),this.textures.push(n)}):requestAnimationFrame(t=>{r&&r.call(this,this)})}getTextureByIndex(t){if(this.textures[t])return this.textures[t].texture}}const pn={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array};class vn{constructor(t,e,r){switch(this.accessor=e.accessors[r],this.bufferView=e.bufferViews[this.accessor.bufferView],this.bufferIndex=this.bufferView.buffer,this.buffer=e.buffers[this.bufferIndex],this.bufferURIDataView=null,this.buffer.uri&&(this.bufferURIDataView=t.parsingResult.uris.buffers[this.bufferIndex]),this.componentType=pn[this.accessor.componentType],this.componentType_BYTES_PER_ELEMENT=this.componentType.BYTES_PER_ELEMENT,this.componentType){case Float32Array:this.getMethod="getFloat32";break;case Uint32Array:this.getMethod="getUint32";break;case Uint16Array:this.getMethod="getUint16";break;case Int16Array:this.getMethod="getInt16";break;case Uint8Array:this.getMethod="getUint8";break;case Int8Array:this.getMethod="getInt8";break;default:Je.throwFunc("파싱할수없는 타입",this.componentType)}this.accessorBufferOffset=this.accessor.byteOffset||0,this.bufferViewOffset=this.bufferView.byteOffset||0,this.bufferViewByteStride=this.bufferView.byteStride||0,this.startIndex=(this.bufferViewOffset+this.accessorBufferOffset)/this.componentType_BYTES_PER_ELEMENT}}let gn;gn=function(t,e,r){let n,i=[],o=new vn(t,e,r),a=o.componentType_BYTES_PER_ELEMENT,s=o.bufferURIDataView,u=o.getMethod,l=o.accessor.type,f=o.accessor.count,m=o.startIndex;switch(l){case"SCALAR":for(n=m+1*f;m<n;m++)i.push(s[u](m*a,!0));break;case"VEC4":for(n=m+4*f;m<n;m++)i.push(s[u](m*a,!0));break;case"VEC3":for(n=m+3*f;m<n;m++)i.push(s[u](m*a,!0))}return i};let _n=function(t,e,r){return new Promise(r=>{if(e.animations||(e.animations=[]),e.animations.length){let n=e.nodes,i=e.meshes,o=0,a=0;e.animations.forEach((function(s){let u=s.samplers,l=[];l.minTime=1e7,l.maxTime=-1,l.name=s.name,t.parsingResult.animations.push(l);let f=0;const m=s.channels.length;a+=m;let c=h=>{let d,p,v,g,_,x=[],y=s.channels[h];if(d=u[y.sampler],p=y.target,g=n[p.node],"mesh"in g)v=g.Mesh,i[g.mesh].primitives.forEach(t=>x.push(t.Mesh));else{let e;if(!t.parsingResult.groups[p.node])return;e=t.parsingResult.groups[p.node],v=e}"scale"!=p.path&&"rotation"!=p.path&&"translation"!=p.path&&"weights"!=p.path||l.push(_={key:p.path,time:gn(t,e,d.input),data:gn(t,e,d.output),interpolation:d.interpolation,target:v,targets:x}),_&&(l.minTime>_.time[0]&&(l.minTime=_.time[0]),l.maxTime<_.time[_.time.length-1]&&(l.maxTime=_.time[_.time.length-1])),f++,o++,f!=m&&requestAnimationFrame(t=>c(f)),o==a&&(t.parsingResult.animations.length&&t.parsingResult.animations.forEach(e=>t.playAnimation(e)),r())};c(f)}))}else r()})};var xn=new WeakMap;class yn extends Hr{constructor(t){super(t),ze(this,xn,{writable:!0,value:new Float32Array([0,1,0])}),Ve(this,"fov",60),Ve(this,"nearClipping",.1),Ve(this,"farClipping",1e5)}get x(){return this._x}set x(t){this._x=t,this.matrix[12]=t}get y(){return this._y}set y(t){this._y=t,this.matrix[13]=t}get z(){return this._z}set z(t){this._z=t,this.matrix[14]=t}lookAt(t,e,r){Fe.mat4.lookAt(this.matrix,[this.x,this.y,this.z],[t,e,r],Oe(this,xn))}}let Tn=function(t,e){e.cameras&&e.cameras.forEach((function(e){let r=new yn(t.redGPUContext);"orthographic"==e.type?r.mode2DYn=!0:(r.fov=180*e.perspective.yfov/Math.PI,r.farClipping=e.perspective.zfar,r.nearClipping=e.perspective.znear),t.parsingResult.cameras.push(r)}))};const Un=function(){const t=Fe.mat4.create(),e=[0,0,0];let r=[];const n=[];let i;return function(o,a){"matrix"in a&&(i=a.matrix,Je.mat4ToEuler(i,e),o._rotationX=-180*e[0]/Math.PI,o._rotationY=-180*e[1]/Math.PI,o._rotationZ=-180*e[2]/Math.PI,o._x=i[12],o._y=i[13],o._z=i[14],Fe.mat4.getScaling(n,i),o._scaleX=n[0],o._scaleY=n[1],o._scaleZ=n[2]),"rotation"in a&&(r=a.rotation,Je.quaternionToRotationMat4(r,t),Je.mat4ToEuler(t,e),o._rotationX=-180*e[0]/Math.PI,o._rotationY=-180*e[1]/Math.PI,o._rotationZ=-180*e[2]/Math.PI),"translation"in a&&(o._x=a.translation[0],o._y=a.translation[1],o._z=a.translation[2]),"scale"in a&&(o._scaleX=a.scale[0],o._scaleY=a.scale[1],o._scaleZ=a.scale[2]),o.dirtyTransform=!0}}();let Sn=function(t,e,r,n){if(r[n].Mesh){let t=r[n].Mesh;e.joints.push(t),t.primitiveTopology="line-list",t.depthCompare="never"}else requestAnimationFrame((function(){Sn(t,e,r,n)}))},Mn=function(t,e,r,n){let i={joints:[],inverseBindMatrices:[]},o=e.nodes;r.joints.forEach((function(e){Sn(t,i,o,e)})),r.skeleton&&(i.skeleton=e.nodes[r.skeleton].Mesh);let a,s=r.inverseBindMatrices,u=new vn(t,e,s),l=u.componentType_BYTES_PER_ELEMENT,f=u.bufferViewByteStride,m=u.bufferURIDataView,c=u.getMethod,h=u.accessor.type,d=u.accessor.count,p=0,v=f/l,g=u.startIndex;switch(h){case"MAT4":if(f)for(a=g+d*(f/l);g<a;g++)p%v<16&&i.inverseBindMatrices.push(m[c](g*l,!0)),p++;else for(a=g+16*d;g<a;g++)i.inverseBindMatrices.push(m[c](g*l,!0)),p++}i.inverseBindMatrices=new Float32Array(i.inverseBindMatrices),n.skinInfo=i,n.material.useSkin=!!n.skinInfo};const bn={vertex:{},fragment:{}},Pn={vertex:{},fragment:{}};class wn{constructor(t,e,r,n){Ve(this,"redGPUContext",void 0),Ve(this,"type",void 0),Ve(this,"originSource",void 0),Ve(this,"shaderModuleMap",void 0),Ve(this,"sourceMap",void 0),Ve(this,"GPUShaderModule",void 0),Ve(this,"currentKey",void 0);let i=r.name,o=bn[e][i];if(o||(bn[e][i]=new Map,Pn[e][i]={}),this.redGPUContext=t,this.type=e,this.originSource=n,this.sourceMap=bn[e][i],this.shaderModuleMap=Pn[e][i],!o){let t=r.PROGRAM_OPTION_LIST[e];t.length&&sn(this.redGPUContext,this,i,this.originSource,this.type,t).then(t=>{})}this.searchShaderModule([i])}searchShaderModule(t){t.sort();let e=t.join("_");if(this.currentKey!=e){if(this.currentKey=e,this.shaderModuleMap[e])return this.GPUShaderModule=this.shaderModuleMap[e];{let r;r=this.sourceMap.get(e),r instanceof Uint32Array||r||this.sourceMap.set(e,r=this.redGPUContext.twgsl.convertSpirV2WGSL(this.redGPUContext.glslang.compileGLSL(function(t,e){t=JSON.parse(JSON.stringify(t));let r=e.length;for(;r--;)t=t.replace(new RegExp(`//#RedGPU#${e[r]}#`,"gi"),"");return t}(this.originSource,t),this.type)).replace(/@stride\([0-9]*\)/g,"")),this.shaderModuleDescriptor={key:e,code:r},this.GPUShaderModule=this.redGPUContext.device.createShaderModule(this.shaderModuleDescriptor),this.shaderModuleMap[e]=this.GPUShaderModule}}}}class Gn{constructor(t){Ve(this,"redGPUContext",void 0),Ve(this,"GPUBindGroup",null),this.redGPUContext=t}setGPUBindGroup(t){this.GPUBindGroup=this.redGPUContext.device.createBindGroup(t)}}const En=new Map;var Bn=new WeakMap;class Cn extends ke{constructor(t){let e,r;super(),Ve(this,"uniformBufferDescriptor_vertex",void 0),Ve(this,"uniformBufferDescriptor_fragment",void 0),Ve(this,"GPUBindGroupLayout",void 0),ze(this,Bn,{writable:!0,value:!1}),Ve(this,"vShaderModule",void 0),Ve(this,"fShaderModule",void 0),Ve(this,"vertexStage",void 0),Ve(this,"fragmentStage",void 0),Ve(this,"entries",void 0),Ve(this,"redGPUContext",void 0),Ve(this,"uniformBuffer_vertex",void 0),Ve(this,"uniformBuffer_fragment",void 0),Ve(this,"uniformBindGroup_material",void 0),Ve(this,"needResetBindingInfo",!0);let n=this.constructor,i=n.vertexShaderGLSL,o=n.fragmentShaderGLSL;n.PROGRAM_OPTION_LIST;if(r=new wn(t,"fragment",n,o),e=new wn(t,"vertex",n,i),!n.uniformBufferDescriptor_vertex)throw new Error(n.name+" : must define a static uniformBufferDescriptor_vertex.");if(!n.uniformBufferDescriptor_fragment)throw new Error(n.name+" : must define a static uniformBufferDescriptor_fragment.");if(!n.uniformsBindGroupLayoutDescriptor_material)throw new Error(n.name+" : must define a static uniformsBindGroupLayoutDescriptor_material.");this.uniformBufferDescriptor_vertex=new Qe(n.uniformBufferDescriptor_vertex),this.uniformBufferDescriptor_fragment=new Qe(n.uniformBufferDescriptor_fragment),this.GPUBindGroupLayout=function(t,e){let r;return(r=En.get(e))||(r=t.device.createBindGroupLayout(e),En.set(e,r)),r}(t,n.uniformsBindGroupLayoutDescriptor_material),this.vShaderModule=e,this.fShaderModule=r,this.uniformBuffer_vertex=new dr(t),this.uniformBuffer_vertex.setBuffer(this.uniformBufferDescriptor_vertex),this.uniformBuffer_fragment=new dr(t),this.uniformBuffer_fragment.setBuffer(this.uniformBufferDescriptor_fragment),this.uniformBindGroup_material=new Gn(t),this.redGPUContext=t}updateUniformBuffer(){let t,e,r,n,i,o=new Float32Array(1);for(e=this.uniformBufferDescriptor_vertex.redStruct,r=this.uniformBufferDescriptor_fragment.redStruct,t=e.length>r.length?e.length:r.length;t--;)n=e[t],n&&(i=this[n.valueName],null!=i&&null!=i||Je.throwFunc(`uniformBufferDescriptor_vertex에 올바르지않은 ${n.valueName}가 존재함`),"number"==typeof i?(o[0]=i,i=o):"boolean"==typeof i&&(o[0]=i?1:0,i=o),this.uniformBuffer_vertex.float32Array.set(i,n.offset/Float32Array.BYTES_PER_ELEMENT)),n=r[t],n&&(i=this[n.valueName],null!=i&&null!=i||Je.throwFunc(`uniformBufferDescriptor_fragment에 올바르지않은 ${n.valueName}가 존재함`),"number"==typeof i?(o[0]=i,i=o):"boolean"==typeof i&&(o[0]=i?1:0,i=o),this.uniformBuffer_fragment.float32Array.set(i,n.offset/Float32Array.BYTES_PER_ELEMENT));this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,0,this.uniformBuffer_vertex.float32Array),this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,0,this.uniformBuffer_fragment.float32Array)}checkTexture(t,e){throw new Error(this.constructor.name+" : checkTexture must override!!!")}resetBindingInfo(){throw new Error(this.constructor.name+" : resetBindingInfo must override!!!")}_afterResetBindingInfo(){this.searchModules(),this.setUniformBindGroupDescriptor(),this.uniformBindGroup_material.setGPUBindGroup(this.uniformBindGroupDescriptor),Oe(this,Bn)||(this.updateUniformBuffer(),Ye(this,Bn,!0)),this.updateUUID()}searchModules(){let t=[this.constructor.name],e=[this.constructor.name],r=0,n=Math.max(this.constructor.PROGRAM_OPTION_LIST.vertex.length,this.constructor.PROGRAM_OPTION_LIST.fragment.length);for(;r<n;r++){let n;n=this.constructor.PROGRAM_OPTION_LIST.vertex[r],n&&this[n]&&t.push(n),n=this.constructor.PROGRAM_OPTION_LIST.fragment[r],n&&this[n]&&e.push(n)}this.vShaderModule.searchShaderModule(t),this.fShaderModule.searchShaderModule(e)}setUniformBindGroupDescriptor(){this.uniformBindGroupDescriptor={layout:this.GPUBindGroupLayout,entries:this.entries}}}Ve(Cn,"uniformBufferDescriptor_empty",[]);let Ln=new Float32Array(1);const Rn=(t,...e)=>[t,...e].reduce((t,e)=>e(t)),Dn=function(t){return e=>class extends e{constructor(...e){super(...e),Ve(this,"_"+t,null),Ve(this,`__${t}RenderYn`,0)}set[t](e){this.checkTexture(e,t)}get[t](){return this["_"+t]}}},In=Dn("diffuseTexture"),Nn=Dn("normalTexture"),An=Dn("specularTexture"),Fn=Dn("emissiveTexture"),Vn=Dn("environmentTexture"),On=Dn("refractionTexture"),Yn=Dn("displacementTexture"),Xn=Dn("roughnessTexture"),zn=Dn("occlusionTexture");var $n={mix:Rn,EmptyClass:class{},color:t=>{var e,r;return e=new WeakMap,r=new WeakMap,class extends t{constructor(...t){super(...t),ze(this,e,{writable:!0,value:"#ff0000"}),ze(this,r,{writable:!0,value:1}),Ve(this,"_colorRGBA",new Float32Array([1,0,0,Oe(this,r)]))}get colorRGBA(){return this._colorRGBA}get color(){return Oe(this,e)}set color(t){Ye(this,e,t);let n=Je.hexToRGB_ZeroToOne(t);this._colorRGBA[0]=n[0]*Oe(this,r),this._colorRGBA[1]=n[1]*Oe(this,r),this._colorRGBA[2]=n[2]*Oe(this,r),this._colorRGBA[3]=Oe(this,r),this.uniformBuffer_fragment&&this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.colorRGBA,this._colorRGBA)}get colorAlpha(){return Oe(this,r)}set colorAlpha(t){let n=Je.hexToRGB_ZeroToOne(Oe(this,e));this._colorRGBA[0]=n[0]*t,this._colorRGBA[1]=n[1]*t,this._colorRGBA[2]=n[2]*t,this._colorRGBA[3]=t,Ye(this,r,t),this.uniformBuffer_fragment&&this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.colorRGBA,this._colorRGBA)}}},alpha:t=>{var e;return e=new WeakMap,class extends t{constructor(...t){super(...t),ze(this,e,{writable:!0,value:1})}get alpha(){return Oe(this,e)}set alpha(t){Ye(this,e,t),Ln[0]=Oe(this,e),this.uniformBuffer_fragment&&this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.alpha,Ln)}}},defineNumber:function(t,e={}){let r,n=e.hasOwnProperty("min"),i=e.hasOwnProperty("max"),o=e.min,a=e.max;return r=r=>{var s;return s=new WeakMap,class extends r{constructor(...r){super(...r),ze(this,s,{writable:!0,value:{min:o,max:a}}),Ve(this,"#"+t,e.value)}set[t](r){this["#"+t]=null,"number"!=typeof r&&Je.throwFunc(`${t} : only allow Number. - inputValue : ${r} { type : ${typeof r} }`),n&&r<o&&(r=o),i&&r>a&&(r=a),this["#"+t]=r,e.callback&&e.callback.call(this,r)}get[t](){return this["#"+t]}}},r},diffuseTexture:In,normalTexture:Nn,specularTexture:An,emissiveTexture:t=>Rn(class extends t{constructor(...t){super(...t),Ve(this,"_emissivePower",1)}get emissivePower(){return this._emissivePower}set emissivePower(t){this._emissivePower=t,Ln[0]=this._emissivePower,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.emissivePower,Ln)}},Fn),environmentTexture:t=>Rn(class extends t{constructor(...t){super(...t),Ve(this,"_environmentPower",1)}get environmentPower(){return this._environmentPower}set environmentPower(t){this._environmentPower=t,Ln[0]=this._environmentPower,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.environmentPower,Ln)}},Vn),refractionTexture:t=>Rn(class extends t{constructor(...t){super(...t),Ve(this,"_refractionPower",1),Ve(this,"_refractionRatio",.95)}get refractionPower(){return this._refractionPower}set refractionPower(t){this._refractionPower=t,Ln[0]=this._refractionPower,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.refractionPower,Ln)}get refractionRatio(){return this._refractionRatio}set refractionRatio(t){this._refractionRatio=t,Ln[0]=this._refractionRatio,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.refractionRatio,Ln)}},On),displacementTexture:t=>Rn(class extends t{constructor(...t){super(...t),Ve(this,"_displacementFlowSpeedX",0),Ve(this,"_displacementFlowSpeedY",0),Ve(this,"_displacementPower",.1)}get displacementFlowSpeedX(){return this._displacementFlowSpeedX}set displacementFlowSpeedX(t){this._displacementFlowSpeedX=t,Ln[0]=this._displacementFlowSpeedX,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap.displacementFlowSpeedX,Ln)}get displacementFlowSpeedY(){return this._displacementFlowSpeedY}set displacementFlowSpeedY(t){this._displacementFlowSpeedY=t,Ln[0]=this._displacementFlowSpeedY,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap.displacementFlowSpeedY,Ln)}get displacementPower(){return this._displacementPower}set displacementPower(t){this._displacementPower=t,Ln[0]=this._displacementPower,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap.displacementPower,Ln)}},Yn),roughnessTextureGLTF:t=>Rn(class extends t{constructor(...t){super(...t),Ve(this,"_roughnessTexCoordIndex",0),Ve(this,"_roughnessFactor",1)}get roughnessTexCoordIndex(){return this._roughnessTexCoordIndex}set roughnessTexCoordIndex(t){this._roughnessTexCoordIndex=t,Ln[0]=t,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.roughnessTexCoordIndex,Ln)}get roughnessFactor(){return this._roughnessFactor}set roughnessFactor(t){this._roughnessFactor=t,Ln[0]=t,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.roughnessFactor,Ln)}get roughnessTexture(){return this._roughnessTexture}set roughnessTexture(t){this.checkTexture(t,"roughnessTexture")}},Xn),occlusionTextureGLTF:t=>Rn(class extends t{constructor(...t){super(...t),Ve(this,"_occlusionTexCoordIndex",0),Ve(this,"_occlusionPower",1)}get occlusionTexCoordIndex(){return this._occlusionTexCoordIndex}set occlusionTexCoordIndex(t){this._occlusionTexCoordIndex=t,Ln[0]=t,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.occlusionTexCoordIndex,Ln)}get occlusionPower(){return this._occlusionPower}set occlusionPower(t){this._occlusionPower=t,Ln[0]=t,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.occlusionPower,Ln)}get occlusionTexture(){return this._occlusionTexture}set occlusionTexture(t){this.checkTexture(t,"occlusionTexture")}},zn),basicLightPropertys:t=>class extends t{constructor(...t){super(...t),Ve(this,"_normalPower",1),Ve(this,"_shininess",32),Ve(this,"_specularPower",1),Ve(this,"_specularColor","#ffffff"),Ve(this,"_specularColorRGBA",new Float32Array([1,1,1,1])),Ve(this,"_useFlatMode",!1)}get normalPower(){return this._normalPower}set normalPower(t){this._normalPower=t,Ln[0]=this._normalPower,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.normalPower,Ln)}get shininess(){return this._shininess}set shininess(t){this._shininess=t,Ln[0]=this._shininess,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.shininess,Ln)}get specularPower(){return this._specularPower}set specularPower(t){this._specularPower=t,Ln[0]=this._specularPower,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.specularPower,Ln)}get specularColor(){return this._specularColor}set specularColor(t){this._specularColor=t;let e=Je.hexToRGB_ZeroToOne(t);this._specularColorRGBA[0]=e[0],this._specularColorRGBA[1]=e[1],this._specularColorRGBA[2]=e[2],this._specularColorRGBA[3]=1,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.specularColorRGBA,this._specularColorRGBA)}get specularColorRGBA(){return this._specularColorRGBA}get useFlatMode(){return this._useFlatMode}set useFlatMode(t){this._useFlatMode=t,Ln[0]=t?1:0,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.useFlatMode,Ln)}}};let kn=new Float32Array(1);var qn=new WeakMap;class Wn extends($n.mix(Cn,$n.diffuseTexture,$n.normalTexture,$n.emissiveTexture,$n.environmentTexture,$n.displacementTexture,$n.roughnessTextureGLTF,$n.occlusionTextureGLTF,$n.basicLightPropertys)){constructor(t,e,r,n,i,o,a){super(t),Ve(this,"jointMatrix",new Float32Array(127*qe.mat4/Float32Array.BYTES_PER_ELEMENT)),Ve(this,"inverseBindMatrixForJoint",new Float32Array(127*qe.mat4/Float32Array.BYTES_PER_ELEMENT)),Ve(this,"globalTransformOfNodeThatTheMeshIsAttachedTo",new Float32Array(qe.mat4/Float32Array.BYTES_PER_ELEMENT)),ze(this,qn,{writable:!0,value:void 0}),Ve(this,"_baseColorFactor",new Float32Array(4)),Ve(this,"_useVertexColor_0",!1),Ve(this,"_diffuseTexCoordIndex",0),Ve(this,"_normalTexCoordIndex",0),Ve(this,"_emissiveTexCoordIndex",0),Ve(this,"_metallicFactor",1),Ve(this,"_useMaterialDoubleSide",!1),Ve(this,"_useVertexTangent",!1),Ve(this,"_emissivePower",1),Ve(this,"_cutOff",0),Ve(this,"_useCutOff",!0),Ve(this,"_alphaBlend",0),Ve(this,"_useSkin",!1),this.diffuseTexture=e,this.environmentTexture=r,this.normalTexture=n,this.occlusionTexture=i,this.emissiveTexture=o,this.roughnessTexture=a,this.needResetBindingInfo=!0}get baseColorFactor(){return this._baseColorFactor}set baseColorFactor(t){this._baseColorFactor=new Float32Array(t),this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.baseColorFactor,this._baseColorFactor)}get useVertexColor_0(){return this._useVertexColor_0}set useVertexColor_0(t){this._useVertexColor_0=t,kn[0]=t?1:0,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.useVertexColor_0,kn)}get diffuseTexCoordIndex(){return this._diffuseTexCoordIndex}set diffuseTexCoordIndex(t){this._diffuseTexCoordIndex=t,kn[0]=t,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.diffuseTexCoordIndex,kn)}get normalTexCoordIndex(){return this._normalTexCoordIndex}set normalTexCoordIndex(t){this._normalTexCoordIndex=t,kn[0]=t,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.normalTexCoordIndex,kn)}get emissiveTexCoordIndex(){return this._emissiveTexCoordIndex}set emissiveTexCoordIndex(t){this._emissiveTexCoordIndex=t,kn[0]=t,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.emissiveTexCoordIndex,kn)}get metallicFactor(){return this._metallicFactor}set metallicFactor(t){this._metallicFactor=t,kn[0]=t,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.metallicFactor,kn)}get useMaterialDoubleSide(){return this._useMaterialDoubleSide}set useMaterialDoubleSide(t){this._useMaterialDoubleSide=t,kn[0]=t?1:0,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.useMaterialDoubleSide,kn)}get useVertexTangent(){return this._useVertexTangent}set useVertexTangent(t){this._useVertexTangent=t,kn[0]=t,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.useVertexTangent,kn)}get emissivePower(){return this._emissivePower}set emissivePower(t){this._emissivePower=t,kn[0]=t,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.emissivePower,kn)}get cutOff(){return this._cutOff}set cutOff(t){this._cutOff=t,kn[0]=t,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.cutOff,kn)}get useCutOff(){return this._useCutOff}set useCutOff(t){this._useCutOff=t,kn[0]=t?1:0,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.useCutOff,kn)}get alphaBlend(){return this._alphaBlend}set alphaBlend(t){this._alphaBlend=t,kn[0]=t,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.alphaBlend,kn)}get useSkin(){return this._useSkin}set useSkin(t){this._useSkin=t,kn[0]=t?1:0,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap.useSkin,kn)}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"diffuseTexture":this._diffuseTexture=t,r=e;break;case"normalTexture":this._normalTexture=t,r=e;break;case"environmentTexture":this._environmentTexture=t,r=e;break;case"emissiveTexture":this._emissiveTexture=t,r=e;break;case"roughnessTexture":this._roughnessTexture=t,r=e;break;case"occlusionTexture":this._occlusionTexture=t,r=e}r&&(kn[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],kn):this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],kn)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,kn[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],kn):this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],kn),this.needResetBindingInfo=!0)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:this._displacementTexture?this._displacementTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:2,resource:this._displacementTexture?this._displacementTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:3,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:4,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:5,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:6,resource:this._normalTexture?this._normalTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:7,resource:this._normalTexture?this._normalTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:8,resource:this._roughnessTexture?this._roughnessTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:9,resource:this._roughnessTexture?this._roughnessTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:10,resource:this._emissiveTexture?this._emissiveTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:11,resource:this._emissiveTexture?this._emissiveTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:12,resource:this._environmentTexture?this._environmentTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:13,resource:this._environmentTexture?this._environmentTexture._GPUTextureView:this.redGPUContext.state.emptyCubeTextureView},{binding:14,resource:this._occlusionTexture?this._occlusionTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:15,resource:this._occlusionTexture?this._occlusionTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}Ve(Wn,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n    ${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${rr.GLSL_SystemUniforms_vertex.meshUniforms}\n         \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 3 ) in vec2 uv1;\n\tlayout( location = 4 ) in vec4 vertexColor_0;\n\tlayout( location = 5 ) in vec4 aVertexWeight;\n\tlayout( location = 6 ) in vec4 aVertexJoint;\n\tlayout( location = 7 ) in vec4 vertexTangent;\n\tlayout( location = 0 ) out vec4 vVertexColor_0;\n\tlayout( location = 1 ) out vec3 vNormal;\n\tlayout( location = 2 ) out vec2 vUV;\n\tlayout( location = 3 ) out vec2 vUV1;\n\tlayout( location = 4 ) out vec4 vVertexTangent;\n\tlayout( location = 5 ) out vec4 vVertexPosition;\n\tlayout( location = 6 ) out float vMouseColorID;\t\n\tlayout( location = 7 ) out float vSumOpacity;\n\tlayout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n\t\tmat4 jointMatrix[127];\n\t\tmat4 inverseBindMatrixForJoint[127];\n\t\tmat4 globalTransformOfNodeThatTheMeshIsAttachedTo;\n        float displacementFlowSpeedX;\n        float displacementFlowSpeedY;\n        float displacementPower;\n        float __displacementTextureRenderYn;\n        float useSkin;\n        \n    } vertexUniforms;\n\t\n\tlayout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 1 ) uniform sampler uDisplacementSampler;\n\tlayout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 2 ) uniform texture2D uDisplacementTexture;\n\tvoid main() {\t\t\n\t\tmat4 targetMatrix = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] ;\n\t\tmat4 skinMat = mat4(1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0);\n\t\tif(vertexUniforms.useSkin == TRUTHY) {\n\t\t\tskinMat =\n\t\t\taVertexWeight.x * vertexUniforms.globalTransformOfNodeThatTheMeshIsAttachedTo * vertexUniforms.jointMatrix[ int(aVertexJoint.x) ] * vertexUniforms.inverseBindMatrixForJoint[int(aVertexJoint.x)]+\n\t\t\taVertexWeight.y * vertexUniforms.globalTransformOfNodeThatTheMeshIsAttachedTo * vertexUniforms.jointMatrix[ int(aVertexJoint.y) ] * vertexUniforms.inverseBindMatrixForJoint[int(aVertexJoint.y)]+\n\t\t\taVertexWeight.z * vertexUniforms.globalTransformOfNodeThatTheMeshIsAttachedTo * vertexUniforms.jointMatrix[ int(aVertexJoint.z) ] * vertexUniforms.inverseBindMatrixForJoint[int(aVertexJoint.z)]+\n\t\t\taVertexWeight.w * vertexUniforms.globalTransformOfNodeThatTheMeshIsAttachedTo * vertexUniforms.jointMatrix[ int(aVertexJoint.w) ] * vertexUniforms.inverseBindMatrixForJoint[int(aVertexJoint.w)];\n\t\t\tvVertexPosition = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * skinMat * vec4(position, 1.0);\n\t\t\tvNormal = (meshMatrixUniforms.normalMatrix[ int(meshUniforms.index) ]  * skinMat * vec4(normal,0.0)).xyz;\n\t\t}else{\n\t\t\tvVertexPosition = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position, 1.0);\n\t\t\tvNormal = (meshMatrixUniforms.normalMatrix[ int(meshUniforms.index) ] *  vec4(normal,1.0)).xyz;\n\t\t}\n\t\t\n\t\tvVertexColor_0 = vertexColor_0;\n\t\t\n\t\tvUV = uv;\n\t\tvUV1 = uv1;\n\t\tvVertexTangent = vertexTangent;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tif(vertexUniforms.__displacementTextureRenderYn == TRUTHY) vVertexPosition.xyz += ${rr.GLSL_SystemUniforms_vertex.calcDisplacement("vNormal","vertexUniforms.displacementFlowSpeedX","vertexUniforms.displacementFlowSpeedY","vertexUniforms.displacementPower","uv","uDisplacementTexture","uDisplacementSampler")}\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * vVertexPosition;\t\t\n\t}\n\t`),Ve(Wn,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_fragment.systemUniforms}\n\t${rr.GLSL_SystemUniforms_fragment.cotangent_frame}\n\t${rr.GLSL_SystemUniforms_fragment.perturb_normal}\n\t\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform FragmentUniforms {\n        float normalPower;\n        float shininess; \n\t    float emissivePower;\n\t    float occlusionPower;\n\t    float environmentPower;\n\t    vec4 baseColorFactor;\n\t    float diffuseTexCoordIndex;\n\t    float normalTexCoordIndex;\n\t    float emissiveTexCoordIndex;\n\t    float roughnessTexCoordIndex;\n\t    float occlusionTexCoordIndex;\n\t    float metallicFactor;\n\t    float roughnessFactor;\n\t    float cutOff;\n\t    float alphaBlend;\n\t    //\n\t    float useFlatMode;\n\t    float useCutOff;\n\t    float useVertexTangent;\n\t    float useVertexColor_0;\n\t    float useMaterialDoubleSide;\n\t    //\n\t    float __diffuseTextureRenderYn;\n\t\tfloat __environmentTextureRenderYn;\n\t\tfloat __normalTextureRenderYn;\n\t\tfloat __occlusionTextureRenderYn;\n\t\tfloat __emissiveTextureRenderYn;\n\t\tfloat __roughnessTextureRenderYn;\n\t    \n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec4 vVertexColor_0;\n\tlayout( location = 1 ) in vec3 vNormal;\n\tlayout( location = 2 ) in vec2 vUV;\n\tlayout( location = 3 ) in vec2 vUV1;\n\tlayout( location = 4 ) in vec4 vVertexTangent;\n\tlayout( location = 5 ) in vec4 vVertexPosition;\n\tlayout( location = 6 ) in float vMouseColorID;\t\n\tlayout( location = 7 ) in float vSumOpacity;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 4 ) uniform sampler uDiffuseSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 5 ) uniform texture2D uDiffuseTexture;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 6 ) uniform sampler uNormalSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 7 ) uniform texture2D uNormalTexture;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 8 ) uniform sampler uRoughnessSampler;\t\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 9 ) uniform texture2D uRoughnessTexture;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 10 ) uniform sampler uEmissiveSampler;\t\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 11 ) uniform texture2D uEmissiveTexture;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 12 ) uniform sampler uEnvironmentSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 13 ) uniform textureCube uEnvironmentTexture;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 14 ) uniform sampler uOcclusionSampler;\t\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 15 ) uniform texture2D uOcclusionTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvec2 diffuseTexCoord;\n\tvec2 normalTexCoord;\n\tvec2 emissiveTexCoord;\n\tvec2 roughnessTexCoord;\n\tvec2 occlusionTexCoord;\n\tvoid main() {\n\t\t// 인덱스 찾고\n\t\tdiffuseTexCoord = fragmentUniforms.diffuseTexCoordIndex == 0.0 ? vUV : vUV1;\n\t\tnormalTexCoord = fragmentUniforms.normalTexCoordIndex == 0.0 ? vUV : vUV1;\n\t\temissiveTexCoord = fragmentUniforms.emissiveTexCoordIndex == 0.0 ? vUV : vUV1;\n\t\troughnessTexCoord = fragmentUniforms.roughnessTexCoordIndex == 0.0 ? vUV : vUV1;\n\t\tocclusionTexCoord = fragmentUniforms.occlusionTexCoordIndex == 0.0 ? vUV : vUV1;\n\t\t\n\t\t\n\t\tfloat tMetallicPower = fragmentUniforms.metallicFactor;\n\t\tfloat tRoughnessPower = fragmentUniforms.roughnessFactor;\n\t\t\n\t\tvec4 roughnessColor = vec4(0.0);\n\t\tif(fragmentUniforms.__roughnessTextureRenderYn == TRUTHY) {\n\t\t\troughnessColor = texture(sampler2D(uRoughnessTexture, uRoughnessSampler), roughnessTexCoord);\n\t\t\ttMetallicPower *= roughnessColor.b; // 메탈릭 산출 roughnessColor.b\n\t\t\ttRoughnessPower *= roughnessColor.g; // 거칠기 산출 roughnessColor.g\n\t\t}\n\t\t\n\t\t\n\t\n\t\tvec4 diffuseColor = fragmentUniforms.baseColorFactor;\n\t\tif(fragmentUniforms.useVertexColor_0 == TRUTHY) diffuseColor *= clamp(vVertexColor_0,0.0,1.0) ;\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor *= texture(sampler2D(uDiffuseTexture, uDiffuseSampler), diffuseTexCoord) ;\n\t\t\t\n\t\tfloat tAlpha = diffuseColor.a;\n\t\n\t\t\n\t    vec3 N = normalize(vNormal);\n\t    bool backFaceYn = false;\n\t    if(fragmentUniforms.useMaterialDoubleSide == TRUTHY) {\n\t\t    vec3 fdx = dFdx(vVertexPosition.xyz);\n\t\t\tvec3 fdy = dFdy(vVertexPosition.xyz);\n\t\t\tvec3 faceNormal = normalize(cross(fdy,fdx));\n\t\t\tif (dot (vNormal, faceNormal) < 0.0) { N = -N; backFaceYn = true; };\n\t    } \n\t\tvec4 normalColor = vec4(0.0);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) normalColor = texture(sampler2D(uNormalTexture, uNormalSampler), normalTexCoord) ;\n\t\tif(fragmentUniforms.useFlatMode == TRUTHY) N = getFlatNormal(vVertexPosition.xyz);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) N = perturb_normal(N, vVertexPosition.xyz, backFaceYn ?  1.0 - normalTexCoord : normalTexCoord, vec3(normalColor.r, 1.0- normalColor.g, normalColor.b), fragmentUniforms.normalPower) ;\n\n\t\tif(fragmentUniforms.useVertexTangent == TRUTHY) {\n\t\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY){\n\t\t\t\tvec3 pos_dx = dFdx(vVertexPosition.xyz);\n\t\t\t\tvec3 pos_dy = dFdy(vVertexPosition.xyz);\n\t\t\t\tvec3 tex_dx = dFdx(vec3(normalTexCoord, 0.0));\n\t\t\t\tvec3 tex_dy = dFdy(vec3(normalTexCoord, 0.0));\n\t\t\t\tvec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\n\t\t\t\tvec3 ng = normalize(vNormal);\n\t\t\t\tt = normalize(t - ng * dot(ng, t));\n\t\t\t\tvec3 b = normalize(cross(ng, t));\n\t\t\t\tmat3 tbn = mat3(t, b, ng);\n\t\t\t\tN = normalize(tbn * ((2.0 * normalColor.rgb - 1.0) * vec3(1.0, 1.0 * vVertexTangent.w,1.0)));\n\t\t\t\tN = backFaceYn ? -N : N;\n\t\t\t}\t\t\t\n\t\t}\n\n\t\tif(fragmentUniforms.__environmentTextureRenderYn == TRUTHY) {\n\t\t\t// 환경맵 계산\n\t\t\tvec3 R = reflect( vVertexPosition.xyz - systemUniforms.cameraPosition, N);\n\t\t\tvec4 reflectionColor = texture(samplerCube(uEnvironmentTexture,uEnvironmentSampler), R);\t\t\n\t\t\t// 환경맵 합성\n\t\t\tdiffuseColor.rgb = mix( diffuseColor.rgb , reflectionColor.rgb , max(tMetallicPower-tRoughnessPower,0.0)*(1.0-tRoughnessPower));\n\t\t\tdiffuseColor = mix( diffuseColor , vec4(0.04, 0.04, 0.04, 1.0) , tRoughnessPower * (tMetallicPower) * 0.5);\n\t\t}\n\t\t\n\n\n\t\n\t\toutColor = diffuseColor;\n\t\tvec4 specularLightColor = vec4(1.0, 1.0, 1.0, 1.0);\n\t    vec4 ld = vec4(0.0, 0.0, 0.0, 1.0);\n\t    vec4 ls = vec4(0.0, 0.0, 0.0, 1.0);\n\n\t    vec3 L;\t\n\n\n\t    float lambertTerm;\n\t    float intensity;\n\t    float specular;\n\n\t\tDirectionalLight lightInfo;\n\t\tvec4 lightColor;\n\t\tfor(int i=0; i<systemUniforms.directionalLightCount; i++){\n\t\t\tlightInfo = systemUniforms.directionalLightList[i];\n\t\t\tvec3 L = normalize(-lightInfo.position);\n\t\t\tfloat lambertTerm = dot(N,-L);\n\t\t\tif(lambertTerm > 0.0){\n\t\t\t\tld += lightInfo.color * diffuseColor * lambertTerm * lightInfo.intensity * lightInfo.color.a;\n\t\t\t\tspecular = pow( max(dot(reflect(L, N), -L), 0.0), pow(fragmentUniforms.shininess, 1.0-tRoughnessPower+0.04) );\n\t\t\t\tspecular *= pow(1.0-tRoughnessPower+0.04, 2.0 * (1.0-tMetallicPower)) ;\n\t\t\t\tls +=  specularLightColor * specular * fragmentUniforms.metallicFactor * lightInfo.intensity * lightInfo.color.a * (1.0-tRoughnessPower+0.04);\n\t\t\t}\n\t\t}\n\t\t\n\t\t vec4 finalColor = ld + ls + la;;\n\t\t\n\t\tif(fragmentUniforms.__emissiveTextureRenderYn == TRUTHY) {\n\t\t\t// 이미시브 합성\n\t\t\tvec4 emissiveColor = texture(sampler2D(uEmissiveTexture, uEmissiveSampler), emissiveTexCoord);\n\t\t\tfinalColor.rgb += emissiveColor.rgb * fragmentUniforms.emissivePower;\n\t\t}\t\t\n\t\n\t\tif(fragmentUniforms.__occlusionTextureRenderYn == TRUTHY) {\n\t\t// 오클루젼 합성\n\t\t\tvec4 occlusionColor =texture(sampler2D(uOcclusionTexture, uOcclusionSampler), occlusionTexCoord);\n\t\t\tfinalColor.rgb = mix(finalColor.rgb, finalColor.rgb * occlusionColor.r, occlusionColor.r * fragmentUniforms.occlusionPower);\n\t\t}\n\n\n\t\t// 알파블렌드 - BLEND\n\t\tif( fragmentUniforms.alphaBlend == 2.0 ) {\t\t\n\t\t\tfinalColor.a = tAlpha;\n\t\t}\n    if(fragmentUniforms.useCutOff == TRUTHY) {\n\t\t\tif(tAlpha <= fragmentUniforms.cutOff) discard;\n\t\t}\n\t\toutColor = finalColor;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve(Wn,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Wn,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.VERTEX,texture:{type:"float"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:4,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:5,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}},{binding:6,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:7,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}},{binding:8,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:9,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}},{binding:10,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:11,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}},{binding:12,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:13,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}},{binding:14,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:15,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}}]}),Ve(Wn,"uniformBufferDescriptor_vertex",[{size:127*qe.mat4,valueName:"jointMatrix"},{size:127*qe.mat4,valueName:"inverseBindMatrixForJoint"},{size:qe.mat4,valueName:"globalTransformOfNodeThatTheMeshIsAttachedTo"},{size:qe.float32,valueName:"displacementFlowSpeedX"},{size:qe.float32,valueName:"displacementFlowSpeedY"},{size:qe.float32,valueName:"displacementPower"},{size:qe.float32,valueName:"__displacementTextureRenderYn"},{size:qe.float32,valueName:"useSkin"}]),Ve(Wn,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"normalPower"},{size:qe.float32,valueName:"shininess"},{size:qe.float32,valueName:"emissivePower"},{size:qe.float32,valueName:"occlusionPower"},{size:qe.float32,valueName:"environmentPower"},{size:qe.float32x4,valueName:"baseColorFactor"},{size:qe.float32,valueName:"diffuseTexCoordIndex"},{size:qe.float32,valueName:"normalTexCoordIndex"},{size:qe.float32,valueName:"emissiveTexCoordIndex"},{size:qe.float32,valueName:"roughnessTexCoordIndex"},{size:qe.float32,valueName:"occlusionTexCoordIndex"},{size:qe.float32,valueName:"metallicFactor"},{size:qe.float32,valueName:"roughnessFactor"},{size:qe.float32,valueName:"cutOff"},{size:qe.float32,valueName:"alphaBlend"},{size:qe.float32,valueName:"useFlatMode"},{size:qe.float32,valueName:"useCutOff"},{size:qe.float32,valueName:"useVertexTangent"},{size:qe.float32,valueName:"useVertexColor_0"},{size:qe.float32,valueName:"useMaterialDoubleSide"},{size:qe.float32,valueName:"__diffuseTextureRenderYn"},{size:qe.float32,valueName:"__environmentTextureRenderYn"},{size:qe.float32,valueName:"__normalTextureRenderYn"},{size:qe.float32,valueName:"__occlusionTextureRenderYn"},{size:qe.float32,valueName:"__emissiveTextureRenderYn"},{size:qe.float32,valueName:"__roughnessTextureRenderYn"}]);class Zn{constructor(t,e){this.attributeHint=t,this.format=e,this.stride=qe[e]}}class Hn extends ke{constructor(){super(),Ve(this,"_volume",void 0)}get volume(){return this._volume||this.volumeCalculate(),this._volume}volumeCalculate(){let t,e,r,n,i,o,a,s,u,l,f,m,c=this.interleaveBuffer.stride;for(t=e=r=n=i=o=0,l=this.interleaveBuffer.data,f=0,m=this.interleaveBuffer.vertexCount;f<m;f++)a=f*c,s=a+1,u=a+2,t=l[a]<t?l[a]:t,n=l[a]>n?l[a]:n,e=l[s]<e?l[s]:e,i=l[s]>i?l[s]:i,r=l[u]<r?l[u]:r,o=l[u]>o?l[u]:o;return this._volume={},this._volume.volume=[n-t,i-e,o-r],this._volume.minX=t,this._volume.maxX=n,this._volume.minY=e,this._volume.maxY=i,this._volume.minZ=r,this._volume.maxZ=o,this._volume.xSize=Math.max(Math.abs(t),Math.abs(n)),this._volume.ySize=Math.max(Math.abs(e),Math.abs(i)),this._volume.zSize=Math.max(Math.abs(r),Math.abs(o)),this._volume.geometryRadius=Math.max(this._volume.xSize,this._volume.ySize,this._volume.zSize),this._volume}}class jn extends Hn{constructor(t,e,r){super(),Ve(this,"interleaveBuffer",void 0),Ve(this,"indexBuffer",void 0),Ve(this,"vertexState",void 0),this.interleaveBuffer=e,this.indexBuffer=r;let n=0,i=[];e.interleaveInfo.forEach((function(t,e){i.push({attributeHint:t.attributeHint,shaderLocation:e,offset:n,format:t.format}),n+=t.stride})),this.vertexState={vertexBuffers:[{arrayStride:n,attributes:i}]},this.volumeCalculate()}}class Jn extends ke{constructor(t,e,r,n,i,o){if(super(),Ve(this,"type",void 0),Ve(this,"vertexCount",void 0),Ve(this,"bufferDescriptor",void 0),Ve(this,"GPUBuffer",void 0),Ve(this,"redGPUContext",void 0),t.state.Buffer[r].has(e))return t.state.Buffer[r].get(e);let a;switch(this.redGPUContext=t,this.type=r,this.vertexCount=0,this.stride=0,r){case Jn.TYPE_VERTEX:a=o||GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST,this.interleaveInfo=i,i.forEach(t=>{this.vertexCount+=t.stride/Float32Array.BYTES_PER_ELEMENT,this.stride+=t.stride/Float32Array.BYTES_PER_ELEMENT}),this.vertexCount=n.length/this.vertexCount;break;case Jn.TYPE_INDEX:a=o||GPUBufferUsage.INDEX|GPUBufferUsage.COPY_DST,this.indexNum=n.length}this.bufferDescriptor={size:n.byteLength,usage:a},this.data=n,this.GPUBuffer=t.device.createBuffer(this.bufferDescriptor),t.device.queue.writeBuffer(this.GPUBuffer,0,n),t.state.Buffer[r].set(e,this)}update(t){this.data=t,this.redGPUContext.device.queue.writeBuffer(this.GPUBuffer,0,new Float32Array(t))}destroy(){this.GPUBuffer&&this.GPUBuffer.destroy(),this.GPUBuffer=null}}Ve(Jn,"TYPE_VERTEX","vertexBuffer"),Ve(Jn,"TYPE_INDEX","indexBuffer");let Qn=function(t,e,r,n,i,o,a,s,u){let l=0,f=e.length/3,m=0;for(;l<f;l++)e.length&&(t[m++]=e[3*l+0],t[m++]=e[3*l+1],t[m++]=e[3*l+2]),n.length?(t[m++]=n[3*l+0],t[m++]=n[3*l+1],t[m++]=n[3*l+2]):(t[m++]=0,t[m++]=0,t[m++]=0),i.length||i.push(0,0),i.length&&(t[m++]=i[2*l+0],t[m++]=i[2*l+1]),o.length?(t[m++]=o[2*l+0],t[m++]=o[2*l+1]):i.length&&(t[m++]=i[2*l+0],t[m++]=i[2*l+1]),r.length?(t[m++]=r[4*l+0],t[m++]=r[4*l+1],t[m++]=r[4*l+2],t[m++]=r[4*l+3]):(t[m++]=0,t[m++]=0,t[m++]=0,t[m++]=0),a.length?(t[m++]=a[4*l+0],t[m++]=a[4*l+1],t[m++]=a[4*l+2],t[m++]=a[4*l+3]):(t[m++]=0,t[m++]=0,t[m++]=0,t[m++]=0),s.length?(t[m++]=s[4*l+0],t[m++]=s[4*l+1],t[m++]=s[4*l+2],t[m++]=s[4*l+3]):(t[m++]=0,t[m++]=0,t[m++]=0,t[m++]=0),u.length?(t[m++]=u[4*l+0],t[m++]=u[4*l+1],t[m++]=u[4*l+2],t[m++]=u[4*l+3]):(t[m++]=0,t[m++]=0,t[m++]=0,t[m++]=0)},Kn=function(t,e,r,n,i,o,a,s,u,l,f,m){let c,h=n.componentType_BYTES_PER_ELEMENT,d=n.bufferViewByteStride,p=n.bufferURIDataView,v=n.getMethod,g=n.accessor.type,_=n.accessor.count,x=0,y=d/h,T=n.startIndex;switch(g){case"VEC4":if(d)for(c=T+_*(d/h);T<c;T++)x%y<4&&("WEIGHTS_0"==r?u.push(p[v](T*h,!0)):"JOINTS_0"==r?l.push(p[v](T*h,!0)):"COLOR_0"==r?f.push(p[v](T*h,!0)):"TANGENT"==r&&m.push(p[v](T*h,!0))),x++;else for(c=T+4*_;T<c;T++)"WEIGHTS_0"==r?u.push(p[v](T*h,!0)):"JOINTS_0"==r?l.push(p[v](T*h,!0)):"COLOR_0"==r?f.push(p[v](T*h,!0)):"TANGENT"==r&&m.push(p[v](T*h,!0)),x++;break;case"VEC3":if(d)for(c=T+_*(d/h);T<c;T++)x%y<3&&("NORMAL"==r?s.push(p[v](T*h,!0)):"POSITION"==r?i.push(p[v](T*h,!0)):"COLOR_0"==r&&(f.push(p[v](T*h,!0)),x%y==2&&f.push(1))),x++;else for(c=T+3*_;T<c;T++)"NORMAL"==r?s.push(p[v](T*h,!0)):"POSITION"==r?i.push(p[v](T*h,!0)):"COLOR_0"==r&&(f.push(p[v](T*h,!0)),x%3==2&&f.push(1)),x++;break;case"VEC2":if(d)for(c=T+_*(d/h);T<c;T++)x%y<2&&("TEXCOORD_0"==r?o.push(p[v](T*h,!0)):"TEXCOORD_1"==r?a.push(p[v](T*h,!0)):Je.throwFunc("VEC2에서 현재 지원하고 있지 않는 키",r)),x++;else for(c=T+2*_;T<c;T++)"TEXCOORD_0"==r?o.push(p[v](T*h,!0)):"TEXCOORD_1"==r?a.push(p[v](T*h,!0)):Je.throwFunc("VEC2에서 현재 지원하고 있지 않는 키",r),x++}},ti=function(){let t=function(t,e,r){return e.images[r].uri.indexOf("blob:http")>-1?e.images[r].uri:(e.images[r].uri.indexOf(";base64,")>-1?"":t.path)+e.images[r].uri},e=function(t,e,r){let n={magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",addressModeU:"repeat",addressModeV:"repeat",addressModeW:"repeat"},i={33071:"clamp-to-edge",33648:"mirror-repeat",10497:"repeat"},o={9728:"nearest",9729:"linear"},a={9728:"nearest",9729:"linear"};if(e.samplers){let t=e.samplers[r];"magFilter"in t&&(n.magFilter=o[t.magFilter]||"linear"),"minFilter"in t&&(n.minFilter=a[t.minFilter]||"linear"),"wrapS"in t&&(n.addressModeU=i[t.wrapS]),"wrapT"in t&&(n.addressModeV=i[t.wrapT])}return n.string=JSON.stringify(n),n};return function(r,n,i){let o,a,s=!1,u=.5;if("material"in i){let l=r.environmentTexture;o=new Wn(r.redGPUContext,null,l,null,null,null,null);let f=i.material,m=n.materials[f];if("doubleSided"in m&&(s=!!m.doubleSided),"alphaMode"in m&&(a=m.alphaMode),"alphaCutoff"in m&&(u=m.alphaCutoff),"baseColorTexture"in m.pbrMetallicRoughness){let i=m.pbrMetallicRoughness.baseColorTexture.index,a=n.textures[i],s=a.source,u=t(r,n,s),l=a.sampler,f=e(0,n,l);r.parsingResult.textureRawList.push({src:u,sampler:new ir(r.redGPUContext,f),targetTexture:"diffuseTexture",targetMaterial:o})}if("metallicRoughnessTexture"in m.pbrMetallicRoughness){let i=m.pbrMetallicRoughness.metallicRoughnessTexture.index,a=n.textures[i],s=a.source,u=t(r,n,s),l=a.sampler,f=e(0,n,l);r.parsingResult.textureRawList.push({src:u,sampler:new ir(r.redGPUContext,f),targetTexture:"roughnessTexture",targetMaterial:o})}let c=m.normalTexture;if(null!=c){c=c.index;let i=n.textures[c],a=i.source,s=t(r,n,a),u=i.sampler,l=e(0,n,u);r.parsingResult.textureRawList.push({src:s,sampler:new ir(r.redGPUContext,l),targetTexture:"normalTexture",targetMaterial:o})}let h=m.emissiveTexture;if(null!=h){h=h.index;let i=n.textures[h],a=i.source,s=t(r,n,a),u=i.sampler,l=e(0,n,u);r.parsingResult.textureRawList.push({src:s,sampler:new ir(r.redGPUContext,l),targetTexture:"emissiveTexture",targetMaterial:o})}let d,p,v,g=m.occlusionTexture;if(null!=g){g=g.index;let i=n.textures[g],a=i.source,s=t(r,n,a),u=i.sampler,l=e(0,n,u);r.parsingResult.textureRawList.push({src:s,sampler:new ir(r.redGPUContext,l),targetTexture:"occlusionTexture",targetMaterial:o})}"metallicFactor"in m.pbrMetallicRoughness&&(d=m.pbrMetallicRoughness.metallicFactor),"roughnessFactor"in m.pbrMetallicRoughness&&(p=m.pbrMetallicRoughness.roughnessFactor),v=m.pbrMetallicRoughness&&m.pbrMetallicRoughness.baseColorFactor?m.pbrMetallicRoughness.baseColorFactor:[1,1,1,1],o.baseColorFactor=v,m.pbrMetallicRoughness&&(o.metallicFactor=null!=d?d:1,o.roughnessFactor=null!=p?p:1),o.emissiveFactor=null!=m.emissiveFactor?m.emissiveFactor:new Float32Array([1,1,1]),m.pbrMetallicRoughness&&(m.pbrMetallicRoughness.metallicRoughnessTexture&&(o.roughnessTexCoordIndex=m.pbrMetallicRoughness.metallicRoughnessTexture.texCoord||0),m.pbrMetallicRoughness.baseColorTexture&&(o.diffuseTexCoordIndex=m.pbrMetallicRoughness.baseColorTexture.texCoord||0)),m.occlusionTexture&&(o.occlusionTexCoordIndex=m.occlusionTexture.texCoord||0,o.occlusionPower=m.occlusionTexture.strength||1),m.emissiveTexture&&(o.emissiveTexCoordIndex=m.emissiveTexture.texCoord||0),m.normalTexture&&(o.normalTexCoordIndex=m.normalTexture.texCoord||0)}else{let t=[Math.random(),Math.random(),Math.random(),1];o=new Wn(r.redGPUContext),o.baseColorFactor=t}return[o,s,a,u]}}(),ei=function(t,e,r,n,i,o,a,s,u,l){if(r.sparse){let o=[],a=[],s=[];!function(){let i,u,l,f,m,c=r.sparse,h=c.values,d=n.bufferViews[h.bufferView],p=d.buffer;n.buffers[p].uri&&(i=t.parsingResult.uris.buffers[p]),f=pn[r.componentType],f==Float32Array&&(m="getFloat32"),f==Uint32Array&&(m="getUint32"),f==Uint16Array&&(m="getUint16"),f==Int16Array&&(m="getInt16"),f==Uint8Array&&(m="getUint8"),f==Int8Array&&(m="getInt8");let v=r.byteOffset||0;switch(u=((d.byteOffset||0)+v)/f.BYTES_PER_ELEMENT,r.type){case"VEC3":for(l=u+f.BYTES_PER_ELEMENT*c.count/f.BYTES_PER_ELEMENT*3;u<l;u++)"NORMAL"==e?a.push(i[m](u*f.BYTES_PER_ELEMENT,!0)):"POSITION"==e&&o.push(i[m](u*f.BYTES_PER_ELEMENT,!0));break;case"VEC2":for(l=u+f.BYTES_PER_ELEMENT*c.count/f.BYTES_PER_ELEMENT*2;u<l;u++)"TEXCOORD_0"==e&&s.push(i[m](u*f.BYTES_PER_ELEMENT,!0))}}();let u,l,f,m,c,h=r.sparse,d=h.indices,p=n.bufferViews[d.bufferView],v=p.buffer;n.buffers[v].uri&&(u=t.parsingResult.uris.buffers[v]),m=pn[d.componentType],m==Uint16Array?c="getUint16":m==Uint8Array&&(c="getUint8");let g=d.byteOffset||0;l=((p.byteOffset||0)+g)/m.BYTES_PER_ELEMENT,f=l+m.BYTES_PER_ELEMENT*h.count/m.BYTES_PER_ELEMENT;let _=0;for(;l<f;l++){let t=u[c](l*m.BYTES_PER_ELEMENT,!0);i[3*t]=o[3*_],i[3*t+1]=o[3*_+1],i[3*t+2]=o[3*_+2],_++}}};class ri{constructor(t,e,r,n){let i=[];r.targets&&r.targets.forEach((function(r){let n={vertices:[],verticesColor_0:[],normals:[],uvs:[],uvs1:[],jointWeights:[],joints:[],tangents:[]};i.push(n);for(let i in r){let o=n.vertices,a=n.verticesColor_0,s=n.normals,u=n.uvs,l=n.uvs1,f=n.jointWeights,m=n.joints,c=n.tangents,h=r[i],d=new vn(t,e,h);Kn(0,0,i,d,o,u,l,s,f,m,a,c),d.accessor.sparse&&ei(t,i,d.accessor,e,o)}})),this.list=i,i.weights=n||[],this.origin=null}}let ni=function(t,e,r,n,i){if("mesh"in n){let r=n.mesh;(function(t,e,r){let n,i,o,a;r.name&&(n=r.name);let s=[];return r.primitives.forEach((function(u,l){let f,m,c,h,d=[],p=[],v=[],g=[],_=[],x=[],y=[],T=[],U=[];if(u.attributes)for(let r in u.attributes){let n=u.attributes[r],i=new vn(t,e,n);Kn(0,0,r,i,p,g,_,x,y,T,v,U),i.accessor.sparse&&ei(t,r,i.accessor,e,p)}if("indices"in u){let r=u.indices;!function(t,e,r,n){let i,o=r.componentType_BYTES_PER_ELEMENT,a=r.bufferURIDataView,s=r.getMethod,u=r.accessor.type,l=r.accessor.count,f=r.startIndex;switch(u){case"SCALAR":for(i=f+l;f<i;f++)n.push(a[s](f*o,!0))}}(0,0,new vn(t,e,r),d)}if(m=ti(t,e,u),i=m[1],o=m[2],a=m[3],m=m[0],m instanceof Wn&&t.parsingResult.materials.push(m),"mode"in u)switch(u.mode){case 0:c="point-list";break;case 1:case 2:case 3:c="line-list";break;case 4:c="triangle-list";break;case 5:case 6:c="triangle-strip"}h=x.length?x:Je.calculateNormals(p,d);let S,M=[];Qn(M,p,v,h,g,_,y,T,U);let b=[];if(p.length&&b.push(new Zn("aVertexPosition","float32x3")),h.length&&b.push(new Zn("aVertexNormal","float32x3")),g.length&&b.push(new Zn("aTexcoord","float32x2")),(_.length||g.length)&&b.push(new Zn("aTexcoord1","float32x2")),b.push(new Zn("aVertexColor_0","float32x4")),b.push(new Zn("aVertexWeight","float32x4")),b.push(new Zn("aVertexJoint","float32x4")),b.push(new Zn("aVertexTangent","float32x4")),S=new jn(t.redGPUContext,new Jn(t.redGPUContext,"testGLTF_interleaveBuffer_"+ke.getNextUUID(),Jn.TYPE_VERTEX,new Float32Array(M),b),d.length?new Jn(t.redGPUContext,"testGLTF_indexBuffer_"+ke.getNextUUID(),Jn.TYPE_INDEX,new Uint32Array(d)):null),m||Je.throwFunc("재질을 파싱할수없는경우 ",u),f=new jr(t.redGPUContext,S,m),n&&(f.name=n,t.parsingOption))for(let e in t.parsingOption)n.toLowerCase().indexOf(e)>-1&&t.parsingOption[e](f);switch(f.primitiveTopology=c||"triangle-list",i&&(f.cullMode="none",m.useMaterialDoubleSide=!0),o){case"BLEND":f.renderDrawLayerIndex=Wi.DRAW_LAYER_INDEX1,m.alphaBlend=2;break;case"MASK":m.alphaBlend=1,m.cutOff=a,m.useCutOff=!0;break;default:m.alphaBlend=0,m.useCutOff=!1}v.length&&(m.useVertexColor_0=!0),U.length&&(m.useVertexTangent=!0);let P=new ri(t,e,u,r.weights);P.list.forEach((function(t){let e;e=t.normals.length?t.normals:Je.calculateNormals(t.vertices,d);let r=[];Qn(r,t.vertices,t.verticesColor_0,e,t.uvs,t.uvs1,t.jointWeights,t.joints,t.tangents),t.interleaveData=r})),f._morphInfo=P,f._morphInfo.origin=new Float32Array(M);let w=f.geometry.interleaveBuffer.data,G=0;b.forEach((function(t){G+=t.size})),f._morphInfo.list.forEach((function(t,e){let r=0,n=w.length/G,i=null==f._morphInfo.list.weights[e]?.5:f._morphInfo.list.weights[e];for(;r<n;r++)w[r*G+0]+=t.vertices[3*r+0]*i,w[r*G+1]+=t.vertices[3*r+1]*i,w[r*G+2]+=t.vertices[3*r+2]*i})),f.geometry.interleaveBuffer.update(w),f._morphInfo.origin=new Float32Array(w),u.Mesh=f,s.push(f)})),s})(t,e,e.meshes[r]).forEach((function(r){i.addChild(n.Mesh=r),Un(r,n),"children"in n&&n.children.forEach((function(n){ni(t,e,n,e.nodes[n],r)})),"skin"in n&&Mn(t,e,e.skins[n.skin],r)}))}else{let o;if(t.parsingResult.groups[r]?(o=t.parsingResult.groups[r],n.Mesh=o):(o=new jr(t.redGPUContext),i.addChild(o),n.Mesh=o,t.parsingResult.groups[r]=o,t.parsingResult.groups[r].name=n.name),Un(o,n),"camera"in n){t.parsingResult.cameras[n.camera]._parentMesh=i,t.parsingResult.cameras[n.camera]._targetMesh=o;let e=new jr(t.redGPUContext);o.addChild(e),t.parsingResult.cameras[n.camera]._cameraMesh=e}"children"in n&&n.children.forEach((function(r){ni(t,e,r,e.nodes[r],o)})),"skin"in n&&Mn(t,e,e.skins[n.skin],o)}},ii=function(t,e,r){let n,i,o,a;o=e.scenes[0].nodes,n=0,i=o.length;let s=function(){a=o[n],ni(t,e,a,e.nodes[a],t.resultMesh),n++,n===i?r&&r():s()};s()};var oi;!function(){var t,e,r=(e={},function(t,r,n,i){if(e[t])requestAnimationFrame((function(){n(e[t])}));else{var o=new XMLHttpRequest;o.open("GET",t,!0),o.onreadystatechange=function(r){4===o.readyState&&200===o.status?(e[t]=o,n(o)):i(o,r)},o.send()}}),n=function(){var t={};return function(e,r,n){if(t[e])requestAnimationFrame((function(){r(t[e])}));else{var i=new XMLHttpRequest;i.open("GET",e,!0),i.overrideMimeType("application/octet-stream"),i.responseType="arraybuffer",i.onreadystatechange=function(o){4===i.readyState&&200===i.status?(t[e]=i,r(i)):n(i,o)},i.send()}}}();oi=function(e,i,o,s,u,l){if(!(this instanceof oi))return new oi(e,i,o,s,u,l);this.redGPUContext=e;var f=this;if(o.indexOf(".glb")>-1){var m;m=function(t){var e="";return t.map((function(t){e+=String.fromCharCode(t)})),e},n(i+o,(function(r){for(var n=null,i=null,o=null,a=null,u=0,l=0,c=null,h=new DataView(r.response,12),d=(m(new Uint8Array(r.response,0,4)),h.getUint32(4,!0),h.getUint32(8,!0),new DataView(r.response,12));u<d.byteLength;)l=d.getUint32(u,!0),u+=4,c=d.getUint32(u,!0),u+=4,1313821514===c?(i=new Uint8Array(r.response,12+u,l),n=m(i)):5130562===c&&(a=12+u,o=r.response.slice(a,a+l)),u+=l;if(null===n)throw new Error("JSON content not found");var p=JSON.parse(n),v=o;p.images&&p.images.forEach((function(t){if("image/png"===t.mimeType||"image/jpeg"===t.mimeType||"image/gif"===t.mimeType){var e;e=p.bufferViews[t.bufferView].byteOffset||0;var r=v.slice(e,e+p.bufferViews[t.bufferView].byteLength),n=new Blob([new Uint8Array(r)],{type:t.mimeType});t.uri=URL.createObjectURL(n)}})),t(f,e,p,(function(){s&&s(f)}),v)}),(function(t,e){}))}else r(i+o,null,(function(r){t(f,e,JSON.parse(r.response),(function(){s&&s(f)}))}),(function(t,e){}));this.redGPUContext=e,this.path=i,this.fileName=o,this.resultMesh=new jr(e),this.resultMesh.name="instanceOfGLTFLoader_"+ke.getNextUUID(),this.parsingResult={groups:[],materials:[],uris:{buffers:[]},textures:{},textureRawList:[],cameras:[],animations:[]},this.parsingOption=l,this.environmentTexture=u||null;var c=null;this.stopAnimation=function(){a.indexOf(c)>-1&&a.splice(a.indexOf(c),1)},this.playAnimation=function(t){a.push(c={startTime:performance.now(),targetAnimationData:t})}};var i,o,a=[];oi.animationLooper=t=>function(t,e){let r,n,i,o,a,s,u,l,f,m,c,h,d,p,v,g,_,x,y,T,U,S,M,b,P,w,G,E,B,C,L,R,D,I,N,A,F,V,O,Y,X,z,$,k,q,W,Z,H,j,J,Q,K,tt,et,rt,nt,it,ot,at,st,ut=e.length;for(;ut--;)for(C=e[ut],E=C.targetAnimationData,L=E.length;L--;){for(R=E[L],r=(t-C.startTime)%(1e3*E.maxTime)/1e3,D=R.target,A=R.time,F=R.time,V=A.length,O=0,N=A.length-1,I=0,n=A[N],i=A[I];O<V;O++){let t=A[O];if(t<r&&(N=O,n=A[N],null==A[N+1]?(I=0,i=A[I]):(I=N+1,i=A[I])),0==O&&r<A[O]){N=V-1,n=A[N],I=O,i=A[I],r=t;break}if(O==V-1&&r>t){N=0,n=A[N],I=V-1,i=A[I],r=t;break}}if(D&&(D.dirtyTransform=!0),"CUBICSPLINE"==R.interpolation){B=i-n,"NaN"==B.toString()&&(B=0);let t=(r-n)/B;"NaN"==t.toString()&&(t=0);let e=t*t,E=e*t,C=-2*E+3*e,L=E-e,A=1-C,O=L-e+t;if(D){let t,e,r,n,i=R.data;switch(R.key){case"rotation":if(M=i[12*N+4],b=i[12*N+5],P=i[12*N+6],w=i[12*N+7],G=M*M+b*b+P*P+w*w,G>0&&(G=1/Math.sqrt(G)),v=M*G,g=b*G,_=P*G,x=w*G,M=i[12*I+4],b=i[12*I+5],P=i[12*I+6],w=i[12*I+7],G=M*M+b*b+P*P+w*w,G>0&&(G=1/Math.sqrt(G)),o=M*G,a=b*G,s=P*G,u=w*G,M=i[12*N+8],b=i[12*N+9],P=i[12*N+10],w=i[12*N+11],G=M*M+b*b+P*P+w*w,G>0&&(G=1/Math.sqrt(G)),y=M*G,T=b*G,U=P*G,S=w*G,M=i[12*N+0],b=i[12*N+1],P=i[12*N+2],w=i[12*N+3],G=M*M+b*b+P*P+w*w,G>0&&(G=1/Math.sqrt(G)),c=M*G,h=b*G,d=P*G,p=w*G,N!=V-1){t=v,e=y*B,r=o,n=c*B,M=A*t+O*e+C*r+L*n,t=g,e=T*B,r=a,n=h*B,b=A*t+O*e+C*r+L*n,t=_,e=U*B,r=s,n=d*B,P=A*t+O*e+C*r+L*n,t=x,e=S*B,r=u,n=p*B,w=A*t+O*e+C*r+L*n;let i=[],l=[0,0,0],f=M+M,m=b+b,G=P+P,E=M*f,R=M*m,I=M*G,N=b*m,F=b*G,V=P*G,Y=w*f,X=w*m,z=w*G;i[0]=1-(N+V),i[4]=R-z,i[8]=I+X,i[1]=R+z,i[5]=1-(E+V),i[9]=F-Y,i[2]=I-X,i[6]=F+Y,i[10]=1-(E+N),i[3]=0,i[7]=0,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1;let $=i[0],k=i[4],q=i[8],W=i[5],Z=i[9],H=i[6],j=i[10];l[1]=Math.asin(Math.max(-1,Math.min(1,q))),Math.abs(q)<.99999?(l[0]=Math.atan2(-Z,j),l[2]=Math.atan2(-k,$)):(l[0]=Math.atan2(H,W),l[2]=0),l[0]=-180*l[0]/Math.PI,l[1]=-180*l[1]/Math.PI,l[2]=-180*l[2]/Math.PI,D._rotationX=l[0],D._rotationY=l[1],D._rotationZ=l[2]}break;case"translation":o=i[9*N+3],a=i[9*N+4],s=i[9*N+5],v=i[9*I+3],g=i[9*I+4],_=i[9*I+5],y=i[9*N+6],T=i[9*N+7],U=i[9*N+8],l=i[9*I+0],f=i[9*I+1],m=i[9*I+2],N!=V-1&&(t=v,e=y*B,r=o,n=l*B,D._x=A*t+O*e+C*r+L*n,t=g,e=T*B,r=a,n=f*B,D._y=A*t+O*e+C*r+L*n,t=_,e=U*B,r=s,n=m*B,D._z=A*t+O*e+C*r+L*n);break;case"scale":o=i[9*N+3],a=i[9*N+4],s=i[9*N+5],v=i[9*I+3],g=i[9*I+4],_=i[9*I+5],y=i[9*N+6],T=i[9*N+7],U=i[9*N+8],l=i[9*I+0],f=i[9*I+1],m=i[9*I+2],N!=V-1&&(t=v,e=y*B,r=o,n=l*B,D._scaleX=A*t+O*e+C*r+L*n,t=g,e=T*B,r=a,n=f*B,D._scaleY=A*t+O*e+C*r+L*n,t=_,e=U*B,r=s,n=m*B,D._scaleZ=A*t+O*e+C*r+L*n);break;case"weights":for(Y=R.targets.length;Y--;){let t;for(X=R.targets[Y],z=X.geometry.interleaveBuffer.data,$=X._morphInfo.origin,k=X.geometry.interleaveBuffer.stride,W=z.length/k,et=X._morphInfo.list.length,F=R.data,rt=X._morphInfo.list,rt.cacheData||(rt.cacheData={}),q=0;q<W;q++){if(tt=q*k,st=rt.cacheData[tt+"_"+N+"_"+I],st)Z=st[0],H=st[1],j=st[2],J=st[3],Q=st[4],K=st[5];else{for(Z=$[tt],H=$[tt],j=$[tt+1],J=$[tt+1],Q=$[tt+2],K=$[tt+2],nt=et;nt--;)nt%3==1&&(it=F[N*et+nt],ot=F[I*et+nt],at=rt[nt].interleaveData,t=at[tt],Z+=it*t,H+=ot*t,t=at[tt+1],j+=it*t,J+=ot*t,t=at[tt+2],Q+=it*t,K+=ot*t);rt.cacheData[tt+"_"+N+"_"+I]=[Z,H,j,J,Q,K]}z[tt]=Z+B*(H-Z),z[tt+1]=j+B*(J-j),z[tt+2]=Q+B*(K-Q)}X.geometry.interleaveBuffer.update(z)}}}}else if(B="STEP"==R.interpolation?0:(r-n)/(i-n),"NaN"==B.toString()&&(B=0),D){let t=R.data;switch(R.key){case"rotation":let e,r,n,i,l;M=t[4*N],b=t[4*N+1],P=t[4*N+2],w=t[4*N+3],G=M*M+b*b+P*P+w*w,G>0&&(G=1/Math.sqrt(G)),v=M*G,g=b*G,_=P*G,x=w*G,M=t[4*I],b=t[4*I+1],P=t[4*I+2],w=t[4*I+3],G=M*M+b*b+P*P+w*w,G>0&&(G=1/Math.sqrt(G)),o=M*G,a=b*G,s=P*G,u=w*G,r=v*o+g*a+_*s+x*u,r<0&&(r=-r,o=-o,a=-a,s=-s,u=-u),1-r>Fe.glMatrix.EPSILON?(e=Math.acos(r),n=Math.sin(e),i=Math.sin((1-B)*e)/n,l=Math.sin(B*e)/n):(i=1-B,l=B),M=i*v+l*o,b=i*g+l*a,P=i*_+l*s,w=i*x+l*u;let f=[],m=[0,0,0],c=M+M,h=b+b,d=P+P,p=M*c,y=M*h,T=M*d,U=b*h,S=b*d,E=P*d,C=w*c,L=w*h,A=w*d;f[0]=1-(U+E),f[4]=y-A,f[8]=T+L,f[1]=y+A,f[5]=1-(p+E),f[9]=S-C,f[2]=T-L,f[6]=S+C,f[10]=1-(p+U),f[3]=0,f[7]=0,f[11]=0,f[12]=0,f[13]=0,f[14]=0,f[15]=1;let V=f[0],O=f[4],ut=f[8],lt=f[5],ft=f[9],mt=f[6],ct=f[10];m[1]=Math.asin(Math.max(-1,Math.min(1,ut))),Math.abs(ut)<.99999?(m[0]=Math.atan2(-ft,ct),m[2]=Math.atan2(-O,V)):(m[0]=Math.atan2(mt,lt),m[2]=0),m[0]=-180*m[0]/Math.PI,m[1]=-180*m[1]/Math.PI,m[2]=-180*m[2]/Math.PI,D._rotationX=m[0],D._rotationY=m[1],D._rotationZ=m[2];break;case"translation":o=t[3*I],a=t[3*I+1],s=t[3*I+2],v=t[3*N],g=t[3*N+1],_=t[3*N+2],D._x=v+B*(o-v),D._y=g+B*(a-g),D._z=_+B*(s-_);break;case"scale":o=t[3*I],a=t[3*I+1],s=t[3*I+2],v=t[3*N],g=t[3*N+1],_=t[3*N+2],D._scaleX=v+B*(o-v),D._scaleY=g+B*(a-g),D._scaleZ=_+B*(s-_);break;case"weights":for(Y=R.targets.length;Y--;){let t;for(X=R.targets[Y],z=X.geometry.interleaveBuffer.data,$=X._morphInfo.origin,k=X.geometry.interleaveBuffer.stride,W=z.length/k,et=X._morphInfo.list.length,F=R.data,rt=X._morphInfo.list,rt.cacheData||(rt.cacheData={}),q=0;q<W;q++){if(tt=q*k,st=rt.cacheData[tt+"_"+N+"_"+I],st)Z=st[0],H=st[1],j=st[2],J=st[3],Q=st[4],K=st[5];else{for(Z=$[tt],H=$[tt],j=$[tt+1],J=$[tt+1],Q=$[tt+2],K=$[tt+2],nt=et;nt--;)it=F[N*et+nt],ot=F[I*et+nt],at=rt[nt].interleaveData,t=at[tt],Z+=it*t,H+=ot*t,t=at[tt+1],j+=it*t,J+=ot*t,t=at[tt+2],Q+=it*t,K+=ot*t;rt.cacheData[tt+"_"+N+"_"+I]=[Z,H,j,J,Q,K]}z[tt]=Z+B*(H-Z),z[tt+1]=j+B*(J-j),z[tt+2]=Q+B*(K-Q)}X.geometry.interleaveBuffer.update(z)}}}}}(t,a),i=function(t){void 0===t.asset&&Je.throwFunc("GLTFLoader - asset은 반드시 정의되어야함"),t.asset.version[0]<2&&Je.throwFunc("GLTFLoader - asset의 버전은 2.0이상이어야함")},o=function(t,e,r){var i=0,o=0;e.buffers.forEach((function(e,a){if(e._redURIkey="buffers",e._redURIIndex=a,i++,e.uri instanceof ArrayBuffer)o++,t.parsingResult.uris[e._redURIkey][e._redURIIndex]=new DataView(e.uri),o==i&&r&&r();else{var s="data:"==e.uri.substr(0,5)?e.uri:t.path+e.uri;n(s,(function(n){o++,t.parsingResult.uris[e._redURIkey][e._redURIIndex]=new DataView(n.response),o==i&&r&&r()}),(function(t,e){}))}}))},t=function(t,e,r,n,a){i(r),a?(r.buffers[0].uri=a,o(t,r,(function(){Tn(t,r),ii(t,r,(function(){new dn(t.redGPUContext,t.parsingResult.textureRawList,e=>{e.textures.forEach(t=>{t.userInfo.targetMaterial[t.userInfo.targetTexture]=t.texture}),_n(t,r).then(t=>{n&&n()})})}))}))):o(t,r,(function(){Tn(t,r),ii(t,r,(function(){new dn(t.redGPUContext,t.parsingResult.textureRawList,e=>{e.textures.forEach(t=>{t.userInfo.targetMaterial[t.userInfo.targetTexture]=t.texture}),_n(t,r).then(t=>{n&&n()})})}))}))}}();var ai=oi;let si=new Float32Array(1);var ui=new WeakMap,li=new WeakMap,fi=new WeakMap;class mi extends($n.mix(Cn,$n.alpha,$n.diffuseTexture)){constructor(t,e){super(t),ze(this,ui,{writable:!0,value:void 0}),ze(this,li,{writable:!0,value:0}),ze(this,fi,{writable:!0,value:{}}),e&&(this.addAction("default",e),this.setAction("default")),this.needResetBindingInfo=!0,this.sheetRect=new Float32Array(4),this.currentIndex=0,this.loop=!0,this._playYn=!0}get frameRate(){return Oe(this,ui)}set frameRate(t){t<1&&Ye(this,ui,1),Ye(this,ui,t),this._perFrameTime=1e3/Oe(this,ui)}update(t){if(Oe(this,li)||Ye(this,li,this._perFrameTime+t),this._playYn&&Oe(this,li)<t){let e=parseInt((t-Oe(this,li))/this._perFrameTime);e=e||1,Ye(this,li,this._perFrameTime+t),this.currentIndex+=e,this.currentIndex>=this.totalFrame&&(this.loop?(this._playYn=!0,this.currentIndex=0):(this._playYn=!1,this.currentIndex=this.totalFrame-1))}this.sheetRect[0]=1/this.segmentW,this.sheetRect[1]=1/this.segmentH,this.sheetRect[2]=this.currentIndex%this.segmentW/this.segmentW,this.sheetRect[3]=Math.floor(this.currentIndex/this.segmentH)/this.segmentH,this.uniformBuffer_vertex&&this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap.sheetRect,this.sheetRect)}addAction(t,e){Oe(this,fi)[t]=e}removeAction(t,e){delete Oe(this,fi)[t]}setAction(t){this.diffuseTexture=Oe(this,fi)[t].texture,this.segmentW=Oe(this,fi)[t].segmentW,this.segmentH=Oe(this,fi)[t].segmentH,this.totalFrame=Oe(this,fi)[t].totalFrame,this.frameRate=Oe(this,fi)[t].frameRate,this.currentIndex=0,Ye(this,li,0)}play(){this._playYn=!0,Ye(this,li,0)}pause(){this._playYn=!1}stop(){this._playYn=!1,this.currentIndex=0}gotoAndStop(t){t>this.totalFrame-1&&(t=this.totalFrame-1),t<0&&(t=0),this._playYn=!1,this.currentIndex=t}gotoAndPlay(t){t>this.totalFrame-1&&(t=this.totalFrame-1),t<0&&(t=0),this._playYn=!0,this.currentIndex=t,Ye(this,li,0)}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"diffuseTexture":this._diffuseTexture=t,r=e}r&&(si[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],si):this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],si)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,si[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],si):this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],si),this.needResetBindingInfo=!0)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:2,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:3,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}let ci;Ve(mi,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${rr.GLSL_SystemUniforms_vertex.meshUniforms}\n    layout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        vec4 sheetRect;\n    } vertexUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out float vMouseColorID;\n\tlayout( location = 3 ) out float vSumOpacity;\t\n\tvoid main() {\n\t\tvUV = uv;\n\t\tvUV = vec2(\n\t\t\tvUV.s * vertexUniforms.sheetRect.x + vertexUniforms.sheetRect.z,\n\t\t\tvUV.t * vertexUniforms.sheetRect.y -vertexUniforms.sheetRect.w\n\t\t);\t\n\t\tvSumOpacity = meshUniforms.sumOpacity;\t\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\tvNormal = normal;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\n\t}\n\t`),Ve(mi,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\tconst float TRUTHY = 1.0;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in float vMouseColorID;\t\n\tlayout( location = 3 ) in float vSumOpacity;\t\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform FragmentUniforms {\n        float alpha;\n        //\n        float __diffuseTextureRenderYn;\n    } fragmentUniforms;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform texture2D uDiffuseTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor = texture(sampler2D(uDiffuseTexture, uSampler), vUV) ;\n\t\t\n\t\tif(diffuseColor.a<0.05) discard;\n\t\t\t\n\t\toutColor = diffuseColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve(mi,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(mi,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}}]}),Ve(mi,"uniformBufferDescriptor_vertex",[{size:qe.float32x4,valueName:"sheetRect"}]),Ve(mi,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"alpha"},{size:qe.float32,valueName:"__diffuseTextureRenderYn"}]);let hi,di=!1,pi=t=>{hi||(hi=document.createElement("div"),hi.style.cssText="\n\t\t\tposition:fixed;\n\t\t\tbottom:0; left:0;\n\t\t\twidth : 200px;\n\t\t\toverflow : hidden;\n\t\t\tbackground:rgba(0, 0, 0, 0.5);\n\t\t\tpadding:5px;\n\t\t\tfont-size:11px;\n\t\t\tcolor:#fff;\n\t\t")};const vi={LEFT_TOP:"leftTop",RIGHT_TOP:"rightTop",LEFT_BOTTOM:"leftBottom",RIGHT_BOTTOM:"rightBottom",resetData:t=>(ci=[],t.forEach(t=>ci.push({view:t,object3DNum:0,dirtyTransformNum:0,drawCallNum:0,triangleNum:0,dirtyPipelineNum:0,x:t.x,y:t.y,width:t.width,height:t.height,viewRect:t.viewRect,baseRenderTime:0,postEffectRenderTime:0,finalRenderTime:0})),ci),visible:(t,e=vi.LEFT_BOTTOM)=>{di=t,pi(),di?(document.body.appendChild(hi),vi.setLocation(e)):hi.parentNode&&document.body.removeChild(hi)},setLocation:(t=vi.LEFT_BOTTOM)=>{switch(hi.style.top="",hi.style.bottom="",hi.style.left="",hi.style.right="",t){case vi.LEFT_TOP:hi.style.left=hi.style.top=0;break;case vi.LEFT_BOTTOM:hi.style.left=hi.style.bottom=0;break;case vi.RIGHT_TOP:hi.style.right=hi.style.top=0;break;case vi.RIGHT_BOTTOM:hi.style.right=hi.style.bottom=0}},update:t=>{pi(),di&&(hi.innerHTML="",ci.forEach(t=>{let e,r,n,i,o={x:1,width:1};e=document.createElement("div"),e.style.cssText="\n\t\t\t\t\tbackground : rgba(0,0,0,0.75);\n\t\t\t\t\tmargin-bottom : 1px;\n\t\t\t\t\tpadding : 8px;\n\t\t\t\t",hi.appendChild(e),r=document.createElement("div"),r.style.color="#fff",e.appendChild(r),n="";for(let e in t)i=t[e],"number"==typeof i&&(e.includes("Time")&&(i=i.toFixed(5)),i=i.toLocaleString()),n+=`<span style="color:rgba(255,255,255,0.5)">${e}</span> : ${i}`,n+=o[e]?" / ":"<br>";r.innerHTML=n}))}};var gi=new WeakMap;class _i extends Hn{constructor(t,e=1,r=1,n=1,i=1,o=1,a=!1){let s;if(super(),ze(this,gi,{writable:!0,value:function(){let t,e,r,n,i,o,a,s,u,l,f,m,c,h,d,p;return function(v,g,_,x,y,T,U,S){t=_/2,e=x/2,r=Math.floor(y)||1,n=Math.floor(T)||1,i=r+1,o=n+1,a=_/r,s=x/n;const M=[],b=[];for(l=0;l<o;l++)for(m=l*s-e,u=0;u<i;u++)f=u*a-t,M.push(f,-m,0,0,0,1,u/r*U,(S?1-l/n:l/n)*U);for(l=0;l<n;l++)for(u=0;u<r;u++)c=u+i*l,h=u+i*(l+1),d=u+1+i*(l+1),p=u+1+i*l,b.push(c,h,p,h,d,p);return new jn(v,new Jn(v,g+"_interleaveBuffer",Jn.TYPE_VERTEX,new Float32Array(M),[new Zn("vertexPosition","float32x3"),new Zn("vertexNormal","float32x3"),new Zn("texcoord","float32x2")]),new Jn(v,g+"_indexBuffer",Jn.TYPE_INDEX,new Uint32Array(b)))}}()}),s=[this.constructor.name,e,r,n,i,o,a].join("_"),t.state.Geometry.has(s))return t.state.Geometry.get(s);let u=Oe(this,gi).call(this,t,s,e,r,n,i,o,a);this.interleaveBuffer=u.interleaveBuffer,this.indexBuffer=u.indexBuffer,this.vertexState=u.vertexState,t.state.Geometry.set(s,this)}}let xi=new Float32Array(1);class yi extends($n.mix(Cn,$n.diffuseTexture,$n.alpha)){constructor(t,e){super(t),this.diffuseTexture=e,this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"diffuseTexture":this._diffuseTexture=t,r=e}r&&(xi[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],xi):this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],xi)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,xi[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],xi):this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],xi),this.needResetBindingInfo=!0)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:1,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:2,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}Ve(yi,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${rr.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out float vMouseColorID;\t\n\tlayout( location = 3 ) out float vSumOpacity;\n\tvoid main() {\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t}\n\t`),Ve(yi,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\tconst float TRUTHY = 1.0;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in float vMouseColorID;\t\n\tlayout( location = 3 ) in float vSumOpacity;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float alpha;\n        //\n        float __diffuseTextureRenderYn;\n    } fragmentUniforms;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uDiffuseTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor = texture(sampler2D(uDiffuseTexture, uSampler), vUV) ;\n\t\toutColor = diffuseColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve(yi,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(yi,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}}]}),Ve(yi,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(yi,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"alpha"},{size:qe.float32,valueName:"__diffuseTextureRenderYn"}]);let Ti=new Float32Array(1);class Ui extends yi{constructor(t,e){super(t),Ve(this,"_sprite3DMode",!0),this.diffuseTexture=e,this.needResetBindingInfo=!0}get sprite3DMode(){return this._sprite3DMode}set sprite3DMode(t){this._sprite3DMode=t,Ti[0]=t?1:0,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap.sprite3DMode,Ti)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:2,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:3,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}Ve(Ui,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${rr.GLSL_SystemUniforms_vertex.meshUniforms}\n    ${rr.GLSL_SystemUniforms_vertex.getSprite3DMatrix}    \n\tlayout(location = 0) in vec3 a_pos;\n    layout(location = 1) in vec2 a_uv;\n    layout(location = 2) in vec3 position;\n    layout(location = 3) in float alpha;\n    layout(location = 4) in vec3 rotation;\n    layout(location = 5) in float scale;\n\tlayout(location = 0 ) out vec2 vUV;\n\tlayout(location = 1 ) out float vMouseColorID;\t\n\tlayout(location = 2 ) out float vSumOpacity;\n\tlayout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        float sprite3DMode;\n    } vertexUniforms;\n\tmat4 rotationMTX(vec3 t)\n    {\n       float s = sin(t[0]);float c = cos(t[0]);\n       mat4 m1 = mat4( 1,0,0,0, 0,c,s,0, 0,-s,c,0, 0,0,0,1);s = sin(t[1]);c = cos(t[1]);\n       mat4 m2 = mat4(c,0,-s,0, 0,1,0,0, s,0,c,0,  0,0,0,1);s = sin(t[2]);c = cos(t[2]);\n       mat4 m3 = mat4(c,s,0,0, -s,c,0,0, 0,0,1,0,  0,0,0,1);\n       return m3*m2*m1;\n    }\n\tvoid main() {\n\t\tvUV = a_uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity * alpha;\n\t\tfloat ratio = systemUniforms.resolution.x/systemUniforms.resolution.y; \n\t\tif( vertexUniforms.sprite3DMode == 1.0 ) {\n\t\t\tmat4 scaleMTX = mat4(\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\tposition, 1\n\t\t\t) *\n\t\t\tmat4(\n\t\t\t\tscale, 0, 0, 0,\n\t\t\t\t0, scale , 0, 0,\n\t\t\t\t0, 0, scale, 0,\n\t\t\t\t0, 0, 0, 1\n\t\t\t) ;\n\t\t\tgl_Position = systemUniforms.perspectiveMTX * getSprite3DMatrix( systemUniforms.cameraMTX,  scaleMTX ) * rotationMTX(vec3(0,0, rotation.z)) * vec4(a_pos , 1);\n\t\t}else{\n\t\t\tmat4 scaleMTX = mat4(\n\t\t\t\tscale, 0, 0, 0,\n\t\t\t\t0, scale, 0, 0,\n\t\t\t\t0, 0, scale, 0,\n\t\t\t\tposition, 1\n\t\t\t)\n\t\t\t* rotationMTX(rotation);\n\t\t\tgl_Position = systemUniforms.perspectiveMTX *  systemUniforms.cameraMTX * scaleMTX * vec4(a_pos , 1);\n\t\t}\n\t\t\n\t}\n\t`),Ve(Ui,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\tconst float TRUTHY = 1.0;\n\tlayout( location = 0 ) in vec2 vUV;\n\tlayout( location = 1 ) in float vMouseColorID;\t\n\tlayout( location = 2 ) in float vSumOpacity;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform FragmentUniforms {\n        float alpha;\n        //\n        float __diffuseTextureRenderYn;\n    } fragmentUniforms;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform texture2D uDiffuseTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor = texture(sampler2D(uDiffuseTexture, uSampler), vUV) ;\n\t\toutColor = diffuseColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve(Ui,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Ui,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}}]}),Ve(Ui,"uniformBufferDescriptor_vertex",[{size:qe.float32,valueName:"sprite3DMode"}]),Ve(Ui,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"alpha"},{size:qe.float32,valueName:"__diffuseTextureRenderYn"}]);var Si=new WeakMap;class Mi extends ke{constructor(t,e){super(),Ve(this,"redGPUContext",void 0),ze(this,Si,{writable:!0,value:void 0}),Ve(this,"GPURenderPipeline",void 0),this.redGPUContext=t,Ye(this,Si,e),this.GPURenderPipeline=null}update(t,e){let r=Oe(this,Si);const n=t.device,i={layout:n.createPipelineLayout({bindGroupLayouts:[e.systemUniformInfo_vertex.GPUBindGroupLayout,e.systemUniformInfo_fragment.GPUBindGroupLayout,r.GPUBindGroupLayout,r._material.GPUBindGroupLayout]}),vertex:{module:r._material.vShaderModule.GPUShaderModule,entryPoint:"main",buffers:[{arrayStride:32,stepMode:"vertex",attributes:[{shaderLocation:0,offset:0,format:"float32x3"},{shaderLocation:1,offset:24,format:"float32x2"}]},{arrayStride:4*r._PROPERTY_NUM,stepMode:"instance",attributes:[{shaderLocation:2,offset:16,format:"float32x3"},{shaderLocation:3,offset:28,format:"float32"},{shaderLocation:4,offset:32,format:"float32x3"},{shaderLocation:5,offset:44,format:"float32"}]}]},fragment:{module:r._material.fShaderModule.GPUShaderModule,entryPoint:"main",targets:[{format:navigator.gpu.getPreferredCanvasFormat(t.adapter),blend:{color:{srcFactor:"src-alpha",dstFactor:"one",operation:"add"},alpha:{srcFactor:"src-alpha",dstFactor:"one",operation:"add"}}},{format:"rgba16float"}]},primitive:{topology:r._primitiveTopology,cullMode:r._cullMode,frontFace:"ccw"},depthStencil:{format:"depth24plus-stencil8",depthWriteEnabled:r._depthWriteEnabled,depthCompare:r._depthCompare},multisample:{count:4}};this.GPURenderPipeline=n.createRenderPipeline(i)}}var bi=new WeakMap;class Pi extends Hr{constructor(t,e=1,r={},n,i){super(t),Ve(this,"redGPUContext",void 0),ze(this,bi,{writable:!0,value:void 0}),Ve(this,"computePipeline",void 0),Ve(this,"particleBindGroup",void 0),Ve(this,"particleBuffer",void 0),Ve(this,"minLife",2e3),Ve(this,"maxLife",1e4),Ve(this,"minStartX",-1),Ve(this,"maxStartX",1),Ve(this,"minEndX",-15),Ve(this,"maxEndX",15),Ve(this,"minStartY",-1),Ve(this,"maxStartY",1),Ve(this,"minEndY",-15),Ve(this,"maxEndY",15),Ve(this,"minStartZ",-1),Ve(this,"maxStartZ",1),Ve(this,"minEndZ",-15),Ve(this,"maxEndZ",15),Ve(this,"minStartAlpha",0),Ve(this,"maxStartAlpha",1),Ve(this,"minEndAlpha",0),Ve(this,"maxEndAlpha",0),Ve(this,"minStartScale",0),Ve(this,"maxStartScale",.25),Ve(this,"minEndScale",0),Ve(this,"maxEndScale",3),Ve(this,"minStartRotationX",360*-Math.random()),Ve(this,"maxStartRotationX",360*Math.random()),Ve(this,"minEndRotationX",360*-Math.random()),Ve(this,"maxEndRotationX",360*Math.random()),Ve(this,"minStartRotationY",360*-Math.random()),Ve(this,"maxStartRotationY",360*Math.random()),Ve(this,"minEndRotationY",360*-Math.random()),Ve(this,"maxEndRotationY",360*Math.random()),Ve(this,"minStartRotationZ",360*-Math.random()),Ve(this,"maxStartRotationZ",360*Math.random()),Ve(this,"minEndRotationZ",360*-Math.random()),Ve(this,"maxEndRotationZ",360*Math.random()),Ve(this,"easeX",Pi.Linear),Ve(this,"easeY",Pi.Linear),Ve(this,"easeZ",Pi.Linear),Ve(this,"easeScale",Pi.Linear),Ve(this,"easeRotationX",Pi.Linear),Ve(this,"easeRotationY",Pi.Linear),Ve(this,"easeRotationZ",Pi.Linear),Ve(this,"easeAlpha",Pi.Linear),this.redGPUContext=t,this._material=new Ui(t);for(const t in r)this.hasOwnProperty(t)&&(this[t]=r[t]);this.geometry=i||new _i(t),this.texture=n,this.renderDrawLayerIndex=Wi.DRAW_LAYER_INDEX2_Z_POINT_SORT,this._PROPERTY_NUM=44,this.blendColorSrc="src-alpha",this.blendColorDst="one",this.blendAlphaSrc="src-alpha",this.blendAlphaDst="one",this.depthWriteEnabled=!1,this.cullMode="none",Ye(this,bi,new Float32Array([performance.now(),this._x,this._y,this._z,this.minLife,this.maxLife,this.minStartX,this.maxStartX,this.minEndX,this.maxEndX,this.easeX,this.minStartY,this.maxStartY,this.minEndY,this.maxEndY,this.easeY,this.minStartZ,this.maxStartZ,this.minEndZ,this.maxEndZ,this.easeZ,this.minStartAlpha,this.maxStartAlpha,this.minEndAlpha,this.maxEndAlpha,this.easeAlpha,this.minStartScale,this.maxStartScale,this.minEndScale,this.maxEndScale,this.easeScale,this.minStartRotationX,this.maxStartRotationX,this.minEndRotationX,this.maxEndRotationX,this.easeRotationX,this.minStartRotationY,this.maxStartRotationY,this.minEndRotationY,this.maxEndRotationY,this.easeRotationY,this.minStartRotationZ,this.maxStartRotationZ,this.minEndRotationZ,this.maxEndRotationZ,this.easeRotationZ]));let o={size:Oe(this,bi).byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST};this.simParamBuffer=t.device.createBuffer(o),t.device.queue.writeBuffer(this.simParamBuffer,0,Oe(this,bi)),this.pipeline=new Mi(t,this),this.particleNum=e||1}get particleNum(){return this._particleNum}set particleNum(t){this._particleNum=t,this.setParticleData()}get sprite3DMode(){return this._material._sprite3DMode}set sprite3DMode(t){return this._material.sprite3DMode=t}get texture(){return this._material.diffuseTexture}set texture(t){return this._material.diffuseTexture=t}get material(){return this._material}set material(t){}compute(t){Oe(this,bi).set([t,this._x,this._y,this._z,this.minLife,this.maxLife,this.minStartX,this.maxStartX,this.minEndX,this.maxEndX,this.easeX,this.minStartY,this.maxStartY,this.minEndY,this.maxEndY,this.easeY,this.minStartZ,this.maxStartZ,this.minEndZ,this.maxEndZ,this.easeZ,this.minStartAlpha,this.maxStartAlpha,this.minEndAlpha,this.maxEndAlpha,this.easeAlpha,this.minStartScale,this.maxStartScale,this.minEndScale,this.maxEndScale,this.easeScale,this.minStartRotationX,this.maxStartRotationX,this.minEndRotationX,this.maxEndRotationX,this.easeRotationX,this.minStartRotationY,this.maxStartRotationY,this.minEndRotationY,this.maxEndRotationY,this.easeRotationY,this.minStartRotationZ,this.maxStartRotationZ,this.minEndRotationZ,this.maxEndRotationZ,this.easeRotationZ],0),this.redGPUContext.device.queue.writeBuffer(this.simParamBuffer,0,Oe(this,bi));const e=this.redGPUContext.device.createCommandEncoder({}),r=e.beginComputePass();r.setPipeline(this.computePipeline),r.setBindGroup(rr.SET_INDEX_ComputeUniforms,this.particleBindGroup),r.dispatchWorkgroups(this._particleNum),r.end(),this.redGPUContext.device.queue.submit([e.finish()])}setParticleData(){let t=this.redGPUContext;const e=this._PROPERTY_NUM,r=new Float32Array(this._particleNum*e),n=performance.now();for(let t=0;t<this._particleNum;++t){let i=Math.random()*this.maxLife,o=Math.random()*i;r[e*t+0]=n-o,r[e*t+1]=i,r[e*t+4]=0,r[e*t+5]=0,r[e*t+6]=0,r[e*t+7]=r[e*t+8]=0,r[e*t+9]=0,r[e*t+10]=0,r[e*t+11]=0,r[e*t+12]=Math.random()*(this.maxStartX-this.minStartX)+this.minStartX,r[e*t+13]=Math.random()*(this.maxEndX-this.minEndX)+this.minEndX,r[e*t+14]=this.easeX,r[e*t+15]=this._x,r[e*t+16]=Math.random()*(this.maxStartY-this.minStartY)+this.minStartY,r[e*t+17]=Math.random()*(this.maxEndY-this.minEndY)+this.minEndY,r[e*t+18]=this.easeY,r[e*t+19]=this._y,r[e*t+20]=Math.random()*(this.maxStartZ-this.minStartZ)+this.minStartZ,r[e*t+21]=Math.random()*(this.maxEndZ-this.minEndZ)+this.minEndZ,r[e*t+22]=this.easeZ,r[e*t+23]=this._z,r[e*t+24]=Math.random()*(this.maxStartRotationX-this.minStartRotationX)+this.minStartRotationX,r[e*t+25]=Math.random()*(this.maxEndRotationX-this.minEndRotationX)+this.minEndRotationX,r[e*t+26]=this.easeRotationX,r[e*t+27]=0,r[e*t+28]=Math.random()*(this.maxStartRotationY-this.minStartRotationY)+this.minStartRotationY,r[e*t+29]=Math.random()*(this.maxEndRotationY-this.minEndRotationY)+this.minEndRotationY,r[e*t+30]=this.easeRotationY,r[e*t+31]=0,r[e*t+32]=Math.random()*(this.maxStartRotationZ-this.minStartRotationZ)+this.minStartRotationZ,r[e*t+33]=Math.random()*(this.maxEndRotationZ-this.minEndRotationZ)+this.minEndRotationZ,r[e*t+34]=this.easeRotationZ,r[e*t+35]=0,r[e*t+36]=Math.random()*(this.maxStartScale-this.minStartScale)+this.minStartScale,r[e*t+37]=Math.random()*(this.maxEndScale-this.minEndScale)+this.minEndScale,r[e*t+38]=this.easeScale,r[e*t+39]=0,r[e*t+40]=Math.random()*(this.maxStartAlpha-this.minStartAlpha)+this.minStartAlpha,r[e*t+41]=Math.random()*(this.maxEndAlpha-this.minEndAlpha)+this.minEndAlpha,r[e*t+42]=this.easeAlpha,r[e*t+43]=0}this.particleBuffer&&(this.particleBuffer.destroy(),this.particleBuffer=null),this.particleBuffer=t.device.createBuffer({size:r.byteLength,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.VERTEX|GPUBufferUsage.STORAGE}),t.device.queue.writeBuffer(this.particleBuffer,0,r);let i=(t=>`\n\t#version 450\n\t// 파티클 구조체 선언\n\tstruct Info {\n\t\tfloat startValue;\n\t\tfloat endValue;\n\t\tfloat easeType;\n\t\tfloat birthCenterValue;\n\t};\n\tstruct InfoGroup {\n\t\tInfo infoX;\n\t\tInfo infoY;\n\t\tInfo infoZ;\n\t};\n\tstruct Particle {\n\t\tfloat startTime;\n\t    float life;\n\t    vec3 valuePosition;\n\t    float valueAlpha;\n        vec3 valueRotation;\n\t    float valueScale;\t  \n\t    InfoGroup infoPosition;\n\t    InfoGroup infoRotation;\n\t    Info infoScale;\n\t    Info infoAlpha;\n\t};\n\t\n\t// 이건 설정값인듯 하고\n\tlayout(std140, set = ${rr.SET_INDEX_ComputeUniforms}, binding = 0) uniform SimParams {\n\t    float time;\n        float currentPositionX,currentPositionY,currentPositionZ;\n\t    float minLife, maxLife;\n\t    float minStartX, maxStartX, minEndX, maxEndX, easeX;\n\t    float minStartY, maxStartY, minEndY, maxEndY, easeY;\n\t    float minStartZ, maxStartZ, minEndZ, maxEndZ, easeZ;\n\t    float minStartAlpha, maxStartAlpha, minEndAlpha, maxEndAlpha, easeAlpha;\n\t    float minStartScale, maxStartScale, minEndScale, maxEndScale, easeScale;\n        float minStartRotationX, maxStartRotationX, minEndRotationX, maxEndRotationX, easeRotationX;\n\t    float minStartRotationY, maxStartRotationY, minEndRotationY, maxEndRotationY, easeRotationY;\n\t    float minStartRotationZ, maxStartRotationZ, minEndRotationZ, maxEndRotationZ, easeRotationZ;\n\t\n\t} params;\n\t\n\t// 여기다 쓰곘다는건가\t\n\tlayout(std140, set = ${rr.SET_INDEX_ComputeUniforms}, binding = 1) buffer ParticlesA {\n\t    Particle particles[${t}];\n\t} particlesA;\n\t\n\t\n\n\t\n\tconst float PI = 3.141592653589793;\n\tconst float HPI = PI * 0.5;\n\tconst float PI2 = PI * 2;\n\tfloat calEasing(float n, float type){\n\t\tswitch( int(type) ){\n\t\t\t// linear\n\t\t\tcase 0 : break;\n\t\t\t// QuintIn\n\t\t\tcase 1 : n = n * n * n * n * n; break;\n\t\t\t// QuintOut\n\t\t\tcase 2 : n = ((n -= 1) * n * n * n * n) + 1; break;\n\t\t\t// QuintInOut\n\t\t\tcase 3 : n = ((n = n * 2) < 1) ? n * n * n * n * n * 0.5 : 0.5 * ((n -= 2) * n * n * n * n + 2); break;\n\t\t\t////////////////////////\n\t\t\t// BackIn\n\t\t\tcase 4 : n = n * n * (n * 1.70158 + n - 1.70158); break;\n\t\t\t// BackOut\n\t\t\tcase 5 : n = (n -= 1) * n * (n * 1.70158 + n + 1.70158) + 1; break;\n\t\t\t// BackInOut\n\t\t\tcase 6 : n = ((n = n * 2) < 1) ? 0.5 * n * n * (n * 1.70158 + n - 1.70158) : 0.5 * (n -= 2) * n * (n * 1.70158 + n + 1.70158) + 1; break;\n\t\t\t////////////////////////\n\t\t\t// CircIn\n\t\t\tcase 7 : n = -1 * (sqrt(1 - n * n) - 1); break;\n\t\t\t// CircOut\n\t\t\tcase 8 : n = sqrt(1 - (n -= 1) * n); break;\n\t\t\t// CircInOut\n\t\t\tcase 9 : n = ((n = n * 2) < 1) ? -0.5 * (sqrt(1 - n * n) - 1) : 0.5 * sqrt(1 - (n -= 2) * n) + 0.5; break;\n\t\t\t////////////////////////\n\t\t\t// CubicIn\n\t\t\tcase 10 : n = n * n * n; break;\n\t\t\t// CubicOut\n\t\t\tcase 11 : n = ((n -= 1) * n * n) + 1; break;\n\t\t\t// CubicInOut\n\t\t\tcase 12 : n = ((n = n * 2) < 1) ? n * n * n * 0.5 : 0.5 * ((n -= 2) * n * n + 2); break;\n\t\t\t////////////////////////\n\t\t\t// ExpoIn\n\t\t\tcase 13 : n = n == 0.0 ? 0.0 : pow(2, 10 * (n - 1)); break;\n\t\t\t// ExpoOut\n\t\t\tcase 14 : n = n == 1.0 ? 1.0 : -pow(2, -10 * n) + 1; break;\n\t\t\t// ExpoInOut\n\t\t\tcase 15 : n = ((n = n * 2) < 1) ? (n == 0.0 ? 0.0 : 0.5 * pow(2, 10 * (n - 1))) : (n == 2.0 ? 1.0 : -0.5 * pow(2, -10 * (n - 1)) + 1); break;\n\t\t\t////////////////////////\n\t\t\t// QuadIn\n\t\t\tcase 16 : n = n * n; break;\n\t\t\t// QuadOut\n\t\t\tcase 17 : n = ((2 - n) * n); break;\n\t\t\t// QuadInOut\n\t\t\tcase 18 : n = ((n = n * 2) < 1) ? n * n * 0.5 : 0.5 * ((2 - (n -= 1)) * n + 1); break;\n\t\t\t////////////////////////\n\t\t\t// QuartIn\n\t\t\tcase 19 : n = n * n * n * n; break;\n\t\t\t// QuartOut\n\t\t\tcase 20 : n = 1 - ((n -= 1) * n * n * n); break;\n\t\t\t// QuartInOut\n\t\t\tcase 21 : n = ((n = n * 2) < 1) ? n * n * n * n * 0.5 : 1 - ((n -= 2) * n * n * n * 0.5); break;\n\t\t\t////////////////////////\n\t\t\t// SineIn\n\t\t\tcase 22 : n = -cos(n * HPI) + 1; break;\n\t\t\t// SineOut\n\t\t\tcase 23 : n = sin(n * HPI); break;\n\t\t\t// SineInOut\n\t\t\tcase 24 : n = (-cos(n * PI) + 1) * 0.5; break;\n\t\t\t////////////////////////\n\t\t\t// ElasticIn\n\t\t\tcase 25 : n = n == 0.0 ? 0.0 : n == 1.0 ? 1.0 : -1 * pow(2, 10 * (n -= 1)) * sin((n - 0.075) * (PI2) / 0.3); break;\n\t\t\t// ElasticOut\n\t\t\tcase 26 : n = n == 0.0 ? 0.0 : n == 1.0 ? 1.0 : pow(2, -10 * n) * sin((n - 0.075) * (PI2) / 0.3) + 1; break;\n\t\t\t// ElasticInOut\n\t\t\tcase 27 : n =( (n == 0.0 ? 0.0 : (n == 1.0 ? 1.0 : n *= 2)), (n < 1) ? -0.5 * pow(2, 10 * (n -= 1)) * sin((n - 0.075) * (PI2) / 0.3) : 0.5 * pow(2, -10 * (n -= 1)) * sin((n - 0.075) * (PI2) / 0.3) + 1); break;\n\t\t}\n\t\treturn n;\n\t}\n\tfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\tfloat randomRange(float min, float max, float v)\n\t{\n        float newValue = rand(v);\n\t\treturn (newValue * (max-min)) + min;\n\t}\n\tvoid main() {\n\t\tuint index = gl_GlobalInvocationID.x;\n\t\tParticle targetParticle = particlesA.particles[index];\n\t\n\t\tfloat age = params.time - targetParticle.startTime;\n\t\tfloat lifeRatio = age/targetParticle.life;\n\t\tif(lifeRatio>=1) {\n\t\t\tfloat uuid = params.time + index;\n\t\t\tparticlesA.particles[index].startTime = params.time;\n\t\t\tparticlesA.particles[index].life = randomRange( params.minLife, params.maxLife, uuid );\n\t\t\t// position\n\t\t\tparticlesA.particles[index].infoPosition.infoX.startValue = randomRange( params.minStartX, params.maxStartX, uuid + 1 );\n\t\t\tparticlesA.particles[index].infoPosition.infoX.endValue   = randomRange( params.minEndX, params.maxEndX, uuid + 2 );\n\t\t\tparticlesA.particles[index].infoPosition.infoX.easeType   = params.easeX;\n\t\t\tparticlesA.particles[index].infoPosition.infoY.startValue = randomRange( params.minStartY, params.maxStartY, uuid + 3 );\n\t\t\tparticlesA.particles[index].infoPosition.infoY.endValue   = randomRange( params.minEndY, params.maxEndY, uuid + 4 );\n\t\t\tparticlesA.particles[index].infoPosition.infoY.easeType   = params.easeY;\n\t\t\tparticlesA.particles[index].infoPosition.infoZ.startValue = randomRange( params.minStartZ, params.maxStartZ, uuid + 5 );\n\t\t\tparticlesA.particles[index].infoPosition.infoZ.endValue   = randomRange( params.minEndZ, params.maxEndZ, uuid + 6 );\n\t\t\tparticlesA.particles[index].infoPosition.infoZ.easeType   = params.easeZ;\n\t\t\t// alpha\n\t\t\tparticlesA.particles[index].infoAlpha.startValue = randomRange( params.minStartAlpha, params.maxStartAlpha, uuid + 7 );\n\t\t\tparticlesA.particles[index].infoAlpha.endValue   = randomRange( params.minEndAlpha, params.maxEndAlpha, uuid + 8 );\n\t\t\tparticlesA.particles[index].infoAlpha.easeType   = params.easeAlpha;\n\t\t\t// scale\n\t\t\tparticlesA.particles[index].infoScale.startValue = randomRange( params.minStartScale, params.maxStartScale, uuid + 9 );\n\t\t\tparticlesA.particles[index].infoScale.endValue   = randomRange( params.minEndScale, params.maxEndScale, uuid + 10 );\n\t\t\tparticlesA.particles[index].infoScale.easeType   = params.easeScale;\n\t\t\t// rotation\n\t\t\tparticlesA.particles[index].infoRotation.infoX.startValue = randomRange( params.minStartRotationX, params.maxStartRotationX, uuid + 11 );\n\t\t\tparticlesA.particles[index].infoRotation.infoX.endValue   = randomRange( params.minEndRotationX, params.maxEndRotationX, uuid + 12 );\n\t\t\tparticlesA.particles[index].infoRotation.infoX.easeType   = params.easeRotationX;\n\t\t\tparticlesA.particles[index].infoRotation.infoY.startValue = randomRange( params.minStartRotationY, params.maxStartRotationY, uuid + 13 );\n\t\t\tparticlesA.particles[index].infoRotation.infoY.endValue   = randomRange( params.minEndRotationY, params.maxEndRotationY, uuid + 14 );\n\t\t\tparticlesA.particles[index].infoRotation.infoY.easeType   = params.easeRotationY;\n\t\t\tparticlesA.particles[index].infoRotation.infoZ.startValue = randomRange( params.minStartRotationZ, params.maxStartRotationZ, uuid + 15 );\n\t\t\tparticlesA.particles[index].infoRotation.infoZ.endValue   = randomRange( params.minEndRotationZ, params.maxEndRotationZ, uuid + 16 );\n\t\t\tparticlesA.particles[index].infoRotation.infoZ.easeType   = params.easeRotationZ;\n\t\t\t// birth position\n\t\t\tparticlesA.particles[index].infoPosition.infoX.birthCenterValue = params.currentPositionX;\n\t\t\tparticlesA.particles[index].infoPosition.infoY.birthCenterValue = params.currentPositionY;\n\t\t\tparticlesA.particles[index].infoPosition.infoZ.birthCenterValue = params.currentPositionZ;\n\t\t\tlifeRatio = 0;\n\t\t}\n\t\tInfo tInfo;\n\t\t// position\n\t\ttInfo = targetParticle.infoPosition.infoX;\n\t\tparticlesA.particles[index].valuePosition.x = tInfo.birthCenterValue + tInfo.startValue +  (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType);\n\t\ttInfo = targetParticle.infoPosition.infoY;\n\t\tparticlesA.particles[index].valuePosition.y = tInfo.birthCenterValue + tInfo.startValue +  (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType);\n\t\ttInfo = targetParticle.infoPosition.infoZ;\n\t\tparticlesA.particles[index].valuePosition.z = tInfo.birthCenterValue + tInfo.startValue +  (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType);\n\t\t\n\t\t// alpha\n\t\ttInfo = targetParticle.infoAlpha;\n\t\tparticlesA.particles[index].valueAlpha = tInfo.startValue +  (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType);\n\t\t\n\t\t// scale\n\t\ttInfo = targetParticle.infoScale;\n\t\tparticlesA.particles[index].valueScale = tInfo.startValue + (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType);\n\t\t\t\t\n\t\t// rotation\n\t\ttInfo = targetParticle.infoRotation.infoX;\n\t\tparticlesA.particles[index].valueRotation.x = (tInfo.startValue +  (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType)) * PI/180;\n\t\ttInfo = targetParticle.infoRotation.infoY;\n\t\tparticlesA.particles[index].valueRotation.y = (tInfo.startValue +  (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType)) * PI/180;\n\t\ttInfo = targetParticle.infoRotation.infoZ;\n\t\tparticlesA.particles[index].valueRotation.z = (tInfo.startValue +  (tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio, tInfo.easeType)) * PI/180;\n\t}\n`)(this._particleNum),o={code:t.twgsl.convertSpirV2WGSL(t.glslang.compileGLSL(i,"compute")).replace(/@stride\([0-9]*\)/g,""),source:i},a=t.device.createShaderModule(o);const s=t.device.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),u=t.device.createPipelineLayout({bindGroupLayouts:[s]});this.particleBindGroup=t.device.createBindGroup({layout:s,entries:[{binding:0,resource:{buffer:this.simParamBuffer,offset:0,size:Oe(this,bi).byteLength}},{binding:1,resource:{buffer:this.particleBuffer,offset:0,size:r.byteLength}}]}),this.computePipeline=t.device.createComputePipeline({layout:u,compute:{module:a,entryPoint:"main"}})}}Ve(Pi,"Linear",0),Ve(Pi,"QuintIn",1),Ve(Pi,"QuintOut",2),Ve(Pi,"QuintInOut",3),Ve(Pi,"BackIn",4),Ve(Pi,"BackOut",5),Ve(Pi,"BackInOut",6),Ve(Pi,"CircIn",7),Ve(Pi,"CircOut",8),Ve(Pi,"CircInOut",9),Ve(Pi,"CubicIn",10),Ve(Pi,"CubicOut",11),Ve(Pi,"CubicInOut",12),Ve(Pi,"ExpoIn",13),Ve(Pi,"ExpoOut",14),Ve(Pi,"ExpoInOut",15),Ve(Pi,"QuadIn",16),Ve(Pi,"QuadOut",17),Ve(Pi,"QuadInOut",18),Ve(Pi,"QuartIn",19),Ve(Pi,"QuartOut",20),Ve(Pi,"QuartInOut",21),Ve(Pi,"SineIn",22),Ve(Pi,"SineOut",23),Ve(Pi,"SineInOut",24),Ve(Pi,"ElasticIn",25),Ve(Pi,"ElasticOut",26),Ve(Pi,"ElasticInOut",27);class wi extends Hr{constructor(t){super(t)}}var Gi=new WeakMap;class Ei extends ke{constructor(t,e){super(),Ve(this,"redGPUContext",void 0),ze(this,Gi,{writable:!0,value:void 0}),Ve(this,"GPURenderPipeline",void 0),this.redGPUContext=t,Ye(this,Gi,e),this.GPURenderPipeline=null}update(t,e){let r=Oe(this,Gi);const n=t.device,i={layout:n.createPipelineLayout({bindGroupLayouts:[e.systemUniformInfo_vertex.GPUBindGroupLayout,e.systemUniformInfo_fragment.GPUBindGroupLayout,r.GPUBindGroupLayout,r._material.GPUBindGroupLayout]}),vertex:{module:r._material.vShaderModule.GPUShaderModule,entryPoint:"main",buffers:r._geometry.vertexState.vertexBuffers},fragment:{module:r._material.fShaderModule.GPUShaderModule,entryPoint:"main",targets:[{format:navigator.gpu.getPreferredCanvasFormat(t.adapter),blend:{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},alpha:{srcFactor:"src-alpha",dstFactor:"one",operation:"add"}}}]},primitive:{topology:r._primitiveTopology,cullMode:r._cullMode,frontFace:"ccw"},multisample:{count:1}};this.GPURenderPipeline=n.createRenderPipeline(i)}}var Bi=new WeakMap;class Ci extends($n.mix(Cn)){constructor(t){super(t),ze(this,Bi,{writable:!0,value:[]}),Ve(this,"baseAttachment",void 0),Ve(this,"baseAttachmentView",void 0),this.quad=new jr(t,new _i(t),this),this.quad.pipeline=new Ei(t,this.quad),this.sampler=new ir(t,{magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge",addressModeW:"repeat"})}checkSize(t,e){if([Oe(this,Bi)[2],Oe(this,Bi)[3]].toString()!=[e.viewRect[2],e.viewRect[3]].toString())return this.baseAttachment&&this.baseAttachment.destroy(),Ye(this,Bi,e.viewRect.concat()),this.baseAttachment=t.device.createTexture({size:{width:e.viewRect[2],height:e.viewRect[3],depthOrArrayLayers:1},sampleCount:1,format:t.swapChainFormat,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING}),this.baseAttachmentView=this.baseAttachment.createView(),!0}render(t,e,r,n){let i=this.checkSize(t,e);const o=t.device.createCommandEncoder(),a=o.beginRenderPass({colorAttachments:[{view:this.baseAttachmentView,clearValue:{r:0,g:0,b:0,a:0},storeOp:"store",loadOp:"clear"}]});let s=this.sourceTexture===n;this.sourceTexture=n,s||this.resetBindingInfo(),i&&this.quad.pipeline.update(t,e),Wi.clearStateCache(),e.updateSystemUniform(a,t),r(t,e,a,[this.quad]),a.end(),t.device.queue.submit([o.finish()])}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:1,resource:this.sampler.GPUSampler},{binding:2,resource:this.sourceTexture},{binding:3,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}}],this._afterResetBindingInfo()}}Ve(Ci,"vertexShaderGLSL",`\n  ${rr.GLSL_VERSION}\n  void main() {\n      gl_Position = vec4(0.0);\n  }\n `),Ve(Ci,"fragmentShaderGLSL",`\n  ${rr.GLSL_VERSION}\n  void main() {\n  } `),Ve(Ci,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Ci,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}},{binding:3,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}}]}),Ve(Ci,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(Ci,"uniformBufferDescriptor_fragment",Cn.uniformBufferDescriptor_empty);class Li extends Ci{constructor(t){super(t),Ve(this,"viewRect",new Float32Array(4)),this.projectionMatrix=Fe.mat4.create()}checkSize(t,e){return Fe.mat4.ortho(this.projectionMatrix,0,1,0,1,-1e3,1e3),Fe.mat4.scale(this.projectionMatrix,this.projectionMatrix,[1/parseInt(t.canvas.style.width),1/parseInt(t.canvas.style.height),1]),Fe.mat4.translate(this.projectionMatrix,this.projectionMatrix,[e.getViewRect(t)[2]/2+e.getViewRect(t)[0],parseInt(t.canvas.style.height)-e.getViewRect(t)[3]/2-e.getViewRect(t)[1],0]),Fe.mat4.scale(this.projectionMatrix,this.projectionMatrix,[e.getViewRect(t)[2],e.getViewRect(t)[3],1]),t.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap.projectionMatrix,this.projectionMatrix),!0}render(t,e,r,n,i){let o=this.checkSize(t,e),a=this.sourceTexture===n;this.sourceTexture=n,a||this.resetBindingInfo(),o&&this.quad.pipeline.update(t,e),Wi.clearStateCache(),e.updateSystemUniform(i,t),r(t,e,i,[this.quad])}}Ve(Li,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n\t${rr.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 3 ) uniform VertexUniforms {\n\t    mat4 projectionMatrix;\n        vec4 viewRect;\n    } vertexUniforms;\n\tvoid main() {\n\t\t// gl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\tgl_Position = vertexUniforms.projectionMatrix * vec4(position,1.0);\n\t\t\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve(Li,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\n\t\tdiffuseColor = texture( sampler2D( uSourceTexture, uSampler ), vUV ) ;\n\t\t// diffuseColor.a = 0.5;\n\n\t\t// diffuseColor.rgb = 1.0 - diffuseColor.rgb;\n\t\toutColor = diffuseColor;\n\t}\n`),Ve(Li,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Li,"uniformsBindGroupLayoutDescriptor_material",Ci.uniformsBindGroupLayoutDescriptor_material),Ve(Li,"uniformBufferDescriptor_vertex",[{size:qe.mat4,valueName:"projectionMatrix"},{size:qe.float32x4,valueName:"viewRect"}]),Ve(Li,"uniformBufferDescriptor_fragment",Cn.uniformBufferDescriptor_empty);let Ri,Di,Ii,Ni,Ai,Fi,Vi=[],Oi=[],Yi=[],Xi=[],zi={},$i=(t,e,r,n,i=0)=>{let o,a,s,u,l,f,m,c,h,d,p,v,g,_,x,y,T,U,S,M,b,P,w,G,E,B,C,L,R,D,I,N,A,F,V,O,Y,X,z,$,k,q,W,Z,H,j,J,Q,K,tt,et,rt,nt,it,ot,at,st,ut,lt,ft,mt,ct,ht,dt,pt,vt,gt,_t,xt,yt,Tt,Ut,St=Math.PI/180;k=3.141592653589793,q=6.283185307179586,W=.225,Z=1.27323954,H=.405284735,j=1.5707963267948966,o=n.length,J=Vi[0],Q=Vi[1],K=Vi[2],tt=Vi[3],et=Vi[4],rt=Vi[5];let Mt=n==e.scene._flatChildList,bt=e.camera instanceof wi;for(;o--;){if(ct=n[o],mt=ct._material,ft=ct._geometry,ut=ct._parent,at=0,Ut=1,st=0,Tt=ct._opacity,ut&&(st=ut._renderTimeDirtyTransform,at=ut.matrix,Ut=ut._sumOpacity),ct._sumOpacity!=Tt*Ut&&(ct.sumOpacity=Tt*Ut),ht=ct.dirtyTransform,ct._renderTimeDirtyTransform=st||ht,pt=ct.dirtyPipeline,dt=ct.pipeline,lt=ct.skinInfo,nt=ct.matrix,ot=ct.localMatrix,vt=0,Ri.object3DNum++,mt&&(mt.needResetBindingInfo&&(mt.resetBindingInfo(),mt.needResetBindingInfo=!1,vt=ct._prevMaterialUUID!=mt._UUID,Fi[mt._UUID]=1),mt instanceof mi&&mt.update(Di),vt=Fi[mt._UUID]),ft){(pt||vt)&&(dt instanceof gr||dt instanceof Mi)&&(dt.update(t,e),Ri.dirtyPipelineNum++),gt=1;let n=!1;i==Wi.DRAW_LAYER_INDEX0&&ct._renderDrawLayerIndex==Wi.DRAW_LAYER_INDEX1?Oi.push(ct):ct._renderDrawLayerIndex==Wi.DRAW_LAYER_INDEX2_Z_POINT_SORT||mt instanceof mi?(g=e.camera.matrix[2],T=e.camera.matrix[6],b=e.camera.matrix[10],E=e.camera.matrix[14],C=nt[12],L=nt[13],R=nt[14],D=1,Xi.push({z:C*g+L*T+R*b+D*E,targetText:ct})):n=!0,(n||i)&&(e._useFrustumCulling&&(_t=ft._volume||ft.volume,xt=_t.xSize*ct.matrix[0],yt=_t.ySize*ct.matrix[5],xt=xt<yt?yt:xt,yt=_t.zSize*ct.matrix[10],xt=xt<yt?yt:xt,p=nt[12],v=nt[13],g=nt[14],(J[0]*p+J[1]*v+J[2]*g+J[3]<=-xt||Q[0]*p+Q[1]*v+Q[2]*g+Q[3]<=-xt||K[0]*p+K[1]*v+K[2]*g+K[3]<=-xt||tt[0]*p+tt[1]*v+tt[2]*g+tt[3]<=-xt||et[0]*p+et[1]*v+et[2]*g+et[3]<=-xt||rt[0]*p+rt[1]*v+rt[2]*g+rt[3]<=-xt)&&(gt=0)),ct instanceof Pi?(ct.compute(Di),r.setPipeline(dt.GPURenderPipeline),Ii!=ft.interleaveBuffer._UUID&&(r.setVertexBuffer(0,ft.interleaveBuffer.GPUBuffer),Ii=ft.interleaveBuffer._UUID),r.setVertexBuffer(1,ct.particleBuffer),r.setBindGroup(2,ct.GPUBindGroup),Ai!=mt._UUID&&(r.setBindGroup(3,mt.uniformBindGroup_material.GPUBindGroup),Ai=mt._UUID),ft.indexBuffer?(Ni!=ft.indexBuffer._UUID&&(r.setIndexBuffer(ft.indexBuffer.GPUBuffer,"uint32"),Ni=ft.indexBuffer._UUID),r.drawIndexed(ft.indexBuffer.indexNum,ct._particleNum,0,0,0),Ri.triangleNum+=ft.indexBuffer.indexNum/3):(r.draw(ft.interleaveBuffer.vertexCount,ct._particleNum,0,0,0),Ri.triangleNum+=ft.interleaveBuffer.data.length/ft.interleaveBuffer.stride),Ri.drawCallNum++):gt&&(r.setPipeline(dt.GPURenderPipeline),Ii!=ft.interleaveBuffer._UUID&&(r.setVertexBuffer(0,ft.interleaveBuffer.GPUBuffer),Ii=ft.interleaveBuffer._UUID),r.setBindGroup(2,ct.GPUBindGroup),Ai!=mt._UUID&&(r.setBindGroup(3,mt.uniformBindGroup_material.GPUBindGroup),Ai=mt._UUID),ft.indexBuffer?(Ni!=ft.indexBuffer._UUID&&(r.setIndexBuffer(ft.indexBuffer.GPUBuffer,"uint32"),Ni=ft.indexBuffer._UUID),r.drawIndexed(ft.indexBuffer.indexNum,1,0,0,0),Ri.triangleNum+=ft.indexBuffer.indexNum/3):(r.draw(ft.interleaveBuffer.vertexCount,1,0,0,0),Ri.triangleNum+=ft.interleaveBuffer.data.length/ft.interleaveBuffer.stride),Ri.drawCallNum++),ct._prevMaterialUUID=mt._UUID)}if(ht&&(p=1,v=0,g=0,x=0,y=1,T=0,S=0,M=0,b=1,ot[12]=ct._x,ot[13]=ct._y*(bt?-1:1),ot[14]=ct._z,ot[15]=1,c=ct._rotationX*St,h=ct._rotationY*St,d=ct._rotationZ*St,$=c%q,$<-k?$+=q:$>k&&($-=q),$=$<0?Z*$+H*$*$:Z*$-H*$*$,a=$<0?W*($*-$-$)+$:W*($*$-$)+$,$=(c+j)%q,$<-k?$+=q:$>k&&($-=q),$=$<0?Z*$+H*$*$:Z*$-H*$*$,l=$<0?W*($*-$-$)+$:W*($*$-$)+$,$=h%q,$<-k?$+=q:$>k&&($-=q),$=$<0?Z*$+H*$*$:Z*$-H*$*$,s=$<0?W*($*-$-$)+$:W*($*$-$)+$,$=(h+j)%q,$<-k?$+=q:$>k&&($-=q),$=$<0?Z*$+H*$*$:Z*$-H*$*$,f=$<0?W*($*-$-$)+$:W*($*$-$)+$,$=d%q,$<-k?$+=q:$>k&&($-=q),$=$<0?Z*$+H*$*$:Z*$-H*$*$,u=$<0?W*($*-$-$)+$:W*($*$-$)+$,$=(d+j)%q,$<-k?$+=q:$>k&&($-=q),$=$<0?Z*$+H*$*$:Z*$-H*$*$,m=$<0?W*($*-$-$)+$:W*($*$-$)+$,I=f*m,N=a*s*m-l*u,A=l*s*m+a*u,F=f*u,V=a*s*u+l*m,O=l*s*u-a*m,Y=-s,X=a*f,z=l*f,c=ct._scaleX,h=ct._scaleY,d=ct._scaleZ,ot[0]=(p*I+x*N+S*A)*c,ot[1]=(v*I+y*N+M*A)*c,ot[2]=(g*I+T*N+b*A)*c,ot[3]=ot[3]*c,ot[4]=(p*F+x*V+S*O)*h,ot[5]=(v*F+y*V+M*O)*h,ot[6]=(g*F+T*V+b*O)*h,ot[7]=ot[7]*h,ot[8]=(p*Y+x*X+S*z)*d,ot[9]=(v*Y+y*X+M*z)*d,ot[10]=(g*Y+T*X+b*z)*d,ot[11]=ot[11]*d,(ct._pivotX||ct._pivotY||ct._pivotZ)&&(p=ot[0],v=ot[1],g=ot[2],_=ot[3],x=ot[4],y=ot[5],T=ot[6],U=ot[7],S=ot[8],M=ot[9],b=ot[10],P=ot[11],w=ot[12],G=ot[13],E=ot[14],B=ot[15],C=1,L=0,R=0,D=0,ot[0]=C*p+L*x+R*S+D*w,ot[1]=C*v+L*y+R*M+D*G,ot[2]=C*g+L*T+R*b+D*E,ot[3]=C*_+L*U+R*P+D*B,C=0,L=1,R=0,D=0,ot[4]=C*p+L*x+R*S+D*w,ot[5]=C*v+L*y+R*M+D*G,ot[6]=C*g+L*T+R*b+D*E,ot[7]=C*_+L*U+R*P+D*B,C=0,L=0,R=1,D=0,ot[8]=C*p+L*x+R*S+D*w,ot[9]=C*v+L*y+R*M+D*G,ot[10]=C*g+L*T+R*b+D*E,ot[11]=C*_+L*U+R*P+D*B,bt?at?(C=-ct._pivotX,L=ct._pivotY,R=-ct._pivotZ,D=1):(C=-ct._pivotX/c,L=ct._pivotY/h,R=-ct._pivotZ,D=1):(C=-ct._pivotX,L=-ct._pivotY,R=-ct._pivotZ,D=1),ot[12]=C*p+L*x+R*S+D*w,ot[13]=C*v+L*y+R*M+D*G,ot[14]=C*g+L*T+R*b+D*E,ot[15]=C*_+L*U+R*P+D*B)),(st||ht)&&(Ri.dirtyTransformNum++,at?(p=at[0],v=at[1],g=at[2],_=at[3],x=at[4],y=at[5],T=at[6],U=at[7],S=at[8],M=at[9],b=at[10],P=at[11],w=at[12],G=at[13],E=at[14],B=at[15],C=ot[0],L=ot[1],R=ot[2],D=ot[3],nt[0]=C*p+L*x+R*S+D*w,nt[1]=C*v+L*y+R*M+D*G,nt[2]=C*g+L*T+R*b+D*E,nt[3]=C*_+L*U+R*P+D*B,C=ot[4],L=ot[5],R=ot[6],D=ot[7],nt[4]=C*p+L*x+R*S+D*w,nt[5]=C*v+L*y+R*M+D*G,nt[6]=C*g+L*T+R*b+D*E,nt[7]=C*_+L*U+R*P+D*B,C=ot[8],L=ot[9],R=ot[10],D=ot[11],nt[8]=C*p+L*x+R*S+D*w,nt[9]=C*v+L*y+R*M+D*G,nt[10]=C*g+L*T+R*b+D*E,nt[11]=C*_+L*U+R*P+D*B,C=ot[12],L=ot[13],R=ot[14],D=ot[15],nt[12]=C*p+L*x+R*S+D*w,nt[13]=C*v+L*y+R*M+D*G,nt[14]=C*g+L*T+R*b+D*E,nt[15]=C*_+L*U+R*P+D*B):(nt[0]=ot[0],nt[1]=ot[1],nt[2]=ot[2],nt[3]=ot[3],nt[4]=ot[4],nt[5]=ot[5],nt[6]=ot[6],nt[7]=ot[7],nt[8]=ot[8],nt[9]=ot[9],nt[10]=ot[10],nt[11]=ot[11],nt[12]=ot[12],nt[13]=ot[13],nt[14]=ot[14],nt[15]=ot[15]),it=ct.normalMatrix,p=nt[0],v=nt[1],g=nt[2],_=nt[3],x=nt[4],y=nt[5],T=nt[6],U=nt[7],S=nt[8],M=nt[9],b=nt[10],P=nt[11],G=nt[12],E=nt[13],B=nt[14],C=nt[15],w=p*y-v*x,L=p*T-g*x,R=p*U-_*x,D=v*T-g*y,I=v*U-_*y,N=g*U-_*T,A=S*E-M*G,F=S*B-b*G,V=S*C-P*G,O=M*B-b*E,Y=M*C-P*E,O=b*C-P*B,z=w*O-L*Y+R*O+D*V-I*F+N*A,z=1/z,it[0]=(y*O-T*Y+U*O)*z,it[4]=(-v*O+g*Y-_*O)*z,it[8]=(E*N-B*I+C*D)*z,it[12]=(-M*N+b*I-P*D)*z,it[1]=(-x*O+T*V-U*F)*z,it[5]=(p*O-g*V+_*F)*z,it[9]=(-G*N+B*R-C*L)*z,it[13]=(S*N-b*R+P*L)*z,it[2]=(x*Y-y*V+U*A)*z,it[6]=(-p*Y+v*V-_*A)*z,it[10]=(G*I-E*R+C*w)*z,it[14]=(-S*I+M*R-P*w)*z,it[3]=(-x*O+y*F-T*A)*z,it[7]=(p*O-v*F+g*A)*z,it[11]=(-G*D+E*L-B*w)*z,it[15]=(S*D-M*L+b*w)*z,!Yi.includes(ct.uniformBuffer_meshMatrix)&&Yi.push(ct.uniformBuffer_meshMatrix),ct.uniformBuffer_meshMatrix.meshFloat32Array.set(ct.matrix,ct.offsetMatrix/Float32Array.BYTES_PER_ELEMENT),ct.uniformBuffer_meshMatrix.meshFloat32Array.set(ct.normalMatrix,ct.offsetNormalMatrix/Float32Array.BYTES_PER_ELEMENT)),lt){let e,r=lt.joints,n=0,i=r.length,o=new Float32Array(16*i),a=new Float32Array([nt[0],nt[1],nt[2],nt[3],nt[4],nt[5],nt[6],nt[7],nt[8],nt[9],nt[10],nt[11],nt[12],nt[13],nt[14],nt[15]]),s=a,u=a,l=u[0],f=u[1],m=u[2],c=u[3],h=u[4],d=u[5],p=u[6],v=u[7],g=u[8],_=u[9],x=u[10],y=u[11],T=u[12],U=u[13],S=u[14],M=u[15],b=_*S*v-U*x*v+U*p*y-d*S*y-_*p*M+d*x*M,P=T*x*v-g*S*v-T*p*y+h*S*y+g*p*M-h*x*M,w=g*U*v-T*_*v+T*d*y-h*U*y-g*d*M+h*_*M,G=T*_*p-g*U*p-T*d*x+h*U*x+g*d*S-h*_*S,E=l*b+f*P+m*w+c*G;if(0===E)return mat4.identity(a);{const t=1/E;s[0]=b*t,s[1]=(U*x*c-_*S*c-U*m*y+f*S*y+_*m*M-f*x*M)*t,s[2]=(d*S*c-U*p*c+U*m*v-f*S*v-d*m*M+f*p*M)*t,s[3]=(_*p*c-d*x*c-_*m*v+f*x*v+d*m*y-f*p*y)*t,s[4]=P*t,s[5]=(g*S*c-T*x*c+T*m*y-l*S*y-g*m*M+l*x*M)*t,s[6]=(T*p*c-h*S*c-T*m*v+l*S*v+h*m*M-l*p*M)*t,s[7]=(h*x*c-g*p*c+g*m*v-l*x*v-h*m*y+l*p*y)*t,s[8]=w*t,s[9]=(T*_*c-g*U*c-T*f*y+l*U*y+g*f*M-l*_*M)*t,s[10]=(h*U*c-T*d*c+T*f*v-l*U*v-h*f*M+l*d*M)*t,s[11]=(g*d*c-h*_*c-g*f*v+l*_*v+h*f*y-l*d*y)*t,s[12]=G*t,s[13]=(g*U*m-T*_*m+T*f*x-l*U*x-g*f*S+l*_*S)*t,s[14]=(T*d*m-h*U*m-T*f*p+l*U*p+h*f*S-l*d*S)*t,s[15]=(h*_*m-g*d*m+g*f*p-l*_*p-h*f*x+l*d*x)*t}for(;n<i;n++)e=r[n].matrix,o[16*n+0]=e[0],o[16*n+1]=e[1],o[16*n+2]=e[2],o[16*n+3]=e[3],o[16*n+4]=e[4],o[16*n+5]=e[5],o[16*n+6]=e[6],o[16*n+7]=e[7],o[16*n+8]=e[8],o[16*n+9]=e[9],o[16*n+10]=e[10],o[16*n+11]=e[11],o[16*n+12]=e[12],o[16*n+13]=e[13],o[16*n+14]=e[14],o[16*n+15]=e[15];mt.uniformBuffer_vertex.float32Array.set(a,mt.uniformBufferDescriptor_vertex.redStructOffsetMap.globalTransformOfNodeThatTheMeshIsAttachedTo/Float32Array.BYTES_PER_ELEMENT),mt.uniformBuffer_vertex.float32Array.set(o,mt.uniformBufferDescriptor_vertex.redStructOffsetMap.jointMatrix/Float32Array.BYTES_PER_ELEMENT),lt.inverseBindMatrices._UUID||(lt.inverseBindMatrices._UUID=JSON.stringify(lt.inverseBindMatrices));let B=mt.uniformBuffer_vertex._UUID;zi[B]!=lt.inverseBindMatrices._UUID&&(mt.uniformBuffer_vertex.float32Array.set(lt.inverseBindMatrices,mt.uniformBufferDescriptor_vertex.redStructOffsetMap.inverseBindMatrixForJoint/Float32Array.BYTES_PER_ELEMENT),zi[B]=lt.inverseBindMatrices._UUID),t.device.queue.writeBuffer(mt.uniformBuffer_vertex.GPUBuffer,0,mt.uniformBuffer_vertex.float32Array)}Mt||$i(t,e,r,ct.children),ct.dirtyPipeline=!1,ct.dirtyTransform=!1}},ki=(t=>{let e,r=[];return(t,n,i)=>{e=n.scene,e.skyBox&&(.6*n.camera.farClipping!=e.skyBox._prevScale&&(e.skyBox.scaleX=e.skyBox.scaleY=e.skyBox.scaleZ=e.skyBox._prevScale=.6*n.camera.farClipping),r.push(e.skyBox)),e.grid&&r.push(e.grid),e.axis&&r.push(e.axis),r.length&&$i(t,n,i,r),r.length=0}})(),qi=(t,e,r,n)=>{let i,o,a=performance.now();i=e.scene,o=i.backgroundColorRGBA,e.camera.update&&e.camera.update(),Vi=e.computeViewFrustumPlanes(e);let s={colorAttachments:[{view:e.baseAttachmentView,resolveTarget:e.baseAttachment_ResolveTargetView,clearValue:{r:o[0],g:o[1],b:o[2],a:o[3]},storeOp:"store",loadOp:"clear"},{view:e.baseAttachment_mouseColorID_depthView,resolveTarget:e.baseAttachment_mouseColorID_depth_ResolveTargetView,clearValue:{r:0,g:0,b:0,a:0},storeOp:"store",loadOp:"clear"}],depthStencilAttachment:{view:e.baseDepthStencilAttachmentView,depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store",stencilClearValue:0,stencilLoadOp:"load",stencilStoreOp:"store"}},u=t.device.createCommandEncoder(),l=u.beginRenderPass(s);e.updateSystemUniform(l,t);let f=e.viewRect;l.setViewport(0,0,f[2],f[3],0,1),l.setScissorRect(0,0,f[2],f[3]),ki(t,e,l),$i(t,e,l,i._flatChildList),((t,e,r)=>{Oi.length&&$i(t,e,r,Oi,Wi.DRAW_LAYER_INDEX1),Oi.length=0})(t,e,l),((t,e,r)=>{if(Xi.length){let n=[],i=Xi.length;for(Xi.sort((t,e)=>t.z>e.z?-1:t.z<e.z?1:0);i--;)n[i]=Xi[i].targetText;$i(t,e,r,n,Wi.DRAW_LAYER_INDEX2_Z_POINT_SORT)}Xi.length=0})(t,e,l),((t,e,r)=>{if(e.debugLightList.length){let n=e.useFrustumCulling;e.useFrustumCulling=!1,$i(t,e,r,e.debugLightList),e.useFrustumCulling=n}})(t,e,l),l.end(),Ri.baseRenderTime=performance.now()-a,a=performance.now();let m=e.postEffect.effectList.length?((t,e)=>{let r=e.baseAttachment_ResolveTargetView,n=e.baseAttachment_ResolveTarget,i=0,o=e.postEffect.effectList.length;for(;i<o;i++){let o=e.postEffect.effectList[i];o.render(t,e,$i,r),r=o.baseAttachmentView,n=o.baseAttachment}return n})(t,e):e.baseAttachment_ResolveTarget;return e._lastTextureView=m.createView(),Ri.postEffectRenderTime=performance.now()-a,a=performance.now(),u.finish()};class Wi{constructor(){}render(t,e){Di=t;let r,n=vi.resetData(e.viewList),i=0,o=e.viewList.length;Fi={};let a=[],s=e.context.getCurrentTexture(),u=s.createView(),l=[];const f=e.device.createCommandEncoder(),m=f.beginRenderPass({colorAttachments:[{view:u,clearValue:{r:0,g:0,b:0,a:0},storeOp:"store",loadOp:"clear"}]});for(;i<o;i++)r=e.viewList[i],Ri=n[i],Wi.clearStateCache(),pr.needFlatListUpdate&&(r.scene._flatChildList=Je.getFlatChildList(r.scene._children)),l.push(qi(e,r)),a.push(r.mouseEventChecker.check(e)),r._finalRender||(r._finalRender=new Li(e)),r._finalRender.baseAttachment=s,r._finalRender.baseAttachmentView=u,r._finalRender.render(e,r,$i,r._lastTextureView,m);for(m.end(),l.push(f.finish()),e.device.queue.submit(l),a.includes("pointer")?e.canvas.style.cursor="pointer":e.canvas.style.cursor="default",i=Yi.length;i--;)e.device.queue.writeBuffer(Yi[i].GPUBuffer,0,Yi[i].meshFloat32Array);pr.needFlatListUpdate=!1,Yi.length=0,ai.animationLooper(t),vi.update()}}Ve(Wi,"DRAW_LAYER_INDEX0",0),Ve(Wi,"DRAW_LAYER_INDEX1",1),Ve(Wi,"DRAW_LAYER_INDEX2_Z_POINT_SORT",2),Ve(Wi,"clearStateCache",t=>{Ii=null,Ni=null,Ai=null});class Zi extends($n.mix(Cn,$n.color,$n.alpha)){constructor(t,e="#ff0000",r=1){super(t),this.color=e,this.colorAlpha=r,this.needResetBindingInfo=!0}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}}],this._afterResetBindingInfo()}}Ve(Zi,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n\t${rr.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 0 ) out float vMouseColorID;\t\n\tlayout( location = 1 ) out float vSumOpacity;\n\tvoid main() {\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\n\t}\n\t`),Ve(Zi,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        vec4 color;\n        float alpha;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in float vMouseColorID;\n\tlayout( location = 1 ) in float vSumOpacity;\n\tlayout( location = 0 ) out vec4 outColor;\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\n\tvoid main() {\n\t\toutColor = fragmentUniforms.color;\n\t\toutColor.a *= vSumOpacity;\n\t\toutColor.a *= fragmentUniforms.alpha;\t\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n\t`),Ve(Zi,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Zi,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}]}),Ve(Zi,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(Zi,"uniformBufferDescriptor_fragment",[{size:qe.float32x4,valueName:"colorRGBA"},{size:qe.float32,valueName:"alpha"}]);var Hi=new WeakMap;class ji extends ke{constructor(t){super(),ze(this,Hi,{writable:!0,value:"#ff0000"}),Ve(this,"_debugMesh",void 0),Ve(this,"_debugMaterial",void 0),Ve(this,"useDebugMesh",!1),Ve(this,"_intensity",1),Ve(this,"_x",0),Ve(this,"_y",0),Ve(this,"_z",0),Ve(this,"_colorRGBA",new Float32Array([1,0,0,1])),this._debugMesh=new jr(t),this._debugMaterial=new Zi(t),this._debugMaterial.colorAlpha=.5}get intensity(){return this._intensity}set intensity(t){this._intensity=t}get x(){return this._x}set x(t){this._x=this._debugMesh.x=t,this._debugMesh.targetTo(0,0,0)}get y(){return this._y}set y(t){this._y=this._debugMesh.y=t,this._debugMesh.targetTo(0,0,0)}get z(){return this._z}set z(t){this._z=this._debugMesh.z=t,this._debugMesh.targetTo(0,0,0)}get colorRGBA(){return this._colorRGBA}get color(){return Oe(this,Hi)}set color(t){Ye(this,Hi,t);let e=Je.hexToRGB_ZeroToOne(t);this._colorRGBA[0]=e[0],this._colorRGBA[1]=e[1],this._colorRGBA[2]=e[2],this._colorRGBA[3]=1,this._debugMaterial.color=t}}var Ji=new WeakMap,Qi=new WeakMap,Ki=new WeakMap,to=new WeakMap,eo=new WeakMap,ro=new WeakMap,no=new WeakMap,io=new WeakMap,oo=new WeakMap,ao=new WeakMap,so=new WeakMap,uo=new WeakMap,lo=new WeakMap,fo=new WeakMap,mo=new WeakMap;class co extends ji{constructor(t,e="#111",r=.1){super(t),this.color=e,this.intensity=r}}var ho=new WeakMap;class po extends Hn{constructor(t,e=1,r=8,n=8,i=0,o=2*Math.PI,a=0,s=Math.PI,u=1){let l;if(super(),ze(this,ho,{writable:!0,value:function(){let t,e,r,n,i,o,a,s,u=[],l=new Float32Array([0,0,0]),f=new Float32Array([0,0,0]);return function(m,c,h,d,p,v,g,_,x,y){t=_+x,n=0,u.length=0,l[0]=0,l[1]=0,l[2]=0,f[0]=0,f[1]=0,f[2]=0;let T=[],U=[];for(r=0;r<=p;r++){let t=[],i=r/p;for(e=0;e<=d;e++){let r=e/d;l.x=-h*Math.cos(v+r*g)*Math.sin(_+i*x),l.y=h*Math.cos(_+i*x),l.z=h*Math.sin(v+r*g)*Math.sin(_+i*x),T.push(l.x,l.y,l.z),f[0]=l.x,f[1]=l.y,f[2]=l.z,Fe.vec3.normalize(f,f),T.push(f[0],f[1],f[2]),T.push(r*y,i*y),t.push(n++)}u.push(t)}for(r=0;r<p;r++)for(e=0;e<d;e++)i=u[r][e+1],o=u[r][e],a=u[r+1][e],s=u[r+1][e+1],(0!==r||_>0)&&U.push(i,o,s),(r!==p-1||t<Math.PI)&&U.push(o,a,s);return new jn(m,new Jn(m,c+"_interleaveBuffer",Jn.TYPE_VERTEX,new Float32Array(T),[new Zn("vertexPosition","float32x3"),new Zn("vertexNormal","float32x3"),new Zn("texcoord","float32x2")]),new Jn(m,c+"_indexBuffer",Jn.TYPE_INDEX,new Uint32Array(U)))}}()}),r=Math.max(3,Math.floor(r)),n=Math.max(2,Math.floor(n)),l=[this.constructor.name,e,r,n,i,o,a,s,u].join("_"),t.state.Geometry.has(l))return t.state.Geometry.get(l);let f=Oe(this,ho).call(this,t,l,e,r,n,i,o,a,s,u);this.interleaveBuffer=f.interleaveBuffer,this.indexBuffer=f.indexBuffer,this.vertexState=f.vertexState,t.state.Geometry.set(l,this)}}var vo=new WeakMap;class go extends Hn{constructor(t,e=1,r=1,n=1,i=8,o=1,a=!1,s=0,u=2*Math.PI,l=1){let f;if(super(),ze(this,vo,{writable:!0,value:function(){let t,e;return function(r,n,i,o,a,s,u,l,f,m,c){let h=[],d=[],p=0,v=[],g=a/2;return t=function(){let t,e,r=[],n=[],l=(o-i)/a;for(e=0;e<=u;e++){let d=[],_=e/u,x=_*(o-i)+i;for(t=0;t<=s;t++){let e=t/s,i=e*m+f,o=Math.sin(i),u=Math.cos(i);n[0]=x*o,n[1]=-_*a+g,n[2]=x*u,h.push(n[0],n[1],n[2]),r[0]=o,r[1]=l,r[2]=u,Fe.vec3.normalize(r,r),h.push(r[0],r[1],r[2]),h.push(e*c,_*c),d.push(p++)}v.push(d)}for(t=0;t<s;t++)for(e=0;e<u;e++){let r=v[e][t],n=v[e+1][t],i=v[e+1][t+1],o=v[e][t+1];d.push(r,n,o),d.push(n,i,o)}},e=function(t){let e,r,n,a=[],u=[],l=!0===t?i:o,v=!0===t?1:-1;for(r=p,e=1;e<=s;e++)h.push(0,g*v,0),h.push(0,v,0),h.push(.5*c,.5*c),p++;for(n=p,e=0;e<=s;e++){let t=e/s*m+f,r=Math.cos(t),n=Math.sin(t);u[0]=l*n,u[1]=g*v,u[2]=l*r,h.push(u[0],u[1],u[2]),h.push(0,v,0),a[0]=.5*r+.5,a[1]=.5*n*v+.5,h.push(a[0]*c,c-a[1]*c),p++}for(e=0;e<s;e++){let i=r+e,o=n+e;!0===t?d.push(o,o+1,i):d.push(o+1,o,i)}},t(),!1===l&&(i>0&&e(!0),o>0&&e(!1)),new jn(r,new Jn(r,n+"_interleaveBuffer",Jn.TYPE_VERTEX,new Float32Array(h),[new Zn("vertexPosition","float32x3"),new Zn("vertexNormal","float32x3"),new Zn("texcoord","float32x2")]),new Jn(r,n+"_indexBuffer",Jn.TYPE_INDEX,new Uint32Array(d)))}}()}),f=[this.constructor.name,t,e,r,n,i,o,a,s,u,l].join("_"),t.state.Geometry.has(f))return t.state.Geometry.get(f);let m=Oe(this,vo).call(this,t,f,e,r,n,i,o,a,s,u,l);this.interleaveBuffer=m.interleaveBuffer,this.indexBuffer=m.indexBuffer,this.vertexState=m.vertexState,t.state.Geometry.set(f,this)}}var _o=new WeakMap;class xo extends ji{constructor(t,e="#ffffff",r=1){super(t),ze(this,_o,{writable:!0,value:t=>{let e=new jr(t,new po(t,1,16,16,16),this._debugMaterial);e.primitiveTopology="line-list",this._debugMesh.addChild(e),[-.7,0,.7].forEach((e,r)=>{let n,i;n=new jr(t,new go(t,.01,.01,1==r?1e5:2),this._debugMaterial),n.rotationX=90,n.x=e,n.z=-1,i=new jr(t,new go(t,0,.25,.5),this._debugMaterial),i.y=1,n.addChild(i),this._debugMesh.addChild(n)})}}),Oe(this,_o).call(this,t),this.color=e,this.intensity=r}}var yo=new WeakMap;class To extends ji{constructor(t,e="#ffffff",r=1,n=1){super(t),Ve(this,"_radius",1),ze(this,yo,{writable:!0,value:t=>{let e=new jr(t,new po(t,1,32,32,32),this._debugMaterial);e.primitiveTopology="line-list",this._debugMesh.addChild(e)}}),this.color=e,this.intensity=r,this.radius=n,Oe(this,yo).call(this,t)}get radius(){return this._radius}set radius(t){this._radius=t,this._debugMesh.setScale(t,t,t)}}var Uo=new WeakMap;class So extends ji{constructor(t,e="#ffffff",r=1,n=.1,i=80){super(t),ze(this,Uo,{writable:!0,value:t=>{let e=new jr(t,new go(t,0,1,2),this._debugMaterial);e.rotationX=-90,e.primitiveTopology="line-list",this._debugMesh.addChild(e)}}),this.color=e,this.intensity=r,this.cutoff=n,this.exponent=i,Oe(this,Uo).call(this,t)}}class Mo extends Cn{constructor(t){super(t),this.needResetBindingInfo=!0}resetBindingInfo(){this.entries=[],this._afterResetBindingInfo()}}Ve(Mo,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${rr.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec4 color;\n\tlayout( location = 0 ) out vec4 vColor;\n\n\tvoid main() {\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\tvColor = color;\n\t}\n\t`),Ve(Mo,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( location = 0 ) in vec4 vColor;\n\tlayout( location = 0 ) out vec4 outColor;\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\toutColor = vColor;\n\t\t\tout_MouseColorID_Depth = vec4(0.0);\n\t\t\n\t}\n\t`),Ve(Mo,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Mo,"uniformsBindGroupLayoutDescriptor_material",{entries:[]}),Ve(Mo,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(Mo,"uniformBufferDescriptor_fragment",Cn.uniformBufferDescriptor_empty);class bo extends($n.mix(Cn)){constructor(t,e){super(t),Ve(this,"_skyBoxTexture",void 0),this.skyBoxTexture=e,this.needResetBindingInfo=!0}get skyBoxTexture(){return this._skyBoxTexture}set skyBoxTexture(t){this.checkTexture(t,"skyBoxTexture")}checkTexture(t,e){if(t)if(t._GPUTexture){switch(e){case"skyBoxTexture":this._skyBoxTexture=t}this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,this.needResetBindingInfo=!0)}resetBindingInfo(){this.entries=[{binding:0,resource:this._skyBoxTexture?this._skyBoxTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:1,resource:this._skyBoxTexture?this._skyBoxTexture._GPUTextureView:this.redGPUContext.state.emptyCubeTextureView}],this._afterResetBindingInfo()}}Ve(bo,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${rr.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 0 ) out vec3 vReflectionCubeCoord;\n\tvoid main() {\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\tvReflectionCubeCoord = (meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] *vec4(position, 0.0)).xyz;\n\t}\n\t`),Ve(bo,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\tlayout( location = 0 ) in vec3 vReflectionCubeCoord;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 0) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1) uniform textureCube uSkyBoxTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n  layout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\t//#RedGPU#skyBoxTexture# diffuseColor = texture(samplerCube(uSkyBoxTexture,uSampler), vReflectionCubeCoord) ;\n\t\toutColor = diffuseColor;\n    out_MouseColorID_Depth = vec4(0.0);\n\t}\n`),Ve(bo,"PROGRAM_OPTION_LIST",{vertex:[],fragment:["skyBoxTexture"]}),Ve(bo,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}}]}),Ve(bo,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(bo,"uniformBufferDescriptor_fragment",Cn.uniformBufferDescriptor_empty);class Po extends($n.mix(Cn,$n.color,$n.alpha,$n.basicLightPropertys)){constructor(t,e="#ff0000",r=1){super(t),this.color=e,this.colorAlpha=r,this.needResetBindingInfo=!0}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}}],this._afterResetBindingInfo()}}Ve(Po,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n\t${rr.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec4 vVertexPosition;\n\tlayout( location = 2 ) out float vMouseColorID;\n\tlayout( location = 3 ) out float vSumOpacity;\n\tvoid main() {\n\t\tvVertexPosition = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\tvNormal = (meshMatrixUniforms.normalMatrix[ int(meshUniforms.index) ] * vec4(normal,1.0)).xyz;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * vVertexPosition;\n\t}\n\t`),Ve(Po,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        vec4 color;\n        float shininess; \n        float specularPower;\n\t    vec4 specularColor;\n        float alpha;\n        float useFlatMode;\n        //\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec4 vVertexPosition;\n\tlayout( location = 2 ) in float vMouseColorID;\t\n\tlayout( location = 3 ) in float vSumOpacity;\n\tlayout( location = 0 ) out vec4 outColor;\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tfloat testAlpha = fragmentUniforms.color.a * vSumOpacity;\n\n\t\tvec3 N = normalize(vNormal);\n\t\tif(fragmentUniforms.useFlatMode == TRUTHY) N = getFlatNormal(vVertexPosition.xyz);\n\t\t\n\t\tfloat specularTextureValue = 1.0;\n\t\t\n\t\tvec4 finalColor = \n\t\tcalcDirectionalLight(\n\t\t\tfragmentUniforms.color,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.directionalLightCount,\n\t\t\tsystemUniforms.directionalLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue\n\t\t)\n\t\t+\n\t    calcPointLight(\n\t\t\tfragmentUniforms.color,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.pointLightCount,\n\t\t\tsystemUniforms.pointLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue,\n\t\t\tvVertexPosition.xyz\n\t\t)\n\t\t+ la;\n\t\t\t\n\t\tfinalColor.a = testAlpha;\n\t\toutColor = finalColor;\n\t\toutColor.a *= fragmentUniforms.alpha;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve(Po,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Po,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}]}),Ve(Po,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(Po,"uniformBufferDescriptor_fragment",[{size:qe.float32x4,valueName:"colorRGBA"},{size:qe.float32,valueName:"shininess"},{size:qe.float32,valueName:"specularPower"},{size:qe.float32x4,valueName:"specularColorRGBA"},{size:qe.float32,valueName:"alpha"},{size:qe.float32,valueName:"useFlatMode"}]);let wo=new Float32Array(1);var Go=new WeakMap;class Eo extends($n.mix(Cn,$n.color,$n.alpha,$n.normalTexture,$n.specularTexture,$n.emissiveTexture,$n.displacementTexture,$n.basicLightPropertys)){constructor(t,e="#ff0000",r=1,n,i,o,a){super(t),ze(this,Go,{writable:!0,value:void 0}),this.color=e,this.colorAlpha=r,this.normalTexture=n,this.specularTexture=i,this.emissiveTexture=o,this.displacementTexture=a,this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"normalTexture":this._normalTexture=t,r=e;break;case"specularTexture":this._specularTexture=t,r=e;break;case"emissiveTexture":this._emissiveTexture=t,r=e;break;case"displacementTexture":this._displacementTexture=t,r=e}r&&(wo[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],wo):this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],wo)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,wo[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],wo):this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],wo),this.needResetBindingInfo=!0)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:this._displacementTexture?this._displacementTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:2,resource:this._displacementTexture?this._displacementTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:3,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:4,resource:this._normalTexture?this._normalTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:5,resource:this._normalTexture?this._normalTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:6,resource:this._specularTexture?this._specularTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:7,resource:this._specularTexture?this._specularTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:8,resource:this._emissiveTexture?this._emissiveTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:9,resource:this._emissiveTexture?this._emissiveTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}Ve(Eo,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n    ${rr.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out vec4 vVertexPosition;\n\tlayout( location = 3 ) out float vMouseColorID;\t\n\tlayout( location = 4 ) out float vSumOpacity;\n\tlayout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        float displacementFlowSpeedX;\n        float displacementFlowSpeedY;\n        float displacementPower;\n        float __displacementTextureRenderYn;\n    } vertexUniforms;\n    \n    layout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 2) uniform texture2D uDisplacementTexture;\n\tvoid main() {\n\t\tvVertexPosition = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\tvNormal = (meshMatrixUniforms.normalMatrix[ int(meshUniforms.index) ] * vec4(normal,1.0)).xyz;\n\t\tvUV = uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tif(vertexUniforms.__displacementTextureRenderYn == TRUTHY) vVertexPosition.xyz += ${rr.GLSL_SystemUniforms_vertex.calcDisplacement("vNormal","vertexUniforms.displacementFlowSpeedX","vertexUniforms.displacementFlowSpeedY","vertexUniforms.displacementPower","uv","uDisplacementTexture","uSampler")}\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * vVertexPosition;\n\t}\n\t`),Ve(Eo,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_fragment.systemUniforms}\n\t${rr.GLSL_SystemUniforms_fragment.cotangent_frame}\n\t${rr.GLSL_SystemUniforms_fragment.perturb_normal}\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform FragmentUniforms {\n        vec4 color;\n        float normalPower;\n        float shininess; \n        float specularPower;\n\t    vec4 specularColor;\n\t    float emissivePower;\n\t    float alpha;\n\t    float useFlatMode;\n\t    //\n\t\tfloat __normalTextureRenderYn;\n\t\tfloat __specularTextureRenderYn;\n\t\tfloat __emissiveTextureRenderYn;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in vec4 vVertexPosition;\n\tlayout( location = 3 ) in float vMouseColorID;\t\n\tlayout( location = 4 ) in float vSumOpacity;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 4 ) uniform sampler uNormalSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 5 ) uniform texture2D uNormalTexture;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 6 ) uniform sampler uSpecularSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 7 ) uniform texture2D uSpecularTexture;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 8 ) uniform sampler uEmissiveSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 9 ) uniform texture2D uEmissiveTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\t\n\tvoid main() {\n\t\tfloat testAlpha = fragmentUniforms.color.a * vSumOpacity;\n\t\t\n\t\tvec3 N = normalize(vNormal);\n\t\tvec4 normalColor = vec4(0.0);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) normalColor = texture(sampler2D(uNormalTexture, uNormalSampler), vUV) ;\n\t\tif(fragmentUniforms.useFlatMode == TRUTHY) N = getFlatNormal(vVertexPosition.xyz);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) N = perturb_normal(N, vVertexPosition.xyz, vUV, normalColor.rgb, fragmentUniforms.normalPower) ;\n\t\t\n\t\tfloat specularTextureValue = 1.0;\n\t\tif(fragmentUniforms.__specularTextureRenderYn == TRUTHY) specularTextureValue = texture(sampler2D(uSpecularTexture, uSpecularSampler), vUV).r ;\n\t\t\n\t\tvec4 finalColor = \n\t\tcalcDirectionalLight(\n\t\t\tfragmentUniforms.color,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.directionalLightCount,\n\t\t\tsystemUniforms.directionalLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue\n\t\t)\n\t    +\n\t    calcPointLight(\n\t\t\tfragmentUniforms.color,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.pointLightCount,\n\t\t\tsystemUniforms.pointLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue,\n\t\t\tvVertexPosition.xyz\n\t\t)\n\t\t+ la;\n\n\t\tif(fragmentUniforms.__emissiveTextureRenderYn == TRUTHY) {\n\t\t\tvec4 emissiveColor = texture(sampler2D(uEmissiveTexture, uEmissiveSampler), vUV);\n\t\t\tfinalColor.rgb += emissiveColor.rgb * fragmentUniforms.emissivePower;\n\t\t}\n\t\t\n\t\tfinalColor.a = testAlpha;\n\t\toutColor = finalColor;\n\t\toutColor.a *= fragmentUniforms.alpha;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve(Eo,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Eo,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.VERTEX,texture:{type:"float"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:4,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:5,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}},{binding:6,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:7,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}},{binding:8,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:9,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}}]}),Ve(Eo,"uniformBufferDescriptor_vertex",[{size:qe.float32,valueName:"displacementFlowSpeedX"},{size:qe.float32,valueName:"displacementFlowSpeedY"},{size:qe.float32,valueName:"displacementPower"},{size:qe.float32,valueName:"__displacementTextureRenderYn"}]),Ve(Eo,"uniformBufferDescriptor_fragment",[{size:qe.float32x4,valueName:"colorRGBA"},{size:qe.float32,valueName:"normalPower"},{size:qe.float32,valueName:"shininess"},{size:qe.float32,valueName:"specularPower"},{size:qe.float32x4,valueName:"specularColorRGBA"},{size:qe.float32,valueName:"emissivePower"},{size:qe.float32,valueName:"alpha"},{size:qe.float32,valueName:"useFlatMode"},{size:qe.float32,valueName:"__normalTextureRenderYn"},{size:qe.float32,valueName:"__specularTextureRenderYn"},{size:qe.float32,valueName:"__emissiveTextureRenderYn"}]);let Bo=new Float32Array(1);var Co=new WeakMap;class Lo extends($n.mix(Cn,$n.diffuseTexture,$n.normalTexture,$n.specularTexture,$n.emissiveTexture,$n.environmentTexture,$n.displacementTexture,$n.basicLightPropertys,$n.alpha)){constructor(t,e,r,n,i,o,a){super(t),ze(this,Co,{writable:!0,value:void 0}),this.diffuseTexture=e,this.environmentTexture=r,this.normalTexture=n,this.emissiveTexture=o,this.specularTexture=i,this.displacementTexture=a,this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"diffuseTexture":this._diffuseTexture=t,r=e;break;case"normalTexture":this._normalTexture=t,r=e;break;case"specularTexture":this._specularTexture=t,r=e;break;case"emissiveTexture":this._emissiveTexture=t,r=e;break;case"environmentTexture":this._environmentTexture=t,r=e;break;case"displacementTexture":this._displacementTexture=t,r=e}r&&(Bo[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],Bo):this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],Bo)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,Bo[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],Bo):this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],Bo),this.needResetBindingInfo=!0)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:this._displacementTexture?this._displacementTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:2,resource:this._displacementTexture?this._displacementTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:3,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:4,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:5,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:6,resource:this._normalTexture?this._normalTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:7,resource:this._normalTexture?this._normalTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:8,resource:this._specularTexture?this._specularTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:9,resource:this._specularTexture?this._specularTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:10,resource:this._emissiveTexture?this._emissiveTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:11,resource:this._emissiveTexture?this._emissiveTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:12,resource:this._environmentTexture?this._environmentTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:13,resource:this._environmentTexture?this._environmentTexture._GPUTextureView:this.redGPUContext.state.emptyCubeTextureView}],this._afterResetBindingInfo()}}Ve(Lo,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n    ${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${rr.GLSL_SystemUniforms_vertex.meshUniforms}\n         \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out vec4 vVertexPosition;\t\n\tlayout( location = 3 ) out float vMouseColorID;\t\n\tlayout( location = 4 ) out float vSumOpacity;\n\tlayout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        float displacementFlowSpeedX;\n        float displacementFlowSpeedY;\n        float displacementPower;        \n\t\tfloat __displacementTextureRenderYn;\n    } vertexUniforms;\n\t\n\tlayout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 1 ) uniform sampler uDisplacementSampler;\n\tlayout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 2 ) uniform texture2D uDisplacementTexture;\n\tvoid main() {\t\t\n\t\tvVertexPosition = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position, 1.0);\n\t\tvNormal = (meshMatrixUniforms.normalMatrix[ int(meshUniforms.index) ] * vec4(normal,1.0)).xyz;\n\t\tvUV = uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tif(vertexUniforms.__displacementTextureRenderYn == TRUTHY) vVertexPosition.xyz += ${rr.GLSL_SystemUniforms_vertex.calcDisplacement("vNormal","vertexUniforms.displacementFlowSpeedX","vertexUniforms.displacementFlowSpeedY","vertexUniforms.displacementPower","uv","uDisplacementTexture","uDisplacementSampler")}\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * vVertexPosition;\n\t\n\t\n\t}\n\t`),Ve(Lo,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_fragment.systemUniforms}\n\t${rr.GLSL_SystemUniforms_fragment.cotangent_frame}\n\t${rr.GLSL_SystemUniforms_fragment.perturb_normal}\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform FragmentUniforms {\n        float normalPower;\n        float shininess; \n        float specularPower;\n\t    vec4 specularColor;\n\t    float emissivePower;\n\t    float environmentPower;\n\t    float alpha;\n\t    float useFlatMode;\n\t    //\n\t    float __diffuseTextureRenderYn;\n\t\tfloat __environmentTextureRenderYn;\n\t\tfloat __normalTextureRenderYn;\n\t\tfloat __specularTextureRenderYn;\n\t\tfloat __emissiveTextureRenderYn;\n    } fragmentUniforms;\n\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in vec4 vVertexPosition;\n\tlayout( location = 3 ) in float vMouseColorID;\n\tlayout( location = 4 ) in float vSumOpacity;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 4 ) uniform sampler uDiffuseSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 5 ) uniform texture2D uDiffuseTexture;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 6 ) uniform sampler uNormalSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 7 ) uniform texture2D uNormalTexture;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 8 ) uniform sampler uSpecularSampler;\t\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 9 ) uniform texture2D uSpecularTexture;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 10 ) uniform sampler uEmissiveSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 11 ) uniform texture2D uEmissiveTexture;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 12 ) uniform sampler uEnvironmentSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 13 ) uniform textureCube uEnvironmentTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tfloat testAlpha = 0.0;\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor = texture(sampler2D(uDiffuseTexture, uDiffuseSampler), vUV) ;\n\t\t\n\t\t\n\t    vec3 N = normalize(vNormal);\n\t\tvec4 normalColor = vec4(0.0);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) normalColor = texture(sampler2D(uNormalTexture, uNormalSampler), vUV) ;\n\t\tif(fragmentUniforms.useFlatMode == TRUTHY) N = getFlatNormal(vVertexPosition.xyz);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) N = perturb_normal(N, vVertexPosition.xyz, vUV, normalColor.rgb, fragmentUniforms.normalPower) ;\n\t\n\t\tif(fragmentUniforms.__environmentTextureRenderYn == TRUTHY) {\n\t\t\tvec3 R = reflect( vVertexPosition.xyz - systemUniforms.cameraPosition, N);\n\t\t\tvec4 reflectionColor = texture(samplerCube(uEnvironmentTexture,uEnvironmentSampler), R);\n\t\t\tdiffuseColor = mix(diffuseColor, reflectionColor, fragmentUniforms.environmentPower);\n\t\t}\n\t\t\n\t\ttestAlpha = diffuseColor.a ;\n\t\t\n\t\tfloat specularTextureValue = 1.0;\n\t\tif(fragmentUniforms.__specularTextureRenderYn == TRUTHY) specularTextureValue = texture(sampler2D(uSpecularTexture, uSpecularSampler), vUV).r ;\n\t\t\n\t\tvec4 finalColor = \n\t\tcalcDirectionalLight(\n\t\t\tdiffuseColor,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.directionalLightCount,\n\t\t\tsystemUniforms.directionalLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue\n\t\t)\n\t\t+\n\t\tcalcPointLight(\n\t\t\tdiffuseColor,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.pointLightCount,\n\t\t\tsystemUniforms.pointLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue,\n\t\t\tvVertexPosition.xyz\n\t\t)\n\t\t+ la;\n\t\t\n\t\tif(fragmentUniforms.__emissiveTextureRenderYn == TRUTHY) {\n\t\t\tvec4 emissiveColor = texture(sampler2D(uEmissiveTexture, uEmissiveSampler), vUV);\n\t\t\tfinalColor.rgb += emissiveColor.rgb * fragmentUniforms.emissivePower;\n\t\t}\n\t\t\n\t\t\n\t\tfinalColor.a = testAlpha;\n\t\toutColor = finalColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve(Lo,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Lo,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.VERTEX,texture:{type:"float"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:4,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:5,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}},{binding:6,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:7,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}},{binding:8,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:9,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}},{binding:10,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:11,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}},{binding:12,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:13,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}}]}),Ve(Lo,"uniformBufferDescriptor_vertex",[{size:qe.float32,valueName:"displacementFlowSpeedX"},{size:qe.float32,valueName:"displacementFlowSpeedY"},{size:qe.float32,valueName:"displacementPower"},{size:qe.float32,valueName:"__displacementTextureRenderYn"}]),Ve(Lo,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"normalPower"},{size:qe.float32,valueName:"shininess"},{size:qe.float32,valueName:"specularPower"},{size:qe.float32x4,valueName:"specularColorRGBA"},{size:qe.float32,valueName:"emissivePower"},{size:qe.float32,valueName:"environmentPower"},{size:qe.float32,valueName:"alpha"},{size:qe.float32,valueName:"useFlatMode"},{size:qe.float32,valueName:"__diffuseTextureRenderYn"},{size:qe.float32,valueName:"__environmentTextureRenderYn"},{size:qe.float32,valueName:"__normalTextureRenderYn"},{size:qe.float32,valueName:"__specularTextureRenderYn"},{size:qe.float32,valueName:"__emissiveTextureRenderYn"}]);let Ro=new Float32Array(1);var Do=new WeakMap;class Io extends($n.mix(Cn,$n.diffuseTexture,$n.normalTexture,$n.specularTexture,$n.emissiveTexture,$n.refractionTexture,$n.displacementTexture,$n.basicLightPropertys,$n.alpha)){constructor(t,e,r,n,i,o,a){super(t),ze(this,Do,{writable:!0,value:void 0}),this.diffuseTexture=e,this.refractionTexture=r,this.normalTexture=n,this.emissiveTexture=o,this.specularTexture=i,this.displacementTexture=a,this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"diffuseTexture":this._diffuseTexture=t,r=e;break;case"normalTexture":this._normalTexture=t,r=e;break;case"specularTexture":this._specularTexture=t,r=e;break;case"emissiveTexture":this._emissiveTexture=t,r=e;break;case"refractionTexture":this._refractionTexture=t,r=e;break;case"displacementTexture":this._displacementTexture=t,r=e}r&&(Ro[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],Ro):this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],Ro)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,Ro[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],Ro):this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],Ro),this.needResetBindingInfo=!0)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:this._displacementTexture?this._displacementTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:2,resource:this._displacementTexture?this._displacementTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:3,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:4,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:5,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:6,resource:this._normalTexture?this._normalTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:7,resource:this._normalTexture?this._normalTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:8,resource:this._specularTexture?this._specularTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:9,resource:this._specularTexture?this._specularTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:10,resource:this._emissiveTexture?this._emissiveTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:11,resource:this._emissiveTexture?this._emissiveTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:12,resource:this._refractionTexture?this._refractionTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:13,resource:this._refractionTexture?this._refractionTexture._GPUTextureView:this.redGPUContext.state.emptyCubeTextureView}],this._afterResetBindingInfo()}}Ve(Io,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n    ${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${rr.GLSL_SystemUniforms_vertex.meshUniforms}\n         \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out vec4 vVertexPosition;\t\n\tlayout( location = 3 ) out float vMouseColorID;\t\n\tlayout( location = 4 ) out float vSumOpacity;\n\tlayout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        float displacementFlowSpeedX;\n        float displacementFlowSpeedY;\n        float displacementPower;\n        float __displacementTextureRenderYn;\n    } vertexUniforms;\n\t\n\tlayout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 1 ) uniform sampler uDisplacementSampler;\n\tlayout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 2 ) uniform texture2D uDisplacementTexture;\n\tvoid main() {\t\t\n\t\tvVertexPosition = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position, 1.0);\n\t\tvNormal = (meshMatrixUniforms.normalMatrix[ int(meshUniforms.index) ] * vec4(normal,1.0)).xyz;\n\t\tvUV = uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tif(vertexUniforms.__displacementTextureRenderYn == TRUTHY) vVertexPosition.xyz += ${rr.GLSL_SystemUniforms_vertex.calcDisplacement("vNormal","vertexUniforms.displacementFlowSpeedX","vertexUniforms.displacementFlowSpeedY","vertexUniforms.displacementPower","uv","uDisplacementTexture","uDisplacementSampler")}\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * vVertexPosition;\t\t\n\t}\n\t`),Ve(Io,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_fragment.systemUniforms}\n\t${rr.GLSL_SystemUniforms_fragment.cotangent_frame}\n\t${rr.GLSL_SystemUniforms_fragment.perturb_normal}\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform FragmentUniforms {\n        float normalPower;\n        float shininess; \n        float specularPower;\n\t    vec4 specularColor;\n\t    float emissivePower;\n\t    float refractionPower;\n\t    float refractionRatio;\n\t    float alpha;\n\t    float useFlatMode;\n\t    //\n\t    float __diffuseTextureRenderYn;\n\t\tfloat __refractionTextureRenderYn;\n\t\tfloat __normalTextureRenderYn;\n\t\tfloat __specularTextureRenderYn;\n\t\tfloat __emissiveTextureRenderYn;\n    } fragmentUniforms;\n\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in vec4 vVertexPosition;\n\tlayout( location = 3 ) in float vMouseColorID;\n\tlayout( location = 4 ) in float vSumOpacity;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 4 ) uniform sampler uDiffuseSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 5 ) uniform texture2D uDiffuseTexture;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 6 ) uniform sampler uNormalSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 7 ) uniform texture2D uNormalTexture;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 8 ) uniform sampler uSpecularSampler;\t\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 9 ) uniform texture2D uSpecularTexture;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 10 ) uniform sampler uEmissiveSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 11 ) uniform texture2D uEmissiveTexture;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 12 ) uniform sampler uRefractionSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 13 ) uniform textureCube uRefractionTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tfloat testAlpha = 0.0;\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor = texture(sampler2D(uDiffuseTexture, uDiffuseSampler), vUV) ;\n\t\t\t\n\t    vec3 N = normalize(vNormal);\n\t\tvec4 normalColor = vec4(0.0);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) normalColor = texture(sampler2D(uNormalTexture, uNormalSampler), vUV) ;\n\t\tif(fragmentUniforms.useFlatMode == TRUTHY) N = getFlatNormal(vVertexPosition.xyz);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) N = perturb_normal(N, vVertexPosition.xyz, vUV, normalColor.rgb, fragmentUniforms.normalPower) ;\n\t\n\t\tif(fragmentUniforms.__refractionTextureRenderYn == TRUTHY) {\n\t\t\tvec3 I = normalize(vVertexPosition.xyz - systemUniforms.cameraPosition);\n\t\t\tvec3 R = refract(I, N, fragmentUniforms.refractionRatio);\n\t\t\tvec4 refractionColor = texture(samplerCube(uRefractionTexture,uRefractionSampler), R);\n\t\t\tdiffuseColor = mix(diffuseColor, refractionColor, fragmentUniforms.refractionPower);\n\t\t}\n\t\t\n\t\ttestAlpha = diffuseColor.a;\n\t\t\n\t\tfloat specularTextureValue = 1.0;\n\t\tif(fragmentUniforms.__specularTextureRenderYn == TRUTHY) specularTextureValue = texture(sampler2D(uSpecularTexture, uSpecularSampler), vUV).r ;\n\t\t\n\t\tvec4 finalColor = \n\t\tcalcDirectionalLight(\n\t\t\tdiffuseColor,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.directionalLightCount,\n\t\t\tsystemUniforms.directionalLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue\n\t\t)\n\t\t+\n\t\tcalcPointLight(\n\t\t\tdiffuseColor,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.pointLightCount,\n\t\t\tsystemUniforms.pointLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue,\n\t\t\tvVertexPosition.xyz\n\t\t)\n\t\t+ la;\n\t\t\n\t\tif(fragmentUniforms.__emissiveTextureRenderYn == TRUTHY) {\n\t\t\tvec4 emissiveColor = texture(sampler2D(uEmissiveTexture, uEmissiveSampler), vUV);\n\t\t\tfinalColor.rgb += emissiveColor.rgb * fragmentUniforms.emissivePower;\n\t\t}\n\t\t\n\t\tfinalColor.a = testAlpha;\n\t\toutColor = finalColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve(Io,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Io,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.VERTEX,texture:{type:"float"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:4,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:5,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}},{binding:6,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:7,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}},{binding:8,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:9,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}},{binding:10,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:11,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}},{binding:12,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:13,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}}]}),Ve(Io,"uniformBufferDescriptor_vertex",[{size:qe.float32,valueName:"displacementFlowSpeedX"},{size:qe.float32,valueName:"displacementFlowSpeedY"},{size:qe.float32,valueName:"displacementPower"},{size:qe.float32,valueName:"__displacementTextureRenderYn"}]),Ve(Io,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"normalPower"},{size:qe.float32,valueName:"shininess"},{size:qe.float32,valueName:"specularPower"},{size:qe.float32x4,valueName:"specularColorRGBA"},{size:qe.float32,valueName:"emissivePower"},{size:qe.float32,valueName:"refractionPower"},{size:qe.float32,valueName:"refractionRatio"},{size:qe.float32,valueName:"alpha"},{size:qe.float32,valueName:"useFlatMode"},{size:qe.float32,valueName:"__diffuseTextureRenderYn"},{size:qe.float32,valueName:"__refractionTextureRenderYn"},{size:qe.float32,valueName:"__normalTextureRenderYn"},{size:qe.float32,valueName:"__specularTextureRenderYn"},{size:qe.float32,valueName:"__emissiveTextureRenderYn"}]);let No=new Float32Array(1);var Ao=new WeakMap;class Fo extends($n.mix(Cn,$n.diffuseTexture,$n.alpha)){constructor(t,e){super(t),ze(this,Ao,{writable:!0,value:!1}),this.diffuseTexture=e,this.needResetBindingInfo=!0}get useFixedScale(){return Oe(this,Ao)}set useFixedScale(t){Ye(this,Ao,t),No[0]=t?1:0,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap.useFixedScale,No),this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"diffuseTexture":this._diffuseTexture=t,r=e}r&&(No[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],No):this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],No)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,No[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],No):this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],No),this.needResetBindingInfo=!0)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:2,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:3,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}Ve(Fo,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${rr.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out float vMouseColorID;\n\tlayout( location = 3 ) out float vSumOpacity;\t\n\tlayout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        float useFixedScale;\n    } vertexUniforms;\n    ${rr.GLSL_SystemUniforms_vertex.getSprite3DMatrix}\n\tvoid main() {\n\t\tgl_Position = systemUniforms.perspectiveMTX * getSprite3DMatrix( systemUniforms.cameraMTX, meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] ) * vec4(position,1.0);\n\t\tif(vertexUniforms.useFixedScale == TRUTHY)  {\n\t\t\tgl_Position /= gl_Position.w;\n\t\t\tgl_Position.xy += position.xy * vec2((systemUniforms.perspectiveMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ])[0][0],(systemUniforms.perspectiveMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ])[1][1]);\n\t\t}\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t}\n\t`),Ve(Fo,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\tconst float TRUTHY = 1.0;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in float vMouseColorID;\t\n\tlayout( location = 3 ) in float vSumOpacity;\t\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform FragmentUniforms {\n        float alpha;\n        //\n        float __diffuseTextureRenderYn;\n    } fragmentUniforms;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform texture2D uDiffuseTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor = texture(sampler2D(uDiffuseTexture, uSampler), vUV) ;\n\t\toutColor = diffuseColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve(Fo,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Fo,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}}]}),Ve(Fo,"uniformBufferDescriptor_vertex",[{size:qe.float32,valueName:"useFixedScale"}]),Ve(Fo,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"alpha"},{size:qe.float32,valueName:"__diffuseTextureRenderYn"}]);let Vo=new Float32Array(1);var Oo=new WeakMap;class Yo extends($n.mix(Cn,$n.diffuseTexture,$n.normalTexture,$n.specularTexture,$n.emissiveTexture,$n.displacementTexture,$n.basicLightPropertys,$n.alpha)){constructor(t,e,r,n,i,o){super(t),ze(this,Oo,{writable:!0,value:void 0}),this.diffuseTexture=e,this.normalTexture=r,this.emissiveTexture=i,this.specularTexture=n,this.displacementTexture=o,this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){let r;switch(e){case"diffuseTexture":this._diffuseTexture=t,r=e;break;case"normalTexture":this._normalTexture=t,r=e;break;case"specularTexture":this._specularTexture=t,r=e;break;case"emissiveTexture":this._emissiveTexture=t,r=e;break;case"displacementTexture":this._displacementTexture=t,r=e}r&&(Vo[0]=this[`__${e}RenderYn`]=1,"displacementTexture"==r?this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],Vo):this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],Vo)),this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,Vo[0]=this[`__${e}RenderYn`]=0,"displacementTexture"==e?this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap[`__${e}RenderYn`],Vo):this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap[`__${e}RenderYn`],Vo),this.needResetBindingInfo=!0)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:this._displacementTexture?this._displacementTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:2,resource:this._displacementTexture?this._displacementTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:3,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:4,resource:this._diffuseTexture?this._diffuseTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:5,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:6,resource:this._normalTexture?this._normalTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:7,resource:this._normalTexture?this._normalTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:8,resource:this._specularTexture?this._specularTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:9,resource:this._specularTexture?this._specularTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView},{binding:10,resource:this._emissiveTexture?this._emissiveTexture.sampler.GPUSampler:this.redGPUContext.state.emptySampler.GPUSampler},{binding:11,resource:this._emissiveTexture?this._emissiveTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}Ve(Yo,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n    ${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${rr.GLSL_SystemUniforms_vertex.meshUniforms}\n         \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out vec4 vVertexPosition;\t\n\tlayout( location = 3 ) out float vMouseColorID;\t\n\tlayout( location = 4 ) out float vSumOpacity;\n\tlayout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        float displacementFlowSpeedX;\n        float displacementFlowSpeedY;\n        float displacementPower;\n        float __displacementTextureRenderYn;\n    } vertexUniforms;\n\t\n\tlayout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 2 ) uniform texture2D uDisplacementTexture;\n\tvoid main() {\t\t\n\t\tvVertexPosition = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position, 1.0);\n\t\tvNormal = (meshMatrixUniforms.normalMatrix[ int(meshUniforms.index) ] * vec4(normal,1.0)).xyz;\n\t\tvUV = uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tif(vertexUniforms.__displacementTextureRenderYn == TRUTHY) vVertexPosition.xyz += ${rr.GLSL_SystemUniforms_vertex.calcDisplacement("vNormal","vertexUniforms.displacementFlowSpeedX","vertexUniforms.displacementFlowSpeedY","vertexUniforms.displacementPower","uv","uDisplacementTexture","uSampler")}\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * vVertexPosition;\n\t\n\t\n\t}\n\t`),Ve(Yo,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_fragment.systemUniforms}\n\t${rr.GLSL_SystemUniforms_fragment.cotangent_frame}\n\t${rr.GLSL_SystemUniforms_fragment.perturb_normal}\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform FragmentUniforms {\n        float normalPower;\n        float shininess; \n        float specularPower;\n\t    vec4 specularColor;\n\t    float emissivePower;\n\t    float alpha;\n\t    float useFlatMode;\n\t    //\n\t    float __diffuseTextureRenderYn;\n\t\tfloat __normalTextureRenderYn;\n\t\tfloat __specularTextureRenderYn;\n\t\tfloat __emissiveTextureRenderYn;\n    } fragmentUniforms;\n\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in vec4 vVertexPosition;\n\tlayout( location = 3 ) in float vMouseColorID;\t\n\tlayout( location = 4 ) in float vSumOpacity;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 4 ) uniform sampler uDiffuseSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 5 ) uniform texture2D uDiffuseTexture;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 6 ) uniform sampler uNormalSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 7 ) uniform texture2D uNormalTexture;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 8 ) uniform sampler uSpecularSampler;\t\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 9 ) uniform texture2D uSpecularTexture;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 10 ) uniform sampler uEmissiveSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 11 ) uniform texture2D uEmissiveTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\n\tvoid main() {\n\t\tfloat testAlpha = 0.0;\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tif(fragmentUniforms.__diffuseTextureRenderYn == TRUTHY) diffuseColor = texture(sampler2D(uDiffuseTexture, uDiffuseSampler), vUV) ;\n\t\t\n\t\t\n\t    vec3 N = normalize(vNormal);\n\t\tvec4 normalColor = vec4(0.0);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) normalColor = texture(sampler2D(uNormalTexture, uNormalSampler), vUV) ;\n\t\tif(fragmentUniforms.useFlatMode == TRUTHY) N = getFlatNormal(vVertexPosition.xyz);\n\t\tif(fragmentUniforms.__normalTextureRenderYn == TRUTHY) N = perturb_normal(N, vVertexPosition.xyz, vUV, normalColor.rgb, fragmentUniforms.normalPower) ;\n\t\n\t\ttestAlpha = diffuseColor.a;\n\t\n\t\tfloat specularTextureValue = 1.0;\n\t\tif(fragmentUniforms.__specularTextureRenderYn == TRUTHY) specularTextureValue = texture(sampler2D(uSpecularTexture, uSpecularSampler), vUV).r ;\n\t\t\n\t\tvec4 finalColor = \n\t\tcalcDirectionalLight(\n\t\t\tdiffuseColor,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.directionalLightCount,\n\t\t\tsystemUniforms.directionalLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue\n\t\t)\n\t\t+\n\t\tcalcPointLight(\n\t\t\tdiffuseColor,\n\t\t\tN,\t\t\n\t\t\tsystemUniforms.pointLightCount,\n\t\t\tsystemUniforms.pointLightList,\n\t\t\tfragmentUniforms.shininess,\n\t\t\tfragmentUniforms.specularPower,\n\t\t\tfragmentUniforms.specularColor,\n\t\t\tspecularTextureValue,\n\t\t\tvVertexPosition.xyz\n\t\t)\n\t\t+ la;\n\t\t\n\t\tif(fragmentUniforms.__emissiveTextureRenderYn == TRUTHY) {\n\t\t\tvec4 emissiveColor = texture(sampler2D(uEmissiveTexture, uEmissiveSampler), vUV);\n\t\t\tfinalColor.rgb += emissiveColor.rgb * fragmentUniforms.emissivePower;\n\t\t}\n\t\t\n\t\tfinalColor.a = testAlpha;\n\t\toutColor = finalColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve(Yo,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Yo,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.VERTEX,texture:{type:"float"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:4,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:5,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}},{binding:6,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:7,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}},{binding:8,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:9,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}},{binding:10,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:11,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}}]}),Ve(Yo,"uniformBufferDescriptor_vertex",[{size:qe.float32,valueName:"displacementFlowSpeedX"},{size:qe.float32,valueName:"displacementFlowSpeedY"},{size:qe.float32,valueName:"displacementPower"},{size:qe.float32,valueName:"__displacementTextureRenderYn"}]),Ve(Yo,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"normalPower"},{size:qe.float32,valueName:"shininess"},{size:qe.float32,valueName:"specularPower"},{size:qe.float32x4,valueName:"specularColorRGBA"},{size:qe.float32,valueName:"emissivePower"},{size:qe.float32,valueName:"alpha"},{size:qe.float32,valueName:"useFlatMode"},{size:qe.float32,valueName:"__diffuseTextureRenderYn"},{size:qe.float32,valueName:"__normalTextureRenderYn"},{size:qe.float32,valueName:"__specularTextureRenderYn"},{size:qe.float32,valueName:"__emissiveTextureRenderYn"}]);var Xo=new WeakMap;class zo extends Hn{constructor(t,e=1,r=1,n=1,i=1,o=1,a=1,s=1){let u;if(super(),ze(this,Xo,{writable:!0,value:function(){let t,e;return e=function(e,r,n,i,o,a,s,u,l,f,m,c,h){let d,p,v=u/m,g=l/c,_=u/2,x=l/2,y=f/2,T=m+1,U=c+1,S=0,M=[];for(p=0;p<U;p++){let t=p*g-x;for(d=0;d<T;d++){let r=d*v-_;M[n]=r*a,M[i]=t*s,M[o]=y,e.push(M.x,M.y,M.z),M[n]=0,M[i]=0,M[o]=f>0?1:-1,e.push(M.x,M.y,M.z),e.push(d/m*h,p/c*h),S+=1}}for(p=0;p<c;p++)for(d=0;d<m;d++){let e=t+d+T*p,n=t+d+T*(p+1),i=t+(d+1)+T*(p+1),o=t+(d+1)+T*p;r.push(e,n,o,n,i,o)}t+=S},function(r,n,i,o,a,s,u,l,f){let m=[],c=[];return t=0,e(m,c,"z","y","x",-1,-1,a,o,i,l,u,f),e(m,c,"z","y","x",1,-1,a,o,-i,l,u,f),e(m,c,"x","z","y",1,1,i,a,o,s,l,f),e(m,c,"x","z","y",1,-1,i,a,-o,s,l,f),e(m,c,"x","y","z",1,-1,i,o,a,s,u,f),e(m,c,"x","y","z",-1,-1,i,o,-a,s,u,f),new jn(r,new Jn(r,n+"_interleaveBuffer",Jn.TYPE_VERTEX,new Float32Array(m),[new Zn("vertexPosition","float32x3"),new Zn("vertexNormal","float32x3"),new Zn("texcoord","float32x2")]),new Jn(r,n+"_indexBuffer",Jn.TYPE_INDEX,new Uint32Array(c)))}}()}),u=[this.constructor.name,e,r,n,i,o,a,s].join("_"),t.state.Geometry.has(u))return t.state.Geometry.get(u);let l=Oe(this,Xo).call(this,t,u,e,r,n,i,o,a,s);this.interleaveBuffer=l.interleaveBuffer,this.indexBuffer=l.indexBuffer,this.vertexState=l.vertexState,t.state.Geometry.set(u,this)}}var $o=new WeakMap,ko=new WeakMap,qo=new WeakMap,Wo=new WeakMap;let Zo=new Float32Array(1);var Ho=new WeakMap,jo=new WeakMap;class Jo extends($n.mix(Cn,$n.diffuseTexture,$n.alpha)){constructor(t,e){super(t),ze(this,Ho,{writable:!0,value:!1}),ze(this,jo,{writable:!0,value:!1}),Ve(this,"_width",256),Ve(this,"_height",256),this.diffuseTexture=e,this.needResetBindingInfo=!0}get width(){return this._width}set width(t){this._width=t,Zo[0]=this._width,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap.width,Zo)}get height(){return this._height}set height(t){this._height=t,Zo[0]=this._height,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_vertex.GPUBuffer,this.uniformBufferDescriptor_vertex.redStructOffsetMap.height,Zo)}get useFixedScale(){return Oe(this,Ho)}set useFixedScale(t){Ye(this,Ho,t),this.needResetBindingInfo=!0}get useSprite3DMode(){return Oe(this,jo)}set useSprite3DMode(t){Ye(this,jo,t),this.needResetBindingInfo=!0}checkTexture(t,e){if(t)if(t._GPUTexture){switch(e){case"diffuseTexture":this._diffuseTexture=t}this.needResetBindingInfo=!0}else t.addUpdateTarget(this,e);else this["_"+e]&&(this["_"+e]=null,this.needResetBindingInfo=!0)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_vertex.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_vertex.size}},{binding:1,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:2,resource:this.redGPUContext.state.emptySampler.GPUSampler},{binding:3,resource:this._diffuseTexture?this._diffuseTexture._GPUTextureView:this.redGPUContext.state.emptyTextureView}],this._afterResetBindingInfo()}}Ve(Jo,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    ${rr.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 0 ) uniform VertexUniforms {\n        float width;\n        float height;\n    } vertexUniforms;\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out float vMouseColorID;\t\n\tlayout( location = 3 ) out float vSumOpacity;\n    ${rr.GLSL_SystemUniforms_vertex.getSprite3DMatrix}\t\n\tvoid main() {\n\t\tfloat w = vertexUniforms.width ;\n\t\tfloat h = vertexUniforms.height ;\n\t\tmat4 modelMatrix = meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ];\n\t\tmat4 targetMatrix;\n\t\t\n\t\t// 기본\n\t\ttargetMatrix = modelMatrix * mat4( w / max( w, h ), 0.0, 0.0, 0.0,   0.0, h / max( w, h ), 0.0, 0.0,    0.0, 0.0, 1.0, 0.0,    0.0, 0.0, 0.0, 1.0 );\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * targetMatrix * vec4(position,1.0);\t\t\t\t\n\t\t\n\t\t// sprite3D\n\t\t//#RedGPU#useSprite3DMode#  targetMatrix = modelMatrix * mat4( w / systemUniforms.resolution.y, 0.0, 0.0, 0.0,    0.0, h / systemUniforms.resolution.y, 0.0, 0.0,    0.0, 0.0, 1.0, 0.0,    0.0, 0.0, 0.0, 1.0);\n\t\t//#RedGPU#useSprite3DMode#  gl_Position = systemUniforms.perspectiveMTX * getSprite3DMatrix( systemUniforms.cameraMTX, targetMatrix ) * vec4(position,1.0);\t\n\t\t\t\n\t\t\n\t\t//#RedGPU#useSprite3DMode#  //#RedGPU#useFixedScale#  gl_Position /= gl_Position.w;\n\t\t//#RedGPU#useSprite3DMode#  //#RedGPU#useFixedScale#  gl_Position.xy += position.xy * vec2((systemUniforms.perspectiveMTX * targetMatrix)[0][0],(systemUniforms.perspectiveMTX * targetMatrix)[1][1]);\n\t\n\t\t\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t}\n\t`),Ve(Jo,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in float vMouseColorID;\t\n\tlayout( location = 3 ) in float vSumOpacity;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform FragmentUniforms {\n        float alpha;\n    } fragmentUniforms;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform texture2D uDiffuseTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\t//#RedGPU#diffuseTexture# diffuseColor = texture(sampler2D(uDiffuseTexture, uSampler), vUV) ;\n\t\t// if(diffuseColor.a < 0.05) discard;\n\t\toutColor = diffuseColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n`),Ve(Jo,"PROGRAM_OPTION_LIST",{vertex:["useFixedScale","useSprite3DMode"],fragment:["diffuseTexture"]}),Ve(Jo,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}}]}),Ve(Jo,"uniformBufferDescriptor_vertex",[{size:qe.float32,valueName:"width"},{size:qe.float32,valueName:"height"}]),Ve(Jo,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"alpha"}]);let Qo,Ko,ta,ea,ra,na,ia,oa,aa,sa,ua=function(t){t._height=+t._height,t._svg.setAttribute("width",t._width),t._svg.setAttribute("height",t._height),t._svg.querySelector("foreignObject").setAttribute("height",t._height),t._svg.querySelector("table").style.height=t._height+"px",t._img.src="data:image/svg+xml;charset=utf-8,"+encodeURIComponent(t._svg.outerHTML)};Qo=function(t,e,r){let n;n=t._svg.querySelector("td").style,t["_"+e]=r,Object.defineProperty(t,e,{get:function(){return t["_"+e]},set:function(r){t["_"+e]=r,n[e]="number"==typeof r?r+="px":r,ua(t)}}),t[e]=r};class la extends($n.mix(Cn,$n.alpha)){constructor(t){super(t),this.needResetBindingInfo=!0}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}}],this._afterResetBindingInfo()}}Ve(la,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n\t${rr.GLSL_SystemUniforms_vertex.meshUniforms}\n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec4 color;\n\tlayout( location = 0 ) out float vMouseColorID;\n\tlayout( location = 1 ) out vec4 vColor;\t\t\n\tlayout( location = 2 ) out float vSumOpacity;\n\tvoid main() {\n\t\tvMouseColorID = meshUniforms.mouseColorID;\n\t\tvColor = color;\n\t\tvSumOpacity = meshUniforms.sumOpacity;\n\t\tgl_Position = systemUniforms.perspectiveMTX * systemUniforms.cameraMTX * meshMatrixUniforms.modelMatrix[ int(meshUniforms.index) ] * vec4(position,1.0);\n\t\n\t}\n\t`),Ve(la,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n         float alpha;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in float vMouseColorID;\n\tlayout( location = 1 ) in vec4 vColor;\t\t\t\n\tlayout( location = 2 ) in float vSumOpacity;\n\tlayout( location = 0 ) out vec4 outColor;\t\n\tlayout( location = 1 ) out vec4 out_MouseColorID_Depth;\n\tvoid main() {\n\t\toutColor = vColor;\n\t\toutColor.a *= fragmentUniforms.alpha * vSumOpacity;\n\t\tout_MouseColorID_Depth = vec4(vMouseColorID, gl_FragCoord.z/gl_FragCoord.w, 0.0, 0.0);\n\t\t\n\t}\n\t`),Ve(la,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(la,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}]}),Ve(la,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(la,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"alpha"}]),sa=function(t,e,r){let n=Fe.vec2.sqrDist(e,r);if(0===n)return Fe.vec2.sqrDist(t,e);let i=((t[0]-e[0])*(r[0]-e[0])+(t[1]-e[1])*(r[1]-e[1]))/n;return i=Math.max(0,Math.min(1,i)),Fe.vec2.sqrDist(t,Fe.vec2.lerp([0,0],e,r,i))},aa=function(t,e,r,n,i){let o=i||[],a=t[e],s=t[r-1],u=0,l=1,f=e+1;for(;f<r-1;++f){let e=sa(t[f],a,s);e>u&&(u=e,l=f)}return Math.sqrt(u)>n?(aa(t,e,l+1,n,o),aa(t,l,r,n,o)):o.push(a,s),o},ea=function(t,e){null==e&&(e=1);let r,n,i,o,a=t.length,s=a-2,u=0;for(;u<a-1;u++)r=u?t[u-1].point:t[u].point,n=t[u].point,i=t[u+1].point,o=u===s?i:t[u+2].point,t[u].outPoint[0]=n[0]+(i[0]-r[0])/6*e,t[u].outPoint[1]=n[1]+(i[1]-r[1])/6*e,t[u].outPoint[2]=n[2]+(i[2]-r[2])/6*e,t[u+1].inPoint[0]=i[0]-(o[0]-n[0])/6*e,t[u+1].inPoint[1]=i[1]-(o[1]-n[1])/6*e,t[u+1].inPoint[2]=i[2]-(o[2]-n[2])/6*e;return t},na=function(t){let e,r,n,i=[],o=0;for(e=0,r=t.length;e<r;e++)n=t[e],0===o?(i[o++]=n.point,i[o++]=n.outPoint):(i[o++]=n.inPoint,i[o++]=n.point,t[e+1]&&(i[o++]=n.outPoint));return i},ra=function(){let t,e;return t=function(t,e){let r=t[e+0],n=t[e+1],i=t[e+2],o=t[e+3],a=3*n[0]-2*r[0]-o[0],s=3*n[1]-2*r[1]-o[1],u=3*i[0]-2*o[0]-r[0],l=3*i[1]-2*o[1]-r[1];return a*=a,s*=s,u*=u,l*=l,a<u&&(a=u),s<l&&(s=l),a+s},e=function(r,n,i,o){let a=o||[];if(t(r,n)<i)a.push(r[n+0],r[n+3]);else{let t=.5,o=r[n+0],s=r[n+1],u=r[n+2],l=r[n+3],f=Fe.vec3.lerp([0,0],o,s,t),m=Fe.vec3.lerp([0,0],s,u,t),c=Fe.vec3.lerp([0,0],u,l,t),h=Fe.vec3.lerp([0,0],f,m,t),d=Fe.vec3.lerp([0,0],m,c,t),p=Fe.vec3.lerp([0,0],h,d,t);p.colorRGBA=o.colorRGBA,e([o,f,h,p],0,i,a),e([p,d,c,l],0,i,a)}return a},function(t,r){let n=[],i=(t.length-1)/3;i=Math.floor(i);let o,a=0;for(;a<i;++a)o=3*a,e(t,o,r,n);return n}}(),oa=function(t){},ia=function(t,e,r,n,i){let o,a,s,u;switch(t._interleaveData.length=0,t.type){case va.CATMULL_ROM:case va.BEZIER:if(e.length>1)for(t._serializedPoints=na(va.CATMULL_ROM===t.type?ea(e,r):e),o=ra(t._serializedPoints,n),o=aa(o,0,o.length,i),a=0,s=o.length;a<s;a++)u=o[a],t._interleaveData.push(u[0],u[1],u[2],...u.colorRGBA);else t._interleaveData.push(0,0,0,...Je.hexToRGB_ZeroToOne(t.color));break;default:for(a=0,s=e.length;a<s;a++)u=e[a].point,t._interleaveData.push(u[0],u[1],u[2],...u.colorRGBA)}t.debug,t._upload()};class fa{constructor(t=0,e=0,r=0,n=0,i=0,o=0,a=0,s=0,u=0,l,f){let m=[...Je.hexToRGB_ZeroToOne(l),f];this.inPoint=[n,i,o],this.inPoint.colorRGBA=m,this.point=[t,e,r],this.point.colorRGBA=m,this.outPoint=[a,s,u],this.outPoint.colorRGBA=m}}var ma=new WeakMap,ca=new WeakMap,ha=new WeakMap,da=new WeakMap,pa=new WeakMap;class va extends Hr{constructor(t,e="#ff0000",r=va.LINEAR){super(t),ze(this,ma,{writable:!0,value:void 0}),ze(this,ca,{writable:!0,value:void 0}),ze(this,ha,{writable:!0,value:void 0}),ze(this,da,{writable:!0,value:void 0}),ze(this,pa,{writable:!0,value:[]}),this.redGPUContext=t,this._interleaveData=[0,0,0],this.primitiveTopology="line-strip",this._serializedPoints=[],Ye(this,ca,1),Ye(this,da,.01),Ye(this,ha,.1),this.color=e,Ye(this,ma,r),this._debug=!1,this.material=new la(this.redGPUContext),this.dirtyPipeline=!1}get type(){return Oe(this,ma)}set type(t){t!==va.LINEAR&&t!==va.CATMULL_ROM&&t!==va.BEZIER&&Je.throwFunc("Line : 허용하지 않는 타입","입력값 : "+t),Ye(this,ma,t),ia(this,Oe(this,pa),Oe(this,ca),Oe(this,da),Oe(this,ha))}get tension(){return Oe(this,ca)}set tension(t){Ye(this,ca,t),ia(this,Oe(this,pa),Oe(this,ca),Oe(this,da),Oe(this,ha))}get distance(){return Oe(this,ha)}set distance(t){Ye(this,ha,t),ia(this,Oe(this,pa),Oe(this,ca),Oe(this,da),Oe(this,ha))}get tolerance(){return Oe(this,da)}set tolerance(t){Ye(this,da,t),ia(this,Oe(this,pa),Oe(this,ca),Oe(this,da),Oe(this,ha))}addPoint(t=0,e=0,r=0,n,i=1,o=0,a=0,s=0,u=0,l=0,f=0){"number"==typeof t||Je.throwFunc("Line : addPoint - x값은 숫자만 허용","입력값 : "+t),"number"==typeof e||Je.throwFunc("Line : addPoint - y값은 숫자만 허용","입력값 : "+e),"number"==typeof r||Je.throwFunc("Line : addPoint - z값은 숫자만 허용","입력값 : "+r),"number"==typeof o||Je.throwFunc("Line : addPoint - inX값은 숫자만 허용","입력값 : "+o),"number"==typeof a||Je.throwFunc("Line : addPoint - inY값은 숫자만 허용","입력값 : "+a),"number"==typeof s||Je.throwFunc("Line : addPoint - inZ값은 숫자만 허용","입력값 : "+s),"number"==typeof u||Je.throwFunc("Line : addPoint - outX값은 숫자만 허용","입력값 : "+u),"number"==typeof l||Je.throwFunc("Line : addPoint - outY값은 숫자만 허용","입력값 : "+l),"number"==typeof f||Je.throwFunc("Line : addPoint - outZ값은 숫자만 허용","입력값 : "+f),Oe(this,pa).push(new fa(t,e,r,o,a,s,u,l,f,n||this.color,i)),ia(this,Oe(this,pa),Oe(this,ca),Oe(this,da),Oe(this,ha))}addPointAt(t,e=0,r=0,n=0,i,o=1,a=0,s=0,u=0,l=0,f=0,m=0){"number"==typeof e||Je.throwFunc("Line : addPoint - x값은 숫자만 허용","입력값 : "+e),"number"==typeof r||Je.throwFunc("Line : addPoint - y값은 숫자만 허용","입력값 : "+r),"number"==typeof n||Je.throwFunc("Line : addPoint - z값은 숫자만 허용","입력값 : "+n),"number"==typeof a||Je.throwFunc("Line : addPoint - inX값은 숫자만 허용","입력값 : "+a),"number"==typeof s||Je.throwFunc("Line : addPoint - inY값은 숫자만 허용","입력값 : "+s),"number"==typeof u||Je.throwFunc("Line : addPoint - inZ값은 숫자만 허용","입력값 : "+u),"number"==typeof l||Je.throwFunc("Line : addPoint - outX값은 숫자만 허용","입력값 : "+l),"number"==typeof f||Je.throwFunc("Line : addPoint - outY값은 숫자만 허용","입력값 : "+f),"number"==typeof m||Je.throwFunc("Line : addPoint - outZ값은 숫자만 허용","입력값 : "+m),"number"==typeof t||Je.throwFunc("addPointAt","index는 숫자만 입력가능","입력값 : "+t),Oe(this,pa).length<t&&(t=Oe(this,pa).length),null!=t?Oe(this,pa).splice(t,0,new fa(e,r,n,a,s,u,l,f,m,i||this.color,o)):Oe(this,pa).push(new fa(e,r,n,a,s,u,l,f,m,i||this.color,o)),ia(this,Oe(this,pa),Oe(this,ca),Oe(this,da),Oe(this,ha))}removePointAt(t){"number"!=typeof t&&Je.throwFunc("removeChildAt","index가 Number형이 아님 ","입력값 : "+t),Oe(this,pa)[t]?Oe(this,pa).splice(t,1):Je.throwFunc("removeChildAt","index 해당인덱스에 위치한 포인트가 없음.","입력값 : "+t),ia(this,Oe(this,pa),Oe(this,ca),Oe(this,da),Oe(this,ha))}removeAllPoint(){Oe(this,pa).length=0,ia(this,Oe(this,pa),Oe(this,ca),Oe(this,da),Oe(this,ha)),this._upload()}_upload(){this._UUID=ke.getNextUUID(),Oe(this,pa).length?(this._interleaveBuffer=new Jn(this.redGPUContext,"Line_InterleaveBuffer_"+this._UUID,Jn.TYPE_VERTEX,new Float32Array(this._interleaveData),[new Zn("vertexPosition","float32x3"),new Zn("vertexColor","float32x4")]),this.geometry=new jn(this.redGPUContext,this._interleaveBuffer)):(this._interleaveBuffer=null,this.geometry=null)}}Ve(va,"LINEAR","linear"),Ve(va,"CATMULL_ROM","catmullRom"),Ve(va,"BEZIER","bezier");const ga=new Float32Array(1);class _a extends Ci{constructor(t){super(t),Ve(this,"_brightness",0),Ve(this,"_contrast",0)}get brightness(){return this._brightness}set brightness(t){this._brightness=t,ga[0]=this._brightness/255,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.brightness,ga)}get contrast(){return this._contrast}set contrast(t){this._contrast=t,ga[0]=this._contrast/255,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.contrast,ga)}}Ve(_a,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve(_a,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float brightness;\n        float contrast;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 finalColor = vec4(0.0);\n\t\tfinalColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\t\tif ( fragmentUniforms.contrast > 0.0 ) finalColor.rgb = ( finalColor.rgb - 0.5 ) / ( 1.0 - fragmentUniforms.contrast ) + 0.5;\n\t\telse finalColor.rgb = ( finalColor.rgb - 0.5 ) * ( 1.0 + fragmentUniforms.contrast ) + 0.5;\n\t\tfinalColor.rgb += fragmentUniforms.brightness;\n\t\toutColor = finalColor;\n\t}\n`),Ve(_a,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(_a,"uniformsBindGroupLayoutDescriptor_material",Ci.uniformsBindGroupLayoutDescriptor_material),Ve(_a,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(_a,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"brightness"},{size:qe.float32,valueName:"contrast"}]);class xa extends Ci{constructor(t){super(t)}}Ve(xa,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve(xa,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tdiffuseColor = texture( sampler2D( uSourceTexture, uSampler ), vUV ) ;\n\t    float gray = (diffuseColor.r  + diffuseColor.g + diffuseColor.b)/3.0;\n\t\toutColor = vec4( gray, gray, gray, 1.0);;\n\t}\n`),Ve(xa,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(xa,"uniformsBindGroupLayoutDescriptor_material",Ci.uniformsBindGroupLayoutDescriptor_material),Ve(xa,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(xa,"uniformBufferDescriptor_fragment",Cn.uniformBufferDescriptor_empty);const ya=new Float32Array(1);class Ta extends Ci{constructor(t){super(t),Ve(this,"_hue",0),Ve(this,"_saturation",0)}get hue(){return this._hue}set hue(t){this._hue=t,ya[0]=this._hue/180,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.hue,ya)}get saturation(){return this._saturation}set saturation(t){this._saturation=t,ya[0]=this._saturation/100,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.saturation,ya)}}Ve(Ta,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve(Ta,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float hue;\n        float saturation;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 finalColor = vec4(0.0);\n\t\tfinalColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\t\t\n\t\tfloat hue_value = fragmentUniforms.hue;\n\t\tfloat angle = hue_value * 3.1415926535897932384626433832795;\n\t\tfloat s = sin(angle), c = cos(angle);\n\t\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\n\t\tfloat len = length(finalColor.rgb);\n\t\t\n\t\tfinalColor.rgb = vec3(\n\t\t\tdot(finalColor.rgb, weights.xyz),\n\t\t\tdot(finalColor.rgb, weights.zxy),\n\t\t\tdot(finalColor.rgb, weights.yzx)\n\t\t);\n\t\t\n\t\tfloat average = (finalColor.r + finalColor.g + finalColor.b) / 3.0;\n\t\tfloat saturation_value = fragmentUniforms.saturation;\n\t\tif (saturation_value > 0.0) finalColor.rgb += (average - finalColor.rgb) * (1.0 - 1.0 / (1.001 - saturation_value));\n\t\telse finalColor.rgb += (average - finalColor.rgb) * (-saturation_value);\n\t\t\n\t\toutColor = finalColor;\n\t}\n`),Ve(Ta,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Ta,"uniformsBindGroupLayoutDescriptor_material",Ci.uniformsBindGroupLayoutDescriptor_material),Ve(Ta,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(Ta,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"hue"},{size:qe.float32,valueName:"saturation"}]);class Ua extends Ci{constructor(t){super(t)}}Ve(Ua,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve(Ua,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 diffuseColor = vec4(0.0);\n\t\tdiffuseColor = texture( sampler2D( uSourceTexture, uSampler ), vUV ) ;\n\t\tdiffuseColor.rgb = 1.0 - diffuseColor.rgb;\n\t\toutColor = diffuseColor;\n\t}\n`),Ve(Ua,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Ua,"uniformsBindGroupLayoutDescriptor_material",Ci.uniformsBindGroupLayoutDescriptor_material),Ve(Ua,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(Ua,"uniformBufferDescriptor_fragment",Cn.uniformBufferDescriptor_empty);const Sa=new Float32Array(1);class Ma extends Ci{constructor(t){super(t),Ve(this,"_threshold",128)}get threshold(){return this._threshold}set threshold(t){this._threshold=t,Sa[0]=this._threshold,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.threshold,Sa)}}Ve(Ma,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve(Ma,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float threshold;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 finalColor = vec4(0.0);\n\t\tfinalColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\t\tfloat v = 0.0;\n\t\tif( 0.2126 * finalColor.r + 0.7152 * finalColor.g + 0.0722 * finalColor.b >= fragmentUniforms.threshold/255.0 ) v = 1.0;\n\t\tfinalColor.r = finalColor.g = finalColor.b = v;\n\t\toutColor = finalColor;\n\t}\n`),Ve(Ma,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Ma,"uniformsBindGroupLayoutDescriptor_material",Ci.uniformsBindGroupLayoutDescriptor_material),Ve(Ma,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(Ma,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"threshold"}]);const ba=new Float32Array(1);class Pa extends Ci{constructor(t){super(t),Ve(this,"_size",50)}get size(){return this._size}set size(t){this._size=t,ba[0]=this._size,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.size,ba)}}Ve(Pa,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve(Pa,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float size;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tfloat random(vec3 scale, float seed) {\n\t\treturn fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n\t}\n\n\tvoid main() {\n\t\tvec4 finalColor = vec4(0.0);\n\t\tvec2 delta;\n\t\tfloat total = 0.0;\n\t\tfloat offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\t\tdelta = vec2( fragmentUniforms.size/systemUniforms.resolution.x, 0.0 );\n\t\tfor (float t = -10.0; t <= 10.0; t++) {\n\t\t\tfloat percent = (t + offset - 0.5) / 10.0;\n\t\t\tfloat weight = 1.0 - abs(percent);\n\t\t\tvec4 color = texture( sampler2D( uSourceTexture, uSampler ), vUV  + delta * percent );\n\t\t\tcolor.rgb *= color.a;\n\t\t\tfinalColor += color * weight;\n\t\t\ttotal += weight;\n\t\t}\n\t\tfinalColor = finalColor / total;\n\t\tfinalColor.rgb /= finalColor.a + 0.00001;\n\t\toutColor = finalColor;\n\t}\n`),Ve(Pa,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Pa,"uniformsBindGroupLayoutDescriptor_material",Ci.uniformsBindGroupLayoutDescriptor_material),Ve(Pa,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(Pa,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"size"}]);const wa=new Float32Array(1);class Ga extends Ci{constructor(t){super(t),Ve(this,"_size",50)}get size(){return this._size}set size(t){this._size=t,wa[0]=this._size,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.size,wa)}}Ve(Ga,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve(Ga,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float size;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tfloat random(vec3 scale, float seed) {\n\t\treturn fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n\t}\n\n\tvoid main() {\n\t\tvec4 finalColor = vec4(0.0);\n\t\tvec2 delta;\n\t\tfloat total = 0.0;\n\t\tfloat offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\t\tdelta = vec2( 0.0, fragmentUniforms.size/systemUniforms.resolution.y );\n\t\tfor (float t = -10.0; t <= 10.0; t++) {\n\t\t\tfloat percent = (t + offset - 0.5) / 10.0;\n\t\t\tfloat weight = 1.0 - abs(percent);\n\t\t\tvec4 color = texture( sampler2D( uSourceTexture, uSampler ), vUV  + delta * percent );\n\t\t\tcolor.rgb *= color.a;\n\t\t\tfinalColor += color * weight;\n\t\t\ttotal += weight;\n\t\t}\n\t\tfinalColor = finalColor / total;\n\t\tfinalColor.rgb /= finalColor.a + 0.00001;\n\t\toutColor = finalColor;\n\t}\n`),Ve(Ga,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Ga,"uniformsBindGroupLayoutDescriptor_material",Ci.uniformsBindGroupLayoutDescriptor_material),Ve(Ga,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(Ga,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"size"}]);var Ea=new WeakMap,Ba=new WeakMap;class Ca extends Ci{constructor(t){super(t),ze(this,Ea,{writable:!0,value:void 0}),ze(this,Ba,{writable:!0,value:void 0}),Ve(this,"_radius",void 0),Ye(this,Ea,new Pa(t)),Ye(this,Ba,new Ga(t)),this.radius=5}get radius(){return this._radius}set radius(t){this._radius=t,Oe(this,Ea).size=t,Oe(this,Ba).size=t}render(t,e,r,n){this.checkSize(t,e),Oe(this,Ea).render(t,e,r,n),Oe(this,Ba).render(t,e,r,Oe(this,Ea).baseAttachmentView),this.baseAttachment=Oe(this,Ba).baseAttachment,this.baseAttachmentView=Oe(this,Ba).baseAttachmentView}}Ve(Ca,"vertexShaderGLSL",Ci.vertexShaderGLSL),Ve(Ca,"fragmentShaderGLSL",Ci.fragmentShaderGLSL),Ve(Ca,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Ca,"uniformsBindGroupLayoutDescriptor_material",Ci.uniformsBindGroupLayoutDescriptor_material),Ve(Ca,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(Ca,"uniformBufferDescriptor_fragment",Cn.uniformBufferDescriptor_empty);const La=new Float32Array(1);class Ra extends Ci{constructor(t){super(t),Ve(this,"blurTexture",void 0),Ve(this,"_bloomStrength",15),Ve(this,"_exposure",15)}get bloomStrength(){return this._bloomStrength}set bloomStrength(t){this._bloomStrength=t,La[0]=this._bloomStrength,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.bloomStrength,La)}get exposure(){return this._exposure}set exposure(t){this._exposure=t,La[0]=this._exposure,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.exposure,La)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:1,resource:this.sampler.GPUSampler},{binding:2,resource:this.sourceTexture},{binding:3,resource:this.blurTexture}],this._afterResetBindingInfo()}}Ve(Ra,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve(Ra,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float bloomStrength;\n        float exposure;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform texture2D uBlurTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 diffuseColor;\n\t\tvec4 blurColor;\n\t\tvec4 finalColor;\n\t\tdiffuseColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\t\tblurColor = texture( sampler2D( uBlurTexture, uSampler ), vUV );\t\n\t\tfinalColor = diffuseColor;\n\t\tfinalColor.rgb = (finalColor.rgb  + blurColor.rgb * fragmentUniforms.bloomStrength ) * fragmentUniforms.exposure ;\n\t\toutColor = finalColor;\n\t}\n`),Ve(Ra,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Ra,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}}]}),Ve(Ra,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(Ra,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"bloomStrength"},{size:qe.float32,valueName:"exposure"}]);var Da=new WeakMap,Ia=new WeakMap,Na=new WeakMap,Aa=new WeakMap,Fa=new WeakMap,Va=new WeakMap,Oa=new WeakMap;class Ya extends Ci{constructor(t){super(t),ze(this,Da,{writable:!0,value:void 0}),ze(this,Ia,{writable:!0,value:void 0}),ze(this,Na,{writable:!0,value:void 0}),ze(this,Aa,{writable:!0,value:void 0}),ze(this,Fa,{writable:!0,value:void 0}),ze(this,Va,{writable:!0,value:void 0}),ze(this,Oa,{writable:!0,value:void 0}),Ye(this,Na,new Ma(t)),Ye(this,Da,new Ca(t)),Ye(this,Ia,new Ra(t)),this.blur=20,this.threshold=75,this.exposure=1,this.bloomStrength=1.2}get blur(){return Oe(this,Aa)}set blur(t){Ye(this,Aa,t),Oe(this,Da).radius=t}get threshold(){return Oe(this,Fa)}set threshold(t){Ye(this,Fa,t),Oe(this,Na).threshold=t}get exposure(){return Oe(this,Va)}set exposure(t){Ye(this,Va,t),Oe(this,Ia).exposure=t}get bloomStrength(){return Oe(this,Oa)}set bloomStrength(t){Ye(this,Oa,t),Oe(this,Ia).bloomStrength=t}render(t,e,r,n){this.checkSize(t,e),Oe(this,Na).render(t,e,r,n),Oe(this,Da).render(t,e,r,Oe(this,Na).baseAttachmentView),Oe(this,Ia).blurTexture=Oe(this,Da).baseAttachmentView,Oe(this,Ia).render(t,e,r,n),this.baseAttachment=Oe(this,Ia).baseAttachment,this.baseAttachmentView=Oe(this,Ia).baseAttachmentView}}Ve(Ya,"vertexShaderGLSL",Ci.vertexShaderGLSL),Ve(Ya,"fragmentShaderGLSL",Ci.fragmentShaderGLSL),Ve(Ya,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Ya,"uniformsBindGroupLayoutDescriptor_material",Ci.uniformsBindGroupLayoutDescriptor_material),Ve(Ya,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(Ya,"uniformBufferDescriptor_fragment",Cn.uniformBufferDescriptor_empty);class Xa extends Ci{constructor(t){super(t)}}Ve(Xa,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position * 2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve(Xa,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvec4 finalColor;\n\tvec2 px;\n\tfloat t = 1.0;\n\tvoid main() {\n\t\tpx = vec2(t/systemUniforms.resolution.x, t/systemUniforms.resolution.y);\n\t\tfinalColor = vec4(0.0);\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2(-7.0 * px.x, -7.0 * px.y) ) * 0.0044299121055113265;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2(-6.0 * px.x, -6.0 * px.y) ) * 0.00895781211794;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2(-5.0 * px.x, -5.0 * px.y) ) * 0.0215963866053;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2(-4.0 * px.x, -4.0 * px.y) ) * 0.0443683338718;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2(-3.0 * px.x, -3.0 * px.y) ) * 0.0776744219933;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2(-2.0 * px.x, -2.0 * px.y) ) * 0.115876621105;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2(-1.0 * px.x, -1.0 * px.y) ) * 0.147308056121;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV                             ) * 0.159576912161;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2( 1.0 * px.x,  1.0 * px.y) ) * 0.147308056121;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2( 2.0 * px.x,  2.0 * px.y) ) * 0.115876621105;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2( 3.0 * px.x,  3.0 * px.y) ) * 0.0776744219933;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2( 4.0 * px.x,  4.0 * px.y) ) * 0.0443683338718;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2( 5.0 * px.x,  5.0 * px.y) ) * 0.0215963866053;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2( 6.0 * px.x,  6.0 * px.y) ) * 0.00895781211794;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + vec2( 7.0 * px.x,  7.0 * px.y) ) * 0.0044299121055113265;\n\t\toutColor = finalColor;\n\t}\n`),Ve(Xa,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Xa,"uniformsBindGroupLayoutDescriptor_material",Ci.uniformsBindGroupLayoutDescriptor_material),Ve(Xa,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(Xa,"uniformBufferDescriptor_fragment",Cn.uniformBufferDescriptor_empty);const za=new Float32Array(1);class $a extends Ci{constructor(t){super(t),Ve(this,"_centerX",0),Ve(this,"_centerY",0),Ve(this,"_amount",38)}get centerX(){return this._centerX}set centerX(t){this._centerX=t,za[0]=this._centerX,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.centerX,za)}get centerY(){return this._centerY}set centerY(t){this._centerY=t,za[0]=this._centerY,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.centerY,za)}get amount(){return this._amount}set amount(t){this._amount=t,za[0]=this._amount,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.amount,za)}get radius(){return this._radius}}Ve($a,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t}\n\t`),Ve($a,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float centerX;\n        float centerY;\n        float amount;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tfloat random(vec3 scale, float seed) {\n\t\treturn fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n\t}\n\n\tvoid main() {\n\t\tvec4 finalColor = vec4(0.0);\n\t\tvec2 center = vec2( fragmentUniforms.centerX + 0.5, -fragmentUniforms.centerY + 0.5 );\n\t\tvec2 toCenter = center - vUV ;\n\t\tfloat offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\t\tfloat total = 0.0;\n\t\t\n\t\tfor (float t = 0.0; t <= 30.0; t++) {\n\t\t\tfloat percent = (t + offset) / 30.0;\n\t\t\tfloat weight = 3.0 * (percent - percent * percent);\n\t\t\tvec4 color = texture( sampler2D( uSourceTexture, uSampler ), vUV + toCenter * percent * fragmentUniforms.amount / 100.0 );\n\t\t\tcolor.rgb *= color.a;\n\t\t\tfinalColor += color * weight;\n\t\t\ttotal += weight;\n\t\t}\n\t\tfinalColor = finalColor / total;\n\t\tfinalColor.rgb /= finalColor.a + 0.00001;\n\t\toutColor = finalColor;\n\t}\n`),Ve($a,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve($a,"uniformsBindGroupLayoutDescriptor_material",Ci.uniformsBindGroupLayoutDescriptor_material),Ve($a,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve($a,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"centerX"},{size:qe.float32,valueName:"centerY"},{size:qe.float32,valueName:"amount"}]);const ka=new Float32Array(1);class qa extends Ci{constructor(t){super(t),Ve(this,"blurTexture",void 0),Ve(this,"depthTexture",void 0),Ve(this,"_focusLength",15)}get focusLength(){return this._focusLength}set focusLength(t){this._focusLength=t,ka[0]=this._focusLength,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.focusLength,ka)}resetBindingInfo(){this.entries=[{binding:0,resource:{buffer:this.uniformBuffer_fragment.GPUBuffer,offset:0,size:this.uniformBufferDescriptor_fragment.size}},{binding:1,resource:this.sampler.GPUSampler},{binding:2,resource:this.sourceTexture},{binding:3,resource:this.blurTexture},{binding:4,resource:this.depthTexture}],this._afterResetBindingInfo()}}Ve(qa,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t}\n\t`),Ve(qa,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float focusLength;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 3 ) uniform texture2D uBlurTexture;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 4 ) uniform texture2D uDepthTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 diffuseColor;\n\t\tvec4 blurColor;\n\t\tvec4 depthColor;\n\t\tdiffuseColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\t\tblurColor = texture( sampler2D( uBlurTexture, uSampler ), vUV );\n\t\tdepthColor = texture( sampler2D( uDepthTexture, uSampler ), vUV );\n\t\tdepthColor = depthColor * fragmentUniforms.focusLength;\n\t\t\n\t\tdiffuseColor.rgb *= min(depthColor.g,1.0);\n\t\tblurColor.rgb *= max(1.0 - depthColor.g,0.0);\n\t\toutColor = diffuseColor + blurColor;\n\t}\n`),Ve(qa,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(qa,"uniformsBindGroupLayoutDescriptor_material",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}},{binding:4,visibility:GPUShaderStage.FRAGMENT,texture:{type:"float"}}]}),Ve(qa,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(qa,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"focusLength"}]);var Wa=new WeakMap,Za=new WeakMap,Ha=new WeakMap,ja=new WeakMap;class Ja extends Ci{constructor(t){super(t),ze(this,Wa,{writable:!0,value:void 0}),ze(this,Za,{writable:!0,value:void 0}),ze(this,Ha,{writable:!0,value:void 0}),ze(this,ja,{writable:!0,value:void 0}),Ye(this,Wa,new Ca(t)),Ye(this,Za,new qa(t)),this.blur=5,this.focusLength=15}get blur(){return Oe(this,Ha)}set blur(t){Ye(this,Ha,t),Oe(this,Wa).radius=t}get focusLength(){return Oe(this,ja)}set focusLength(t){Ye(this,ja,t),Oe(this,Za).focusLength=t}render(t,e,r,n){this.checkSize(t,e),Oe(this,Wa).render(t,e,r,n),Oe(this,Za).blurTexture=Oe(this,Wa).baseAttachmentView,Oe(this,Za).depthTexture=e.baseAttachment_mouseColorID_depth_ResolveTargetView,Oe(this,Za).render(t,e,r,n),this.baseAttachment=Oe(this,Za).baseAttachment,this.baseAttachmentView=Oe(this,Za).baseAttachmentView}}Ve(Ja,"vertexShaderGLSL",Ci.vertexShaderGLSL),Ve(Ja,"fragmentShaderGLSL",Ci.fragmentShaderGLSL),Ve(Ja,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Ja,"uniformsBindGroupLayoutDescriptor_material",Ci.uniformsBindGroupLayoutDescriptor_material),Ve(Ja,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(Ja,"uniformBufferDescriptor_fragment",Cn.uniformBufferDescriptor_empty);const Qa=new Float32Array(1);class Ka extends Ci{constructor(t){super(t),Ve(this,"_centerX",0),Ve(this,"_centerY",0),Ve(this,"_angle",0),Ve(this,"_radius",2),Ve(this,"_grayMode",!1)}get centerX(){return this._centerX}set centerX(t){this._centerX=t,Qa[0]=this._centerX,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.centerX,Qa)}get centerY(){return this._centerY}set centerY(t){this._centerY=t,Qa[0]=this._centerY,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.centerY,Qa)}get angle(){return this._angle}set angle(t){this._angle=t,Qa[0]=this._angle,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.angle,Qa)}get radius(){return this._radius}set radius(t){this._radius=t,Qa[0]=this._radius,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.radius,Qa)}get grayMode(){return this._grayMode}set grayMode(t){this._grayMode=t,Qa[0]=this._grayMode?1:0,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.grayMode,Qa)}}Ve(Ka,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t}\n\t`),Ve(Ka,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float centerX;\n        float centerY;\n        float angle;\n        float radius;\n        float grayMode;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tfloat pattern(float angle) {\n\t\tangle = angle * 3.141592653589793/180.0;\n\t\tfloat s = sin(angle), c = cos(angle);\n\t\tvec2 tex = vUV;\n\t\ttex.x -= fragmentUniforms.centerX + 0.5;\n\t\ttex.y -= fragmentUniforms.centerY + 0.5;\n\t\tvec2 point = vec2(\n\t\t\tc * tex.x - s * tex.y,\n\t\t\ts * tex.x + c * tex.y\n\t\t) * systemUniforms.resolution /fragmentUniforms.radius;\n\t\treturn (sin(point.x) * sin(point.y)) * 4.0;\n\t}\n\n\tvoid main() {\n\t\tvec4 finalColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\t\tif(fragmentUniforms.grayMode == 1.0) {\n\t\t\tfloat average = (finalColor.r + finalColor.g + finalColor.b) / 3.0;\n\t\t\tfinalColor = vec4(vec3(average * 10.0 - 5.0 + pattern(fragmentUniforms.angle)), finalColor.a);\n\t\t}else{\n\t\t\tvec3 cmy = 1.0 - finalColor.rgb;\n\t\t\tfloat k = min(cmy.x, min(cmy.y, cmy.z));\n\t\t\tcmy = (cmy - k) / (1.0 - k);\n\t\t\tcmy = clamp(cmy * 10.0 - 3.0 + vec3(pattern(fragmentUniforms.angle + 0.26179), pattern(fragmentUniforms.angle + 1.30899), pattern(fragmentUniforms.angle)), 0.0, 1.0);\n\t\t\tk = clamp(k * 10.0 - 5.0 + pattern(fragmentUniforms.angle + 0.78539), 0.0, 1.0);\n\t\t\tfinalColor = vec4(1.0 - cmy - k, finalColor.a);\n\t\t}\n\t\toutColor = finalColor;\n\t}\n`),Ve(Ka,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(Ka,"uniformsBindGroupLayoutDescriptor_material",Ci.uniformsBindGroupLayoutDescriptor_material),Ve(Ka,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(Ka,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"centerX"},{size:qe.float32,valueName:"centerY"},{size:qe.float32,valueName:"angle"},{size:qe.float32,valueName:"radius"},{size:qe.float32,valueName:"grayMode"}]);const ts=new Float32Array(1);class es extends Ci{constructor(t){super(t),Ve(this,"_width",5),Ve(this,"_height",5)}get width(){return this._width}set width(t){this._width=t,ts[0]=this._width,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.width,ts)}get height(){return this._height}set height(t){this._height=t,ts[0]=this._height,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.height,ts)}}Ve(es,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t}\n\t`),Ve(es,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float width;\n        float height;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\tvoid main() {\n\t\tvec4 finalColor;\n\t\tfloat dx = 1.0/systemUniforms.resolution.x * fragmentUniforms.width;\n\t\tfloat dy = 1.0/systemUniforms.resolution.y * fragmentUniforms.height;\n\t\tvec2 coord = vec2(\n\t\t\tdx * (floor(vUV.x / dx) + 0.5),\n\t\t\tdy * (floor(vUV.y / dy) + 0.5)\n\t\t);\n\t\tfinalColor = texture( sampler2D( uSourceTexture, uSampler ), coord );\n\t\toutColor = finalColor;\n\t}\n`),Ve(es,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(es,"uniformsBindGroupLayoutDescriptor_material",Ci.uniformsBindGroupLayoutDescriptor_material),Ve(es,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(es,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"width"},{size:qe.float32,valueName:"height"}]);const rs=new Float32Array(1);class ns extends Ci{constructor(t,e=ns.NORMAL){super(t),Ve(this,"_kernel",void 0),Ve(this,"_kernelWeight",void 0),this.kernel=e}get kernel(){return this._kernel}set kernel(t){this._kernel=t,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.kernel,this._kernel),this.kernelWeight=1}get kernelWeight(){return this._kernelWeight}set kernelWeight(t){let e=0,r=this._kernel.length;for(;r--;)e+=this._kernel[r];this._kernelWeight=e,rs[0]=e,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.kernelWeight,rs)}}Ve(ns,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out float vTime;\n\tvoid main() {\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tvTime = systemUniforms.time;\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t}\n\t`),Ve(ns,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float kernelWeight;\n        mat3 kernel;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in float vTime;\n\tlayout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_VertexUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tvoid main() {\n\n\t\tvec2 perPX = vec2(1.0/systemUniforms.resolution.x, 1.0/systemUniforms.resolution.y);\n\t\tvec4 finalColor = vec4(0.0);\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2(-1.0, -1.0)) * fragmentUniforms.kernel[0][0] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2( 0.0, -1.0)) * fragmentUniforms.kernel[0][1] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2( 1.0, -1.0)) * fragmentUniforms.kernel[0][2] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2(-1.0,  0.0)) * fragmentUniforms.kernel[1][0] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2( 0.0,  0.0)) * fragmentUniforms.kernel[1][1] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2( 1.0,  0.0)) * fragmentUniforms.kernel[1][2] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2(-1.0,  1.0)) * fragmentUniforms.kernel[2][0] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2( 0.0,  1.0)) * fragmentUniforms.kernel[2][1] ;\n\t\tfinalColor += texture( sampler2D( uSourceTexture, uSampler ), vUV + perPX * vec2( 1.0,  1.0)) * fragmentUniforms.kernel[2][2] ;\n\t\n\t\toutColor = vec4((finalColor / fragmentUniforms.kernelWeight).rgb, 1.0);\n\t}\n`),Ve(ns,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(ns,"uniformsBindGroupLayoutDescriptor_material",Ci.uniformsBindGroupLayoutDescriptor_material),Ve(ns,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(ns,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"kernelWeight"},{size:qe.mat3,valueName:"kernel"}]),Ve(ns,"NORMAL",new Float32Array([0,0,0,0,0,1,0,0,0,0,0,0])),Ve(ns,"SHARPEN",new Float32Array([0,-1,0,0,-1,5,-1,0,0,-1,0,0])),Ve(ns,"BLUR",new Float32Array([1,1,1,0,1,1,1,0,1,1,1,0])),Ve(ns,"EDGE",new Float32Array([0,1,0,0,1,-4,1,0,0,1,0,0])),Ve(ns,"EMBOSS",new Float32Array([-2,-1,0,0,-1,1,1,0,0,1,2,0]));const is=new Float32Array(1);class os extends Ci{constructor(t){super(t),Ve(this,"_scanlineIntensity",.5),Ve(this,"_noiseIntensity",.5),Ve(this,"_scanlineCount",2048),Ve(this,"_grayMode",!1)}get scanlineIntensity(){return this._scanlineIntensity}set scanlineIntensity(t){this._scanlineIntensity=t,is[0]=this._scanlineIntensity,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.scanlineIntensity,is)}get noiseIntensity(){return this._noiseIntensity}set noiseIntensity(t){this._noiseIntensity=t,is[0]=this._noiseIntensity,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.noiseIntensity,is)}get scanlineCount(){return this._scanlineCount}set scanlineCount(t){this._scanlineCount=t,is[0]=this._scanlineCount,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.scanlineCount,is)}get grayMode(){return this._grayMode}set grayMode(t){this._grayMode=t,is[0]=this._grayMode?1:0,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.grayMode,is)}}Ve(os,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tlayout( location = 2 ) out float vTime;\n\tvoid main() {\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tvTime = systemUniforms.time;\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t}\n\t`),Ve(os,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float scanlineIntensity;\n        float noiseIntensity;\n        float scanlineCount;\n        float grayMode;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( location = 2 ) in float vTime;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\t\n\tfloat random(vec3 scale, float seed) {\n\t\treturn fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n\t}\n\n\tvoid main() {\n\n\t\tvec4 diffuseColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\n\t\t// make some noise\n\t\tfloat x = vUV.x * vUV.y * vTime;\n\t\tx = mod( x, 13.0 ) * mod( x, 123.0 );\n\t\tfloat dx = mod( x, 0.01 );\n\t\t\n\t\t// add noise\n\t\tvec3 finalColor = diffuseColor.rgb + diffuseColor.rgb * clamp( 0.1 + dx * 100.0, 0.0, 1.0 );\n\t\t\n\t\t// get us a sine and cosine\n\t\tvec2 sc = vec2( sin( vUV.y * fragmentUniforms.scanlineCount ), cos( vUV.y * fragmentUniforms.scanlineCount ) );\n\t\t\n\t\t// add scanlines\n\t\tfinalColor += diffuseColor.rgb * vec3( sc.x, sc.y, sc.x ) * fragmentUniforms.scanlineIntensity;\n\t\t\n\t\t// interpolate between source and result by intensity\n\t\tfinalColor = diffuseColor.rgb + clamp( fragmentUniforms.noiseIntensity, 0.0, 1.0 ) * ( finalColor - diffuseColor.rgb );\n\t\t\n\t\t// convert to grayscale if desired\n\t\tif(fragmentUniforms.grayMode == 1.0) finalColor = vec3( finalColor.r * 0.3 + finalColor.g * 0.59 + finalColor.b * 0.11 );\n\t\toutColor = vec4( finalColor, diffuseColor.a );\n\t}\n`),Ve(os,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(os,"uniformsBindGroupLayoutDescriptor_material",Ci.uniformsBindGroupLayoutDescriptor_material),Ve(os,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(os,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"scanlineIntensity"},{size:qe.float32,valueName:"noiseIntensity"},{size:qe.float32,valueName:"scanlineCount"},{size:qe.float32,valueName:"grayMode"}]);const as=new Float32Array(1);class ss extends Ci{constructor(t){super(t),Ve(this,"_intensity",.85),Ve(this,"_size",.1)}get intensity(){return this._intensity}set intensity(t){this._intensity=t,as[0]=this._intensity,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.intensity,as)}get size(){return this._size}set size(t){this._size=t,as[0]=this._size,this.redGPUContext.device.queue.writeBuffer(this.uniformBuffer_fragment.GPUBuffer,this.uniformBufferDescriptor_fragment.redStructOffsetMap.size,as)}}Ve(ss,"vertexShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_vertex.systemUniforms}\n    \n\tlayout( location = 0 ) in vec3 position;\n\tlayout( location = 1 ) in vec3 normal;\n\tlayout( location = 2 ) in vec2 uv;\n\tlayout( location = 0 ) out vec3 vNormal;\n\tlayout( location = 1 ) out vec2 vUV;\n\tvoid main() {\n\t\tvNormal = normal;\n\t\tvUV = uv;\n\t\tgl_Position = vec4(position*2.0,1.0);\n\t}\n\t`),Ve(ss,"fragmentShaderGLSL",`\n\t${rr.GLSL_VERSION}\n\t${rr.GLSL_SystemUniforms_fragment.systemUniforms}\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 0 ) uniform FragmentUniforms {\n        float intensity;\n        float size;\n    } fragmentUniforms;\n\tlayout( location = 0 ) in vec3 vNormal;\n\tlayout( location = 1 ) in vec2 vUV;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 1 ) uniform sampler uSampler;\n\tlayout( set = ${rr.SET_INDEX_FragmentUniforms}, binding = 2 ) uniform texture2D uSourceTexture;\n\tlayout( location = 0 ) out vec4 outColor;\n\n\tvoid main() {\n\t\tvec4 finalColor = texture( sampler2D( uSourceTexture, uSampler ), vUV );\n\t\tfloat dist = distance(vUV, vec2(0.5, 0.5));\n\t\tfinalColor.rgb *= smoothstep(0.8, fragmentUniforms.size * 0.799, dist * ( fragmentUniforms.intensity + fragmentUniforms.size ));\n\t\toutColor = finalColor;\n\t}\n`),Ve(ss,"PROGRAM_OPTION_LIST",{vertex:[],fragment:[]}),Ve(ss,"uniformsBindGroupLayoutDescriptor_material",Ci.uniformsBindGroupLayoutDescriptor_material),Ve(ss,"uniformBufferDescriptor_vertex",Cn.uniformBufferDescriptor_empty),Ve(ss,"uniformBufferDescriptor_fragment",[{size:qe.float32,valueName:"intensity"},{size:qe.float32,valueName:"size"}]);var us=new WeakMap,ls=new WeakMap,fs=new WeakMap,ms=new WeakMap,cs=new WeakMap,hs=new WeakMap,ds=new WeakMap,ps=new WeakMap,vs=new WeakMap,gs=new WeakMap;const RedGPU={glMatrix:Fe,DetectorGPU:er,UUID:ke,Mix:$n,baseGeometry:Hn,BaseLight:ji,BaseMaterial:Cn,DisplayContainer:pr,BaseObject3D:Hr,ShareGLSL:rr,BasePostEffect:Ci,BaseTexture:Qr,PipelineBasic:gr,BindGroup:Gn,Buffer:Jn,UniformBuffer:dr,UniformBufferDescriptor:Qe,Camera2D:wi,Camera3D:yn,ObitController:class extends yn{constructor(t){super(t),ze(this,Ji,{writable:!0,value:0}),ze(this,Qi,{writable:!0,value:0}),ze(this,Ki,{writable:!0,value:0}),ze(this,to,{writable:!0,value:10}),ze(this,eo,{writable:!0,value:1}),ze(this,ro,{writable:!0,value:.1}),ze(this,no,{writable:!0,value:3}),ze(this,io,{writable:!0,value:.1}),ze(this,oo,{writable:!0,value:-45}),ze(this,ao,{writable:!0,value:-90}),ze(this,so,{writable:!0,value:90}),ze(this,uo,{writable:!0,value:0}),ze(this,lo,{writable:!0,value:0}),ze(this,fo,{writable:!0,value:0}),Ve(this,"currentDistance",0),ze(this,mo,{writable:!0,value:!0}),Ve(this,"targetView",void 0),(e=>{let r,n,i,o,a,s,u,l,f,m,c,h,d,p;p=t=>{let e=this.targetView;if(e){let r,n,i=e.viewRect;if(r=t[f],n=t[m],!(i[0]<r&&r<i[0]+i[2]))return;if(!(i[1]<n&&n<i[1]+i[3]))return}return!0},c=t.detector.move,h=t.detector.up,d=t.detector.down,a=0,s=0,u=0,l=0,f=t.detector.isMobile?"clientX":"layerX",m=t.detector.isMobile?"clientY":"layerY",r=e=>{p(e)&&Oe(this,mo)&&(t.detector.isMobile?(a=e.changedTouches[0][f],s=e.changedTouches[0][m]):(a=e[f],s=e[m]),t.canvas.addEventListener(c,n),window.addEventListener(h,i))},n=e=>{p(e)&&Oe(this,mo)&&(t.detector.isMobile?(u=e.changedTouches[0][f]-a,l=e.changedTouches[0][m]-s,a=e.changedTouches[0][f],s=e.changedTouches[0][m]):(u=e[f]-a,l=e[m]-s,a=e[f],s=e[m]),Ye(this,uo,Oe(this,uo)-u*Oe(this,no)*.1),Ye(this,oo,Oe(this,oo)-l*Oe(this,no)*.1))},i=e=>{t.canvas.removeEventListener(c,n),window.removeEventListener(h,i)},o=t=>{if(Oe(this,mo)){if(!p(t))return;Ye(this,to,Oe(this,to)+t.deltaY/100*Oe(this,eo))}},t.canvas.addEventListener(d,r),t.canvas.addEventListener("wheel",o)})()}get needUpdate(){return Oe(this,mo)}set needUpdate(t){Ye(this,mo,t)}get centerX(){return Oe(this,Ji)}set centerX(t){Ye(this,Ji,t)}get centerY(){return Oe(this,Qi)}set centerY(t){Ye(this,Qi,t)}get centerZ(){return Oe(this,Ki)}set centerZ(t){Ye(this,Ki,t)}get distance(){return Oe(this,to)}set distance(t){Ye(this,to,t)}get speedDistance(){return Oe(this,eo)}set speedDistance(t){Ye(this,eo,t)}get delayDistance(){return Oe(this,ro)}set delayDistance(t){Ye(this,ro,t)}get speedRotation(){return Oe(this,no)}set speedRotation(t){Ye(this,no,t)}get delayRotation(){return Oe(this,io)}set delayRotation(t){Ye(this,io,t)}get minTilt(){return Oe(this,ao)}set minTilt(t){Ye(this,ao,t)}get maxTilt(){return Oe(this,so)}set maxTilt(t){Ye(this,so,t)}get pan(){return Oe(this,uo)}set pan(t){Ye(this,uo,t)}get tilt(){return Oe(this,oo)}set tilt(t){Ye(this,oo,t)}update(t){let e,r,n;n=Math.PI/180,Oe(this,mo)&&(Oe(this,oo)<Oe(this,ao)&&Ye(this,oo,Oe(this,ao)),Oe(this,oo)>Oe(this,so)&&Ye(this,oo,Oe(this,so)),e=Oe(this,io),r=this.matrix,Ye(this,lo,Oe(this,lo)+(Oe(this,uo)-Oe(this,lo))*e),Ye(this,fo,Oe(this,fo)+(Oe(this,oo)-Oe(this,fo))*e),Oe(this,to)<this.nearClipping&&Ye(this,to,this.nearClipping),this.currentDistance+=(Oe(this,to)-this.currentDistance)*Oe(this,ro),this.currentDistance<this.nearClipping&&(this.currentDistance=this.nearClipping),Fe.mat4.identity(r),Fe.mat4.translate(r,r,[Oe(this,Ji),Oe(this,Qi),Oe(this,Ki)]),Fe.mat4.rotateY(r,r,Oe(this,lo)*n),Fe.mat4.rotateX(r,r,Oe(this,fo)*n),Fe.mat4.translate(r,r,[0,0,this.currentDistance]),this.x=r[12],this.y=r[13],this.z=r[14],this.lookAt(Oe(this,Ji),Oe(this,Qi),Oe(this,Ki)))}},Geometry:jn,InterleaveInfo:Zn,AmbientLight:co,DirectionalLight:xo,PointLight:To,SpotLight:So,GLTFLoader:ai,TextureLoader:dn,GridMaterial:Mo,PBRMaterial_System:Wn,SkyBoxMaterial:bo,BitmapMaterial:yi,ColorMaterial:Zi,ColorPhongMaterial:Po,ColorPhongTextureMaterial:Eo,SpriteSheetAction:class extends ke{constructor(t,e=60,r=1,n=1,i=1){super(),this.texture=t,this.frameRate=e,this.segmentW=r,this.segmentH=n,this.totalFrame=i}},SpriteSheetMaterial:mi,Sprite3DMaterial:Fo,EnvironmentMaterial:Lo,RefractionMaterial:Io,StandardMaterial:Yo,Axis:class extends Hr{constructor(t){let e,r,n,i,o,a,s;super(t),n=new zo(t),i=new go(t,0,.5),o=new Zi(t,"#ff0000"),a=new Zi(t,"#00ff00"),s=new Zi(t,"#0000ff"),e=new jr(t,i,o),r=new jr(t,n,o),r.setScale(5,.1,.1),e.x=5,e.rotationZ=90,r.x=2.5,this.addChild(r,e),e=new jr(t,i,a),r=new jr(t,n,a),r.setScale(.1,5,.1),e.y=5,r.y=2.5,this.addChild(r,e),e=new jr(t,i,s),r=new jr(t,n,s),r.setScale(.1,.1,5),e.z=5,e.rotationX=-90,r.z=2.5,this.addChild(r,e),this.addChild(new jr(t,new po(t,.25,16,16,16),new Zi(t,"#ff00ff")))}},Grid:class extends Hr{constructor(t,e=100,r=100,n="#cccccc",i="#666666"){super(t),ze(this,$o,{writable:!0,value:100}),ze(this,ko,{writable:!0,value:100}),ze(this,qo,{writable:!0,value:"#cccccc"}),ze(this,Wo,{writable:!0,value:"#666666"}),Ve(this,"redGPUContext",void 0),this.redGPUContext=t,this.size=e,this.divisions=r,this.centerColor=n,this.color=i,this.makeGridGeometry(),this.material=new Mo(t),this.primitiveTopology="line-list"}get color(){return Oe(this,Wo)}set color(t){Ye(this,Wo,t),this.makeGridGeometry()}get centerColor(){return Oe(this,qo)}set centerColor(t){Ye(this,qo,t),this.makeGridGeometry()}get divisions(){return Oe(this,ko)}set divisions(t){Ye(this,ko,t),this.makeGridGeometry()}get size(){return Oe(this,$o)}set size(t){Ye(this,$o,t),this.makeGridGeometry()}makeGridGeometry(){let t,e,r,n,i,o,a=this.redGPUContext,s=[];for(t=this.divisions/2,e=this.size/this.divisions,r=this.size/2,n=0,i=-r;n<=this.divisions;n++,i+=e)o=n===t?Je.hexToRGB_ZeroToOne(this.centerColor):Je.hexToRGB_ZeroToOne(this.color),s.push(-r,0,i,o[0],o[1],o[2],1,r,0,i,o[0],o[1],o[2],1,i,0,-r,o[0],o[1],o[2],1,i,0,r,o[0],o[1],o[2],1);this.geometry=new jn(a,new Jn(a,"gridInterleaveBuffer_"+this.size+"_"+this.divisions+"_"+this.centerColor+"_"+this.color,Jn.TYPE_VERTEX,new Float32Array(s),[new Zn("vertexPosition","float32x3"),new Zn("vertexColor","float32x4")]))}},Mesh:jr,SkyBox:class extends Hr{constructor(t,e){super(t),this.geometry=new zo(t),this.material=new bo(t,e),this.cullMode="front"}},Sprite3D:class extends Hr{constructor(t,e,r){super(t),this.geometry=e,this.material=r,this.cullMode="none",this.renderDrawLayerIndex=Wi.DRAW_LAYER_INDEX2_Z_POINT_SORT}get material(){return this._material}set material(t){t instanceof Fo?(this._material=t,this.dirtyPipeline=!0):Je.throwFunc(`addChild - only allow Sprite3DMaterial Instance. - inputValue : ${t} { type : ${typeof t} }`)}get rotationX(){return this._rotationX}set rotationX(t){}get rotationY(){return this._rotationY}set rotationY(t){}get rotationZ(){return this._rotationZ}set rotationZ(t){}get useFixedScale(){return this.material.useFixedScale}set useFixedScale(t){this.material.useFixedScale=t}addChild(t){}},Text:class extends Hr{constructor(t,e=256,r=128){super(t),Ve(this,"_cvs",void 0),Ve(this,"_ctx",void 0),Ve(this,"_svg",void 0),Ve(this,"_img",void 0),Ve(this,"_width",256),Ve(this,"_height",128),this.renderDrawLayerIndex=Wi.DRAW_LAYER_INDEX2_Z_POINT_SORT,e>1920&&(e=1920),r>1920&&(r=1920),this._cvs=new OffscreenCanvas(e,r),this._ctx=this._cvs.getContext("2d"),this._svg=document.createElementNS("http://www.w3.org/2000/svg","svg"),this._svg.setAttribute("xmlns","http://www.w3.org/2000/svg"),this._svg.style="position:absolute;top:0px;left:0px;text-align:center;z-index:10",this._svg.innerHTML='<foreignObject  width="100%" style="position:absolute;top:0;left:0">   <table xmlns="http://www.w3.org/1999/xhtml" style="border-collapse: collapse;position:table;top:0;left:0;width:100%;table-layout:fixed">       <tr xmlns="http://www.w3.org/1999/xhtml">       <td xmlns="http://www.w3.org/1999/xhtml"  > </td>       </tr>   </table></foreignObject>',this.geometry=new _i(t),this.material=new Jo(t),this.cullMode="none",this.depthWriteEnabled=!1,this._img=new Image,this.width=e,this.height=r,Qo(this,"padding",0),Qo(this,"background",""),Qo(this,"color","#000"),Qo(this,"fontFamily","Arial"),Qo(this,"fontSize",22),Qo(this,"fontWeight","normal"),Qo(this,"fontStyle","normal"),Qo(this,"lineHeight",33),Qo(this,"letterSpacing",0),Qo(this,"wordBreak","break-all"),Qo(this,"verticalAlign","middle"),Qo(this,"textAlign","center"),this._img.onload=e=>{let r,n;r=this._width,n=this._height,this._cvs.width=r,this._cvs.height=n,this._ctx.clearRect(0,0,r,n),this._ctx.drawImage(this._img,0,0,r,n),this.material.width=r,this.material.height=n,this._cvs.convertToBlob().then(e=>{new en(t,URL.createObjectURL(e),{magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge",addressModeW:"repeat"},!0,t=>{this.material.diffuseTexture&&this.material.diffuseTexture.GPUTexture.destroy(),this.material.diffuseTexture=t})})}}get width(){return this._width}set width(t){this.material.width=this._width=t<2?2:t,ua(this)}get height(){return this._height}set height(t){this.material.height=this._height=t<2?2:t,ua(this)}get useFixedScale(){return this.material.useFixedScale}set useFixedScale(t){this.material.useFixedScale=t}get useSprite3DMode(){return this.material.useSprite3DMode}set useSprite3DMode(t){this.material.useSprite3DMode=t}get material(){return this._material}set material(t){t instanceof Jo?(this._material=t,this.dirtyPipeline=!0):Je.throwFunc(`addChild - only allow TextMaterial Instance. - inputValue : ${t} { type : ${typeof t} }`)}get text(){return this._text}set text(t){Ko=this._svg,ta=Ko.querySelector("foreignObject td"),t=t.toString(),this._text=t.replace(/\<br\>/gi,"<div/>");let e=this,r=this._text.match(/<img .*?>/g),n=[],i=this._text;r=r||[];let o=r.length,a=0;r.forEach((function(t){let r=t.match(/src\s*=\s*(\'|\").*?(\'|\")/g)[0];r=r.replace(/src\s*=\s*(\'|\")/g,"").replace(/(\'|\")/g,"");let s=document.createElement("div");s.innerHTML=t;let u=s.querySelector("img");u.onload=function(){let t=document.createElement("canvas");t.width=u.style.width?+u.style.width:u.width,t.height=u.style.height?+u.style.height:u.height;let r=t.getContext("2d");r.scale(t.width/u.naturalWidth,t.height/u.naturalHeight),r.drawImage(u,0,0),l.result='<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink= "http://www.w3.org/1999/xlink" width="'+u.width+'" height="'+u.height+'" display="inline" style="vertical-align: middle;display: inline-block"><image xlink:href="'+t.toDataURL("image/png")+'" height="'+u.height+'px" width="'+u.width+'px" /></svg>',a++,a==o&&(n.forEach((function(t){i=i.replace(t.source,t.result)})),ta.innerHTML=i,ua(e)),u.onload=null};let l={source:t,sourceSrc:r,result:""};n.push(l)})),0==r.length&&(ta.innerHTML=i,ua(this))}addChild(t){}},Line:va,Particle:Pi,PostEffect_BrightnessContrast:_a,PostEffect_Gray:xa,PostEffect_HueSaturation:Ta,PostEffect_Invert:Ua,PostEffect_Threshold:Ma,PostEffect_Bloom:Ya,PostEffect_Bloom_blend:Ra,PostEffect_Blur:Xa,PostEffect_BlurX:Pa,PostEffect_BlurY:Ga,PostEffect_GaussianBlur:Ca,PostEffect_ZoomBlur:$a,PostEffect_DoF:Ja,PostEffect_DoF_blend:qa,PostEffect_HalfTone:Ka,PostEffect_Pixelize:es,PostEffect:xr,PostEffect_Convolution:ns,PostEffect_Film:os,PostEffect_Vignetting:ss,Box:zo,Cylinder:go,Plane:_i,Sphere:po,Render:Wi,Debugger:vi,CopyBufferToTexture:fn,ImageLoader:ln,BitmapCubeTexture:hn,BitmapTexture:en,Sampler:ir,ShaderModule_GLSL:wn,TypeSize:qe,UTILColor:We,UTILMath:He,UTIL:Je,RedGPUContext:hr,Scene:class extends pr{constructor(){super(),ze(this,us,{writable:!0,value:"#000"}),ze(this,ls,{writable:!0,value:1}),ze(this,fs,{writable:!0,value:[0,0,0,Oe(this,ls)]}),ze(this,ms,{writable:!0,value:[]}),ze(this,cs,{writable:!0,value:[]}),ze(this,hs,{writable:!0,value:[]}),ze(this,ds,{writable:!0,value:void 0}),ze(this,ps,{writable:!0,value:void 0}),ze(this,vs,{writable:!0,value:void 0}),ze(this,gs,{writable:!0,value:void 0}),Ve(this,"_flatChildList",[])}get grid(){return Oe(this,ps)}set grid(t){Ye(this,ps,t)}get axis(){return Oe(this,vs)}set axis(t){Ye(this,vs,t)}get skyBox(){return Oe(this,gs)}set skyBox(t){Ye(this,gs,t)}get backgroundColor(){return Oe(this,us)}set backgroundColor(t){Ye(this,us,t);let e=Je.hexToRGB_ZeroToOne(t);Ye(this,fs,[e[0]*Oe(this,ls),e[1]*Oe(this,ls),e[2]*Oe(this,ls),Oe(this,ls)])}get backgroundColorAlpha(){return Oe(this,ls)}set backgroundColorAlpha(t){Ye(this,ls,t);let e=Je.hexToRGB_ZeroToOne(Oe(this,us));Ye(this,fs,[e[0]*Oe(this,ls),e[1]*Oe(this,ls),e[2]*Oe(this,ls),Oe(this,ls)])}get backgroundColorRGBA(){return Oe(this,fs)}get directionalLightList(){return Oe(this,ms)}get pointLightList(){return Oe(this,cs)}get ambientLight(){return Oe(this,ds)}get spotLightList(){return Oe(this,hs)}addLight(t){switch(t.constructor){case xo:Oe(this,ms).length===rr.MAX_DIRECTIONAL_LIGHT&&Je.throwFunc(`addLight : DirectionalLight - Up to ${rr.MAX_DIRECTIONAL_LIGHT} are allowed.`),Oe(this,ms).push(t);break;case To:Oe(this,cs).length===rr.MAX_POINT_LIGHT&&Je.throwFunc(`addLight : PointLight - Up to ${rr.MAX_POINT_LIGHT} are allowed.`),Oe(this,cs).push(t);break;case So:Je.throwFunc("addLight : spotLightList -아직사용할 수없는 유형의 라이트");break;case co:Ye(this,ds,t);break;default:Je.throwFunc(`addLight : only allow BaseLight Instance - inputValue : ${t} { type : ${typeof t} }`)}}removeLight(t){let e;switch(t.constructor){case xo:e=Oe(this,ms).indexOf(t),e>-1&&Oe(this,ms).splice(e,1);break;case To:e=Oe(this,cs).indexOf(t),e>-1&&Oe(this,cs).splice(e,1);break;case So:break;case co:Ye(this,ds,null);break;default:Je.throwFunc(`removeLight : only allow BaseLight Instance - inputValue : ${t} { type : ${typeof t} }`)}}removeLightAll(){Oe(this,ms).length=0,Oe(this,cs).length=0,Oe(this,hs).length=0,Ye(this,ds,null)}},View:Or};export default RedGPU;
